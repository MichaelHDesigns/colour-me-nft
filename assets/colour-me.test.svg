<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewBox="0 0 1000 1000"><defs><style>.toolbar {fill: #f0f0f0; stroke: #ccc; stroke-width: 1;}.canvas {fill: white; stroke: #ccc; stroke-width: 1;}#drawing-area {pointer-events: none;}text {font-family: Arial, sans-serif; font-size: 14px; fill: #333;}.toolbar-text {font-size: 12px;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.button-text {font-size: 20px;fill: white;pointer-events: none;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.color-btn, .brush-size, .tool-bg, .action-bg {cursor: pointer;}.color-btn {stroke: #333; stroke-width: 2;}.color-btn:hover {stroke: #777; stroke-width: 3;}.color-btn.active {stroke: #000; stroke-width: 3;}#brush-slider-handle {cursor: grab;}#brush-slider-handle:active {cursor: grabbing;}#brush-slider-track {cursor: pointer;}.tool-button {font-size: 20px;fill: #666;transition: fill 0.2s;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.tool-button:hover {fill: #333;}.tool-button.active {fill: #333;}.tool-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.tool-bg:hover {fill: #e0e0e0; stroke: #999;}.tool-bg.active {fill: #333; stroke: #333;}.tool-bg.active:hover {fill: #444; stroke: #444;}.tool-group {cursor: pointer;}.tool-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.tool-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group {cursor: pointer;}.shape-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.shape-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group .tool-bg.active ~ .shape-icon {stroke: white !important;}.shape-btn { cursor: pointer; }.action-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.action-bg:hover {fill: #e0e0e0; stroke: #999;}.action-bg.clear {fill: #ffebee; stroke: #ffcdd2;}.action-bg.clear:hover {fill: #ffcdd2; stroke: #ef9a9a;}.action-bg.save {fill: #e8f5e8; stroke: #c8e6c9;}.action-bg.save:hover {fill: #c8e6c9; stroke: #a5d6a7;}.action-bg.export {fill: #e3f2fd; stroke: #bbdefb;}.action-bg.export:hover {fill: #bbdefb; stroke: #90caf9;}</style><rect id="canvas-bg" x="10" y="90" width="980" height="900" rx="5"/><clipPath id="canvas-clip"><use href="#canvas-bg"/></clipPath></defs><rect width="1000" height="1000" fill="#e8e8e8"/><use href="#canvas-bg" class="canvas"/><rect x="10" y="10" width="980" height="70" class="toolbar" rx="5"/><g id="brush-size-controls"><rect x="300" y="25" width="120" height="20" fill="#f0f0f0" stroke="#ccc" stroke-width="1" rx="10"/><rect id="brush-slider-track" x="305" y="27.5" width="110" height="15" fill="#ddd" rx="7.5"/><circle id="brush-slider-handle" cx="310" cy="35" r="8" fill="#4CAF50" stroke="#45a049" stroke-width="2" cursor="pointer"/></g><circle cx="50" cy="35" r="15" class="color-btn active" fill="#000000"/><circle cx="90" cy="35" r="15" class="color-btn" fill="#283601"/><circle cx="130" cy="35" r="15" class="color-btn" fill="#6f4c83"/><circle cx="170" cy="35" r="15" class="color-btn" fill="#736158"/><circle cx="210" cy="35" r="15" class="color-btn" fill="#143782"/><circle cx="250" cy="35" r="15" class="color-btn" fill="#521781"/><g class="shape-group" transform="translate(445, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="polyline"/><polyline points="5,15 12.5,10 17.5,20 25,15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(485, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="line"/><line x1="5" y1="10" x2="25" y2="20" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(525, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="polygon-3"/><polygon points="15,7 25,23 5,23" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g id="drawing-area" clip-path="url(#canvas-clip)"><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#000000" stroke-width="15" d="M335 918 L369 935 L327 941 L372 902 L406 903 L396 880 L422 893 L439 919 L477 941 L433 926 L451 917 L451 960 L418 948 L411 981 L454 961 L437 944 L450 935 L489 944 L442 987 L425 1000 L471 967 L425 938 L455 953 L430 939 L416 895 L460 912 L491 957 L521 955 L515 964 L476 984 L437 956 L440 911 L463 924 L473 970 L514 946 L555 968 L561 972 L572 932 L558 944 L599 970 L565 940 L519 943 L474 974 L500 995 L491 1000 L480 1000 L529 1000 L575 1000 L531 998 L521 1000 L531 1000 L521 959 L507 1000 L520 985 L479 1000 L488 987 L483 946 L468 929 L443 920 L454 963 L469 965 L519 1000 L541 992 L528 1000 L530 987"/><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#ffffff" stroke-width="15" d="M126 264 L105 288 L127 258 L162 307 L184 302 L224 313 L243 328 L279 297 L283 250 L319 278 L278 324 L250 299 L215 336 L235 356 L234 375 L207 385 L157 420 L189 410 L212 453 L169 420 L121 402 L87 357 L47 379 L56 395 L64 413 L112 400 L116 436 L131 413 L81 392 L112 387 L115 351 L103 358 L104 363 L89 385 L120 412 L90 386 L106 374 L148 333 L183 375 L136 331 L115 381 L76 420 L105 428 L64 469 L39 519 L8 486 L1 533 L24 553 L45 576 L26 586 L1 632 L1 599 L22 619 L15 576 L5 591 L1 550 L1 548 L1 562 L1 545 L1 554 L1 530 L51 578 L18 588 L61 603 L75 597 L74 638 L61 624 L97 577 L52 604 L87 633 L128 674 L129 653 L103 611 L118 647 L127 682 L89 714 L125 764 L154 805 L161 766 L175 770 L158 763 L176 729 L201 741 L154 740 L203 750 L218 741 L243 693 L245 735 L237 749 L242 732 L245 705 L214 658 L195 668 L159 621 L135 662 L167 670 L160 720 L143 672 L113 631 L105 655 L150 605 L150 566 L147 598 L163 637 L124 599 L89 629 L53 589 L30 595 L17 590 L1 634 L1 663 L41 673 L3 656 L34 674 L32 662 L40 684 L14 725 L44 739 L39 730 L87 732 L105 712 L86 747 L74 785 L70 780 L80 795 L43 772 L2 739 L1 750 L1 724 L35 742 L2 695 L1 734 L47 702 L5 673 L10 642 L1 636 L43 682 L63 642 L30 610 L8 657 L2 611 L1 634 L1 600 L22 645 L33 632 L1 587 L1 609 L1 566 L1 530 L1 554 L22 547 L4 579 L1 574 L1 557 L1 549 L1 590 L1 592 L37 603 L18 564 L1 572 L6 586 L31 598 L78 635 L111 672 L115 639 L122 684 L117 656 L71 698 L58 718 L9 709 L11 683 L18 725 L68 732 L21 689 L24 697 L1 713 L28 739 L15 701 L31 725 L28 757 L40 719 L63 707 L51 756 L76 764 L40 789 L88 809 L75 774 L108 801 L107 839 L97 828 L142 858 L186 859 L150 850 L112 852 L116 819 L124 796 L78 811 L92 767 L59 737 L108 697 L65 692 L87 709 L43 660 L49 640 L74 657 L38 610 L37 645 L1 663 L40 700 L21 666 L28 669 L65 708 L107 668 L82 699 L106 703 L120 667 L86 656 L62 636 L36 656 L15 646 L1 677 L7 708 L1 730 L43 745 L55 792 L67 837 L93 874 L67 835 L31 861 L1 825 L1 788 L32 747 L45 723 L19 709 L10 712 L57 755 L96 709 L133 755 L161 725 L178 763 L168 737 L170 787 L146 740 L188 763 L147 755 L196 741 L207 731 L224 754 L224 714 L234 695 L281 715 L271 677 L227 644 L203 665 L174 653 L136 649 L105 697 L128 695 L84 687 L120 731 L73 765 L75 791 L86 835 L99 867 L93 873 L122 875 L141 852 L156 888 L176 871 L225 886 L270 845 L241 798 L291 828 L328 874 L377 898 L364 865 L331 911 L322 865 L310 863 L274 888 L224 901 L187 892 L213 918 L256 968 L286 964 L244 937 L210 974 L181 927 L164 902 L130 912 L155 946 L117 936 L142 943 L173 992 L148 987 L164 1000 L198 1000 L244 950 L219 931 L215 925 L188 882 L187 853 L203 871 L206 880 L248 899 L222 864 L255 891 L287 895 L337 925 L368 943 L371 895 L410 935 L391 985 L362 947 L390 947 L439 988 L454 987 L481 983 L455 1000 L478 954 L473 1000 L517 1000 L487 956 L535 931 L492 939 L525 982 L501 970 L472 1000 L457 970 L487 986 L515 1000 L528 1000 L499 979 L467 952 L428 961 L439 982 L471 951 L475 971 L515 941 L541 963 L496 1000 L536 974 L583 943 L552 941 L560 914 L597 870 L619 873 L638 825 L672 874 L714 866 L722 888 L745 903 L724 897 L723 881 L693 899 L731 897 L766 900 L775 887 L814 933 L864 921 L892 902 L937 940 L895 969 L941 991 L922 957 L924 977 L936 981 L964 976 L993 1000 L986 1000 L1000 1000 L998 1000 L999 985 L1000 1000 L958 1000 L946 989 L938 986 L932 953 L914 991 L909 1000 L941 958 L939 918 L950 890 L996 882 L951 878 L958 901 L1000 938 L986 951 L959 911 L992 888 L978 902 L956 875 L933 853 L937 866 L949 839 L998 810 L983 812 L994 806 L1000 766 L993 740 L991 746 L971 717 L963 713 L1000 756 L955 801 L946 789 L937 824 L896 862 L865 833 L821 823 L790 833 L765 816 L741 799 L710 793 L710 826 L757 827 L739 790 L774 822 L818 784 L776 757 L825 722 L813 675 L793 658 L752 638 L777 641 L777 683 L756 649 L716 652 L693 694 L714 669 L677 709 L689 703 L713 732 L697 707 L729 712 L775 712 L816 753 L803 719 L812 721 L799 707 L827 730 L792 707 L770 748 L720 776 L755 772 L742 801 L759 778 L805 817 L842 839 L825 863 L806 877 L809 905 L847 937 L820 889 L771 878 L733 893 L776 875 L746 865 L707 834 L669 874 L716 894 L756 854 L755 844 L715 829 L689 828 L654 852 L644 847 L654 839 L686 848 L729 801 L743 825 L725 816 L704 767 L691 754 L645 791 L689 749 L656 743 L683 713 L645 745 L613 784 L625 767 L632 740 L623 710 L649 731 L699 746 L696 700 L717 657 L684 703 L668 733 L706 765 L748 809 L737 830 L752 847 L733 844 L779 885 L738 857 L776 874 L791 889 L757 877 L771 922 L769 937 L815 967 L802 1000 L842 1000 L818 959 L864 909 L891 942 L867 929 L862 900 L848 895 L868 933 L881 936 L840 931 L858 926 L876 891 L840 876 L795 926 L779 892 L771 859 L758 903 L766 923 L719 880 L721 904 L691 886 L712 877 L703 885 L752 842 L724 855 L729 879 L757 918 L805 962 L828 943 L813 992 L851 942 L826 918 L808 870 L819 842 L789 887 L787 933 L740 953 L743 917 L707 869 L735 833 L708 849 L721 815 L682 848 L697 837 L711 820 L761 788 L772 754 L728 788 L703 755 L734 767 L730 776 L716 801 L693 837 L702 849 L739 842 L698 840 L744 830 L768 839 L789 833 L768 790 L767 819 L768 810 L744 838 L758 850 L764 837 L803 857 L827 819 L784 831 L825 849 L809 887 L835 916 L795 884 L765 842 L743 833 L760 803 L760 844 L749 808 L743 824 L789 868 L829 867 L843 820 L875 777 L836 793 L852 751 L839 756 L819 766 L868 772 L863 798 L903 789 L949 763 L942 788 L979 837 L940 825 L903 811 L861 801 L858 851 L809 845 L804 855 L755 864 L788 836 L752 799 L782 838 L764 847 L780 849 L808 809 L774 817 L753 839 L726 847 L752 806 L792 822 L770 779 L753 815 L779 802 L817 822 L815 802 L846 823 L863 798 L887 791 L931 784 L917 777 L919 799 L884 828 L860 797 L856 763 L877 774 L829 808 L864 796 L896 836 L918 823 L925 788 L961 780 L934 785 L924 802 L938 757 L898 782 L944 757 L977 766 L989 782 L962 820 L992 853 L1000 860 L969 872 L933 867 L927 889 L890 892 L907 926 L939 952 L959 977 L986 942 L988 920 L1000 957 L972 1000 L949 979 L972 997 L926 1000 L972 953 L1000 954 L967 910 L951 921 L976 883 L950 902 L970 871 L951 874 L946 914 L903 869 L938 847 L910 836 L934 790 L911 775 L908 777 L902 747 L869 747 L911 771 L864 821 L881 848 L919 840 L948 868 L938 823 L934 864 L887 901 L897 874 L865 889 L895 853 L927 825 L899 853 L894 817 L896 867 L891 835 L847 814 L840 842 L817 847 L845 837 L859 836 L815 858 L790 818 L777 776 L775 778 L738 780 L730 740 L710 738 L710 782 L668 752 L656 728 L670 707 L648 706 L656 734 L674 780 L724 752 L699 737 L695 693 L719 721 L692 726 L652 757 L675 733 L635 713 L663 683 L662 696 L710 694 L754 743 L757 737 L722 692 L762 697 L757 659 L712 667 L758 666 L722 684 L757 657 L748 650 L742 692 L752 664 L708 667 L709 693 L708 722 L758 730 L761 732 L722 770 L674 758 L646 737 L620 699 L592 735 L546 759 L569 710 L610 672 L572 691 L603 716 L594 744 L615 742 L629 749 L639 783 L648 796 L616 790 L574 805 L622 770 L597 801 L602 837 L646 848 L691 884 L683 882 L706 909 L740 867 L748 899 L796 889 L755 867 L790 850 L771 890 L761 857 L801 884 L816 840 L797 824 L803 844 L789 871 L826 894 L837 918 L810 942 L845 897 L885 886 L931 883 L967 895 L948 935 L956 928 L950 969 L920 958 L888 943 L877 896 L854 927 L822 956 L868 999 L872 988 L892 956 L898 965 L917 961 L886 975 L841 996 L828 986 L869 941 L832 934 L838 923 L813 879 L809 849 L806 811 L810 855 L763 891 L791 907 L821 936 L781 925 L776 937 L786 948 L815 950 L862 945 L903 918 L858 914 L907 894 L914 926 L953 973 L904 995 L896 957 L865 953 L888 984 L922 1000 L940 970 L954 921 L909 939 L866 984 L884 944 L866 972 L896 1000 L878 1000 L838 957 L842 982 L877 1000 L883 1000 L912 1000 L935 996 L925 978 L936 1000 L967 995 L967 1000 L936 981 L891 977 L913 960 L904 949 L953 917 L926 869 L878 892 L902 909 L875 913 L841 925 L804 913 L801 931 L833 950 L818 971 L820 923 L773 957 L796 918 L748 960 L729 981 L768 934 L763 884 L811 931 L808 899 L833 904 L817 868 L834 842 L833 845 L868 864 L874 914 L859 946 L889 975 L912 963 L917 922 L955 940 L993 906 L994 902 L1000 942 L1000 958 L998 950 L961 973 L928 968 L943 961 L972 919 L971 962 L998 967 L954 928 L970 939 L938 893 L939 876 L954 883 L917 853 L965 882 L933 862 L921 819"/><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#000000" stroke-width="15" d="M86 562 L85 597 L90 569 L73 598 L115 628 L122 631 L92 656 L60 645 L19 664 L43 679 L50 723 L55 675 L42 663 L86 685 L107 646 L143 632 L161 596 L120 618 L143 646 L128 599 L145 639 L118 593 L124 596 L132 575 L178 551 L132 549 L155 569 L153 581 L155 607 L152 641 L123 655 L94 683 L122 680 L131 658 L145 658 L137 689 L87 690 L89 681 L57 682 L59 682 L41 709 L50 751 L77 786 L43 746 L80 749 L98 704 L145 681 L111 707 L112 754 L109 712 L112 682 L145 641 L106 658 L60 645 L94 651 L46 658 L16 632 L41 646 L28 610 L1 583 L38 585 L28 614 L30 591 L74 571 L68 593 L20 559 L1 558 L5 580 L1 566 L44 524 L31 495 L1 487 L1 454 L1 404 L1 448 L13 441 L57 406 L87 408 L82 394 L56 439 L45 443 L38 395 L38 357 L19 358 L1 401 L17 428 L1 442 L10 414 L1 436 L1 473 L3 446 L1 466 L1 510 L32 544 L17 515 L59 480 L13 498 L1 540 L1 523 L1 488 L1 500 L21 462 L62 496 L41 450 L1 482 L1 503 L1 490 L1 521 L1 524 L29 474 L60 440 L74 476 L54 489 L58 444 L21 478 L1 516 L1 565 L17 533 L19 502 L39 480 L10 528 L1 487 L51 470 L20 421 L1 403 L9 388 L1 397 L1 376 L6 369 L48 345 L42 393 L86 363 L117 326 L107 284 L141 299 L186 329 L141 365 L114 327 L122 377 L167 402 L153 428 L192 428 L228 450 L182 400 L187 427 L174 439 L171 436 L209 447 L168 426 L200 398 L216 399 L204 422 L183 416 L187 461 L138 413 L162 417 L121 381 L127 367 L122 359 L83 310 L34 336 L23 344 L21 356 L33 382 L18 420 L24 392 L1 389 L12 407 L1 374 L1 338 L18 357 L31 395 L44 381 L59 360 L89 375 L118 335 L147 360 L197 333 L177 307 L142 328 L173 341 L133 338 L143 346 L179 362 L143 361 L141 379 L173 392 L211 348 L201 336 L215 297 L229 249 L222 251 L222 289 L174 304 L204 312 L192 355 L240 344 L262 301 L232 266 L238 262 L243 259 L195 217 L207 233 L247 208 L267 177 L303 214 L264 169 L273 128 L308 147 L321 147 L317 184 L291 179 L336 142 L346 163 L395 159 L370 159 L337 153 L316 137 L323 178 L303 134 L346 87 L371 132 L375 159 L419 126 L464 80 L414 51 L437 74 L455 108 L446 71 L411 99 L430 97 L469 58 L437 22 L457 5 L443 1 L394 1 L398 27 L370 38 L367 62 L346 26 L307 36 L316 31 L332 21 L285 66 L301 19 L335 69 L374 46 L341 13 L306 1 L288 1 L298 1 L341 1 L337 1 L356 25 L377 35 L413 68 L425 22 L381 57 L374 53 L341 65 L335 39 L359 5 L343 1 L374 1 L335 25 L326 1 L347 7 L386 1 L429 1 L471 1 L472 10 L432 41 L393 52 L383 80 L390 52 L358 96 L318 120 L343 73 L302 122 L259 117 L272 78 L289 126 L308 124 L353 83 L323 91 L280 110 L314 123 L277 169 L281 188 L300 149 L289 108 L307 109 L329 124 L303 139 L286 185 L253 143 L237 106 L203 154 L231 133 L219 159 L179 115 L158 133 L161 163 L180 185 L167 147 L179 116 L184 133 L162 115 L127 139 L120 98 L155 139 L111 127 L76 146 L62 127 L109 111 L141 160 L131 130 L140 82 L129 111 L129 143 L111 191 L73 177 L56 131 L27 148 L1 180 L17 225 L34 233 L3 268 L39 304 L74 354 L69 369 L113 327 L118 374 L157 407 L177 423 L135 376 L174 330 L191 291 L240 319 L283 362 L234 338 L272 310 L300 264 L296 253 L258 249 L302 247 L343 206 L306 242 L273 274 L302 281 L348 236 L343 212 L365 165 L346 137 L356 154 L365 165 L414 203 L364 160 L336 204 L352 186 L370 183 L375 184 L367 154 L383 114 L395 133 L428 108 L469 118 L488 135 L492 111 L519 144 L489 129 L537 114 L521 162 L497 143 L503 98 L519 75 L492 106 L461 113 L448 69 L482 25 L504 71 L468 116 L516 113 L471 132 L519 93 L513 92 L479 106 L489 100 L498 129 L524 95 L495 47 L536 34 L529 49 L554 70 L515 59 L469 78 L432 36 L448 28 L423 54 L438 30 L412 16 L410 66 L448 114 L485 163 L517 182 L535 135 L557 147 L551 176 L598 155 L614 143 L589 149 L588 175 L539 193 L586 150 L550 146 L534 152 L536 191 L530 220 L548 226 L499 233 L529 189 L496 157 L461 132 L431 103 L386 101 L375 125 L356 153 L310 203 L272 159 L313 153 L282 183 L331 212 L321 173 L369 221 L371 239 L414 239 L437 280 L442 256 L405 269 L375 267 L392 245 L379 254 L401 260 L442 298 L410 289 L423 308 L471 300 L435 322 L396 356 L411 385 L412 346 L375 388 L422 411 L382 399 L411 446 L455 397 L417 445 L387 456 L398 461 L428 413 L415 433 L447 450 L425 418 L473 468 L503 485 L549 513 L546 500 L543 537 L555 553 L566 532 L517 557 L542 528 L569 499 L614 484 L566 492 L611 444 L607 438 L642 478 L644 522 L596 539 L622 558 L670 508 L661 489 L685 462 L655 483 L605 462 L574 494 L531 522 L533 561 L490 538 L540 553 L570 596 L575 589 L624 577 L670 562 L662 595 L704 629 L749 654 L721 697 L744 744 L758 787 L805 743 L846 735 L802 686 L838 729 L846 721 L821 743 L866 720 L865 710 L882 712 L918 680 L907 687 L878 729 L926 764 L932 722 L922 742 L890 723 L877 682 L875 651 L899 677 L877 700 L896 672 L863 672 L832 701 L859 686 L895 695 L927 691 L919 643 L948 667 L932 698 L981 731 L931 750 L958 778 L924 816 L966 824 L999 851 L959 832 L978 803 L943 850 L941 859 L903 845 L856 799 L814 783 L790 803 L756 766 L744 812 L765 799 L781 834 L809 829 L764 847 L814 830 L821 862 L808 860 L792 880 L761 915 L791 869 L807 908 L820 877 L869 903 L837 867 L815 860 L796 869 L845 841 L834 864 L865 899 L870 921 L895 916 L860 889 L829 888 L871 882 L851 906 L899 940 L884 988 L933 946 L970 934 L949 932 L948 919 L932 883 L888 880 L847 891 L802 900 L752 850 L733 841 L720 831 L750 847 L727 867 L775 870 L813 883 L819 903 L828 903 L788 899 L802 876 L820 912 L813 959 L859 915 L909 874 L888 908 L843 858 L864 894 L880 938 L887 979 L911 974 L862 958 L837 909 L846 873 L811 854 L813 869 L823 849 L820 890 L851 862 L879 896 L833 894 L861 921 L851 936 L823 898 L858 932 L816 976 L846 972 L844 987 L813 1000 L834 983 L883 970 L864 1000 L886 986 L841 984 L797 1000 L774 1000 L797 990 L798 941 L793 955 L804 989 L810 1000 L840 1000 L879 1000 L895 1000 L924 957 L939 910 L947 893 L990 851 L948 857 L956 881 L962 925 L951 951 L925 967 L925 933 L897 928 L861 896 L848 871 L814 851 L827 810 L852 760 L850 743 L812 723 L803 743 L843 780 L832 785 L851 789 L901 810 L929 776 L921 825 L919 780 L907 779 L907 791 L870 835 L880 855 L842 813 L814 843 L796 878 L822 871 L788 917 L811 946 L780 906 L808 903 L834 875 L847 839 L893 857 L906 868 L870 861 L822 896 L826 942 L868 953 L878 943 L898 982 L924 1000 L928 1000 L974 1000 L985 1000 L1000 998 L984 948 L1000 975 L1000 945 L1000 900 L980 852 L1000 839 L1000 855 L1000 861 L963 900 L1000 858 L968 883 L970 880 L1000 859 L974 889 L1000 911 L988 883 L938 861 L988 833 L940 804 L987 772 L955 733 L913 703 L936 719 L971 728 L1000 701 L987 739 L965 782 L957 782 L967 791 L928 780 L924 793 L878 819 L888 840 L841 874 L845 864 L795 866 L815 817 L825 822 L856 827 L870 824 L891 829 L893 787 L897 808 L868 778 L874 737 L868 759 L882 778 L905 731 L877 715 L911 761 L950 799 L985 835 L1000 865 L973 898 L961 874 L934 856 L888 858 L898 874 L917 828 L932 838 L980 841 L951 845 L996 857 L1000 842 L955 869 L994 834 L1000 855 L1000 896 L1000 876 L956 855 L960 819 L920 832 L888 804 L862 801 L851 834 L850 807 L844 786 L819 746 L827 725 L794 699 L816 744 L781 740 L758 694 L751 685 L716 662 L751 704 L706 717 L686 719 L724 673 L714 722 L764 720 L809 743 L818 751 L856 754 L888 780 L927 789 L919 815 L967 795 L950 780 L945 829 L966 793 L948 793 L961 839 L933 819 L954 829 L963 862 L944 886 L945 890 L951 845 L975 825 L966 792 L984 842 L943 866 L905 890 L955 900 L942 942 L918 911 L900 863 L860 850 L890 818 L903 802 L911 849 L919 816 L920 826 L921 854 L921 853 L871 872 L838 879 L884 862 L920 887 L923 930 L891 886 L916 865 L867 887 L913 910 L867 923 L915 902 L957 879 L988 905 L1000 902 L1000 898 L977 931 L1000 980 L1000 966 L1000 924 L999 953 L1000 913 L954 913 L954 910 L1000 945 L954 963 L959 940 L992 902 L975 896 L929 881 L945 876"/></g><g class="tool-group"><rect x="575" y="20" width="30" height="30" class="tool-bg active"/><text x="590" y="40" text-anchor="middle" class="tool-button">🖌️</text></g><g class="tool-group"><rect x="615" y="20" width="30" height="30" class="tool-bg"/><text x="630" y="40" text-anchor="middle" class="tool-button">🧽</text></g><g class="tool-group"><rect x="655" y="20" width="30" height="30" class="tool-bg"/><text x="670" y="40" text-anchor="middle" class="tool-button">🪣</text></g><g class="action-group"><rect x="800" y="20" width="40" height="30" class="action-bg clear"/><text x="820" y="40" text-anchor="middle" class="button-text">💣</text><text x="820" y="65" text-anchor="middle" class="toolbar-text">Clear</text></g><g class="action-group"><rect x="860" y="20" width="40" height="30" class="action-bg save"/><text x="880" y="40" text-anchor="middle" class="button-text">💾</text><text x="880" y="65" text-anchor="middle" class="toolbar-text">Save</text></g><g class="action-group"><rect x="920" y="20" width="40" height="30" class="action-bg export"/><text x="940" y="40" text-anchor="middle" class="button-text">📁</text><text x="940" y="65" text-anchor="middle" class="toolbar-text">Export</text></g><text x="150" y="65" text-anchor="middle" class="toolbar-text">Colors</text><text x="350" y="65" text-anchor="middle" class="toolbar-text">Brush Size</text><text x="500" y="65" text-anchor="middle" class="toolbar-text">Shapes</text><text x="630" y="65" text-anchor="middle" class="toolbar-text">Tools</text><script type="text/javascript"><![CDATA[const CANVAS_X = 10;const CANVAS_Y = 90;const CANVAS_WIDTH = 980;const CANVAS_HEIGHT = 900;const drawingArea = document.getElementById('drawing-area');const canvas = document.querySelector('.canvas');const svg = document.querySelector('svg');let isDrawing = false;let currentColor = '#000000';let currentBrushSize = 8;let currentTool = 'brush';let currentShape = 'rect';let paths = [];let currentPath = null;let startPos = null;let currentShapeElement = null;let polylinePoints = [];let polylinePreview = null;const SVG_NS = 'http://www.w3.org/2000/svg';const XHTML_NS = 'http://www.w3.org/1999/xhtml';let svgRect = null;let svgWidth = 1000;let svgHeight = 1000;let displayWidth = 1000;let displayHeight = 1000;function updateCoordinateFactors() {svgRect = svg.getBoundingClientRect();svgWidth = svg.viewBox.baseVal.width;svgHeight = svg.viewBox.baseVal.height;displayWidth = svgRect.width;displayHeight = svgRect.height;}function calculatePosition(clientX, clientY) {if (!svgRect) updateCoordinateFactors();const x = clientX - svgRect.left;const y = clientY - svgRect.top;const rawX = (x * svgWidth) / displayWidth;const rawY = (y * svgHeight) / displayHeight;return {x: Math.round(rawX),y: Math.round(rawY)};}function getMousePos(evt) {return calculatePosition(evt.clientX, evt.clientY);}function getTouchPos(evt) {const touch = evt.touches[0];return calculatePosition(touch.clientX, touch.clientY);}function createSVGElement(tagName, attributes = {}) {const element = document.createElementNS(SVG_NS, tagName);Object.entries(attributes).forEach(([key, value]) => {element.setAttribute(key, value);});return element;}function setActiveElement(selector, activeElement) {document.querySelectorAll(selector).forEach(el => el.classList.remove('active'));if (activeElement) activeElement.classList.add('active');}const shapeConfigs = {rect: (pos) => ({fill: currentColor, x: pos.x, y: pos.y, width: 1, height: 1}),ellipse: (pos) => ({fill: currentColor, cx: pos.x, cy: pos.y, rx: 1, ry: 1}),line: (pos) => ({stroke: currentColor, 'stroke-width': currentBrushSize,x1: pos.x, y1: pos.y, x2: pos.x, y2: pos.y}),'polygon-3': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y} ${pos.x + 1},${pos.y + 1} ${pos.x - 1},${pos.y + 1}`}),'polygon-5': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.3} ${pos.x + 0.3},${pos.y + 0.5} ${pos.x - 0.3},${pos.y + 0.5} ${pos.x - 0.5},${pos.y - 0.3}`}),'polygon-6': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.25} ${pos.x + 0.5},${pos.y + 0.25} ${pos.x},${pos.y + 0.5} ${pos.x - 0.5},${pos.y + 0.25} ${pos.x - 0.5},${pos.y - 0.25}`})};function generatePolygonPoints(centerX, centerY, width, height, sides, offset = 0) {const points = [];for (let i = 0; i < sides; i++) {const angle = (i * 2 * Math.PI) / sides - Math.PI / 2 + offset;const x = Math.round(centerX + (width / 2) * Math.cos(angle));const y = Math.round(centerY + (height / 2) * Math.sin(angle));points.push(x, y);}return points.join(',');}function isWithinCanvas(pos) {return pos.x >= CANVAS_X && pos.x <= CANVAS_X + CANVAS_WIDTH &&pos.y >= CANVAS_Y && pos.y <= CANVAS_Y + CANVAS_HEIGHT;}document.querySelectorAll('.color-btn').forEach(btn => {btn.addEventListener('click', function() {setActiveElement('.color-btn', this);currentColor = this.getAttribute('fill');});});const brushSlider = document.getElementById('brush-slider-handle');const brushSliderTrack = document.getElementById('brush-slider-track');let isDraggingSlider = false;function updateBrushSizeFromSlider(x) {const trackRect = brushSliderTrack.getBoundingClientRect();const trackLeft = trackRect.left;const trackWidth = trackRect.width;let relativeX = x - trackLeft;relativeX = Math.max(0, Math.min(relativeX, trackWidth));const brushSize = Math.round(1 + (relativeX / trackWidth) * 39);const sliderX = 305 + (relativeX / trackWidth) * 110;brushSlider.setAttribute('cx', sliderX);currentBrushSize = brushSize;const handleRadius = Math.max(4, Math.min(20, brushSize * 0.5));brushSlider.setAttribute('r', handleRadius);}function startSliderDrag(evt) {finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.clientX);}function updateSliderDrag(evt) {if (isDraggingSlider) {updateBrushSizeFromSlider(evt.clientX);}}function stopSliderDrag() {isDraggingSlider = false;}brushSlider.addEventListener('mousedown', startSliderDrag);brushSliderTrack.addEventListener('mousedown', startSliderDrag);document.addEventListener('mousemove', updateSliderDrag);document.addEventListener('mouseup', stopSliderDrag);brushSlider.addEventListener('touchstart', function(evt) {evt.preventDefault();finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});brushSliderTrack.addEventListener('touchstart', function(evt) {evt.preventDefault();finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});document.addEventListener('touchmove', function(evt) {if (isDraggingSlider) {evt.preventDefault();updateBrushSizeFromSlider(evt.touches[0].clientX);}});document.addEventListener('touchend', stopSliderDrag);document.querySelectorAll('.tool-group').forEach((group, index) => {group.addEventListener('click', function() {setActiveElement('.tool-bg', this.querySelector('.tool-bg'));setActiveElement('.shape-group .tool-bg', null);const tools = ['brush', 'eraser', 'bucket'];currentTool = tools[index] || 'brush';});});document.querySelectorAll('.shape-group').forEach((group) => {group.addEventListener('click', function() {setActiveElement('.shape-group .tool-bg', this.querySelector('.tool-bg'));setActiveElement('.tool-group .tool-bg', null);const shapeType = this.querySelector('.tool-bg').getAttribute('data-shape');currentTool = 'shape';currentShape = shapeType;if (currentShape === 'polyline') {polylinePoints = [];}});});function saveDrawing(storageKey = "colourMeArt") {const drawingElements = Array.from(drawingArea.children).map(element => {const stroke = element.getAttribute('stroke') ? hexToBytes3(element.getAttribute('stroke')) : null;const fill = element.getAttribute('fill') !== '#none' ? hexToBytes3(element.getAttribute('fill')) : null;const color = stroke || fill || '0x000000';const object = {shape: getElementShape(element),color: color,stroke: parseInt(element.getAttribute('stroke-width') || '0'),points: extractPoints(element)};return object;});if (drawingElements.length > 0) {localStorage.setItem(storageKey, JSON.stringify(drawingElements));} else {localStorage.removeItem(storageKey);}return drawingElements.length > 0 ? drawingElements : null;}function getElementShape(element) {const tagName = element.tagName.toLowerCase();switch (tagName) {case 'rect': return 0;case 'line': return 1;case 'ellipse': return 2;case 'polyline': return 3;case 'polygon': return 4;case 'path': return 5;default: return 5;}}function hexToBytes3(hexColor) {return hexColor ? hexColor.replace('#', '0x') : null;}function extractPoints(element) {const tagName = element.tagName.toLowerCase();const points = [];switch (tagName) {case 'rect':const x = parseInt(element.getAttribute('x'));const y = parseInt(element.getAttribute('y'));const width = parseInt(element.getAttribute('width'));const height = parseInt(element.getAttribute('height'));points.push({ x: x, y: y });points.push({ x: width, y: height });break;case 'ellipse':const cx = parseInt(element.getAttribute('cx'));const cy = parseInt(element.getAttribute('cy'));const rx = parseInt(element.getAttribute('rx'));const ry = parseInt(element.getAttribute('ry'));points.push({ x: cx, y: cy });points.push({ x: rx, y: ry });break;case 'line':points.push({x: parseInt(element.getAttribute('x1')),y: parseInt(element.getAttribute('y1'))});points.push({x: parseInt(element.getAttribute('x2')),y: parseInt(element.getAttribute('y2'))});break;case 'polyline':const polylinePoints = extractPolylinePoints(element);points.push(...polylinePoints);break;case 'polygon':const polygonPoints = extractPolygonPoints(element);points.push(...polygonPoints);break;case 'path':const pathPoints = extractPathPoints(element);points.push(...pathPoints);break;}return points;}function extractPolylinePoints(element) {const points = [];const pointsAttr = element.getAttribute('points');const coords = pointsAttr.split(/[,\s]+/);for (let i = 0; i < coords.length; i += 2) {points.push({x: parseInt(coords[i]),y: parseInt(coords[i + 1])});}return points;}function extractPolygonPoints(element) {const points = [];const pointsAttr = element.getAttribute('points');const coords = pointsAttr.split(/[,\s]+/);for (let i = 0; i < coords.length; i += 2) {points.push({x: parseInt(coords[i]),y: parseInt(coords[i + 1])});}return points;}function extractPathPoints(element) {const points = [];const d = element.getAttribute('d');const commands = d.match(/[ML][\d.-]+\s+[\d.-]+/g) || [];commands.forEach(cmd => {const parts = cmd.trim().split(/\s+/);if (parts.length >= 2) {const command = parts[0].charAt(0);const x = parseInt(parts[0].substring(1));const y = parseInt(parts[1]);points.push({x: x,y: y});}});return points;}function loadDrawing() {const savedData = localStorage.getItem('colourMeArt');const tokenData = saveDrawing('tokenArt');if (savedData) {const contractObjects = JSON.parse(savedData);drawingArea.innerHTML = '';paths = [];contractObjects.forEach(obj => {const element = createElementFromContract(obj);if (element) {drawingArea.appendChild(element);paths.push(element);}});sendMessageToParent('LOAD_DATA', { artData: contractObjects });}}function createElementFromContract(obj) {const element = document.createElementNS(SVG_NS, getElementTag(obj.shape));switch (obj.shape) {case 0:const [pos, size] = obj.points;element.setAttribute('x', pos.x);element.setAttribute('y', pos.y);element.setAttribute('width', size.x);element.setAttribute('height', size.y);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 1:const [start, end] = obj.points;element.setAttribute('x1', start.x);element.setAttribute('y1', start.y);element.setAttribute('x2', end.x);element.setAttribute('y2', end.y);element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);break;case 2:const [center, radius] = obj.points;element.setAttribute('cx', center.x);element.setAttribute('cy', center.y);element.setAttribute('rx', radius.x);element.setAttribute('ry', radius.y);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 3:const polylinePointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');element.setAttribute('points', polylinePointsStr);element.setAttribute('fill', 'none');element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);break;case 4:const polygonPointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');element.setAttribute('points', polygonPointsStr);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 5:const pathData = obj.points.map((p, i) =>`${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`).join('');element.setAttribute('d', pathData);element.setAttribute('fill', 'none');element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);element.setAttribute('stroke-linecap', 'round');element.setAttribute('stroke-linejoin', 'round');break;}return element;}function getElementTag(shape) {const tags = ['rect', 'line', 'ellipse', 'polyline', 'polygon', 'path'];return tags[shape] || 'path';}function bytes3ToHex(bytes3) {const cleanHex = bytes3.replace('0x', '');return '#' + cleanHex;}function exportDrawing() {const contractObjects = saveDrawing();if (!contractObjects) return;const svgElements = contractObjects.map(obj => {const element = createElementFromContract(obj);return element.outerHTML;}).join('');const svgContent = `<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" viewBox="0 0 ${CANVAS_WIDTH} ${CANVAS_HEIGHT}"><rect width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" fill="white" />${svgElements}</svg>`;const dataUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgContent);const link = document.createElementNS(XHTML_NS, 'a');link.href = dataUrl;link.download = 'painting.svg';link.click();}document.querySelectorAll('.action-group').forEach((group, index) => {group.addEventListener('click', function() {const actions = [() => {drawingArea.innerHTML = '';paths = [];saveDrawing();sendMessageToParent('CLEAR_REQUEST');},() => {const tokenArtString = localStorage.getItem('tokenArt');const saveData = saveDrawing();if (saveData) {const saveArtString = JSON.stringify(saveData);if (tokenArtString !== saveArtString) {if (tokenArtString && saveArtString.startsWith(tokenArtString.slice(0, -1))) {const tokenElements = JSON.parse(tokenArtString);const appendElements = saveData.slice(tokenElements.length);sendMessageToParent('SAVE_REQUEST', { artData: appendElements, saveType: 'append' });} else {sendMessageToParent('SAVE_REQUEST', { artData: saveData, saveType: 'set' });}}}},() => exportDrawing()];if (actions[index]) actions[index]();});});function startDrawing(pos) {if (!isWithinCanvas(pos)) return;if (currentTool === 'bucket') {drawingArea.innerHTML = '';paths = [];const fillRect = createSVGElement('rect', {x: CANVAS_X, y: CANVAS_Y, width: CANVAS_WIDTH, height: CANVAS_HEIGHT, fill: currentColor});drawingArea.appendChild(fillRect);paths.push(fillRect);return;}if (currentTool === 'shape') {if (currentShape === 'polyline') {addPolylinePoint(pos);return;} else {startPos = pos;createShapeStart(pos);return;}}isDrawing = true;currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? 'white' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M${pos.x} ${pos.y} L${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);}function createShapeStart(pos) {isDrawing = true;const config = shapeConfigs[currentShape];if (config) {const shape = createSVGElement(currentShape === 'line' ? 'line' :currentShape.startsWith('polygon') ? 'polygon' : currentShape, config(pos));drawingArea.appendChild(shape);currentShapeElement = shape;}}function updateShape(pos) {if (!currentShapeElement || !startPos) return;switch (currentShape) {case 'rect':const rectX = Math.min(startPos.x, pos.x);const rectY = Math.min(startPos.y, pos.y);const rectWidth = Math.abs(pos.x - startPos.x);const rectHeight = Math.abs(pos.y - startPos.y);currentShapeElement.setAttribute('x', rectX);currentShapeElement.setAttribute('y', rectY);currentShapeElement.setAttribute('width', rectWidth);currentShapeElement.setAttribute('height', rectHeight);break;case 'ellipse':const ellipseCenterX = (startPos.x + pos.x) / 2;const ellipseCenterY = (startPos.y + pos.y) / 2;const radiusX = Math.abs(pos.x - startPos.x) / 2;const radiusY = Math.abs(pos.y - startPos.y) / 2;currentShapeElement.setAttribute('cx', ellipseCenterX);currentShapeElement.setAttribute('cy', ellipseCenterY);currentShapeElement.setAttribute('rx', radiusX);currentShapeElement.setAttribute('ry', radiusY);break;case 'line':currentShapeElement.setAttribute('x2', pos.x);currentShapeElement.setAttribute('y2', pos.y);break;case 'polygon-3':case 'polygon-5':case 'polygon-6':const sides = parseInt(currentShape.split('-')[1]);const centerX = (startPos.x + pos.x) / 2;const centerY = (startPos.y + pos.y) / 2;const width = Math.abs(pos.x - startPos.x);const height = Math.abs(pos.y - startPos.y);const offset = pos.y > startPos.y ? Math.PI : 0;const points = generatePolygonPoints(centerX, centerY, width, height, sides, offset);currentShapeElement.setAttribute('points', points);break;}}function addPolylinePoint(pos) {polylinePoints.push(pos.x, pos.y);if (polylinePoints.length >= 1000) {const lastX = polylinePoints[polylinePoints.length - 4];const lastY = polylinePoints[polylinePoints.length - 3];finalizeShape();polylinePoints = [lastX, lastY, pos.x, pos.y];currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {if (!currentShapeElement) {currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {currentShapeElement.setAttribute('points', polylinePoints.join(','));}}}function finalizeShape() {if (currentShapeElement) {paths.push(currentShapeElement);}if (polylinePreview) {polylinePreview.remove();polylinePreview = null;}if (currentShapeElement && currentShapeElement.tagName === 'polyline') {polylinePoints = [];currentShapeElement = null;}}function draw(pos) {if (!isDrawing) return;if (currentTool === 'shape' && currentShapeElement && startPos) {updateShape(pos);return;}if (!currentPath || !isWithinCanvas(pos)) return;const currentD = currentPath.getAttribute('d');const pathPoints = currentD.match(/[ML]\s*[\d.-]+\s+[\d.-]+/g) || [];const pointCount = pathPoints.length;if (pointCount >= 500) {const lastX = pathPoints[pathPoints.length - 1].split(' ')[1];const lastY = pathPoints[pathPoints.length - 1].split(' ')[2];currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? 'white' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M${lastX} ${lastY} L${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);} else {currentPath.setAttribute('d', currentD + `L${pos.x} ${pos.y}`);}}function stopDrawing() {if (currentTool === 'shape' && currentShapeElement && startPos) {finalizeShape();}isDrawing = false;currentPath = null;startPos = null;if (currentTool !== 'shape' || currentShape !== 'polyline') {currentShapeElement = null;}}let mouseMoveThrottle = null;canvas.addEventListener('mousedown', function(evt) {startDrawing(getMousePos(evt));});document.addEventListener('mousemove', function(evt) {if (isDrawing) {if (mouseMoveThrottle) return;mouseMoveThrottle = requestAnimationFrame(() => {draw(getMousePos(evt));mouseMoveThrottle = null;});}if (currentTool === 'shape' && currentShape === 'polyline' && polylinePoints.length > 0) {if (!polylinePreview) {polylinePreview = createSVGElement('line', {stroke: currentColor,'stroke-width': currentBrushSize,'stroke-dasharray': [currentBrushSize*2, currentBrushSize]});drawingArea.appendChild(polylinePreview);}const lastX = polylinePoints[polylinePoints.length - 2];const lastY = polylinePoints[polylinePoints.length - 1];const pos = getMousePos(evt);polylinePreview.setAttribute('x1', lastX);polylinePreview.setAttribute('y1', lastY);polylinePreview.setAttribute('x2', pos.x);polylinePreview.setAttribute('y2', pos.y);if (!isWithinCanvas(pos)) {polylinePreview.remove();polylinePreview = null;}}});document.addEventListener('mouseup', stopDrawing);canvas.addEventListener('touchstart', function(evt) {evt.preventDefault();startDrawing(getTouchPos(evt));}, { passive: false });canvas.addEventListener('touchmove', function(evt) {evt.preventDefault();draw(getTouchPos(evt));}, { passive: false });canvas.addEventListener('touchend', function(evt) {evt.preventDefault();stopDrawing();}, { passive: false });document.addEventListener('click', function(evt) {if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {const canvasRect = canvas.getBoundingClientRect();const clickX = evt.clientX;const clickY = evt.clientY;if (clickX < canvasRect.left || clickX > canvasRect.right ||clickY < canvasRect.top || clickY > canvasRect.bottom) {finalizeShape();currentShapeElement = null;polylinePoints = [];}}});document.addEventListener('touchend', function(evt) {if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {const canvasRect = canvas.getBoundingClientRect();const touch = evt.changedTouches[0];const touchX = touch.clientX;const touchY = touch.clientY;if (touchX < canvasRect.left || touchX > canvasRect.right ||touchY < canvasRect.top || touchY > canvasRect.bottom) {finalizeShape();currentShapeElement = null;polylinePoints = [];}}});canvas.addEventListener('contextmenu', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {finalizeShape();currentShapeElement = null;polylinePoints = [];}});canvas.addEventListener('dblclick', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {finalizeShape();currentShapeElement = null;polylinePoints = [];}});function sendMessageToParent(type, data = {}) {if (window.parent && window.parent !== window) {window.parent.postMessage({ type, data }, '*');}}window.addEventListener('message', function(event) {const { type, success, message } = event.data;if (type === 'SAVE_RESPONSE') {if (success) {}saveDrawing();}});window.addEventListener('load', function() {updateCoordinateFactors();loadDrawing();const initialBrushSize = currentBrushSize;const sliderX = 305 + ((initialBrushSize - 1) / 39) * 110;brushSlider.setAttribute('cx', sliderX);const initialHandleRadius = Math.max(4, Math.min(20, initialBrushSize * 0.5));brushSlider.setAttribute('r', initialHandleRadius);});]]></script></svg>
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewBox="0 0 1000 1000">
  <defs>
    <style>
      .toolbar {fill: #f0f0f0; stroke: #ccc; stroke-width: 1;}
      .canvas {fill: white; stroke: #ccc; stroke-width: 1;}
      #drawing-area {pointer-events: none;}
      text {font-family: Arial, sans-serif; font-size: 14px; fill: #333;}
      .toolbar-text { 
        font-size: 12px; 
        user-select: none; 
        -webkit-user-select: none; 
        -moz-user-select: none; 
        -ms-user-select: none; 
      }
      .button-text { 
        font-size: 20px; 
        fill: white; 
        pointer-events: none; 
        user-select: none; 
        -webkit-user-select: none; 
        -moz-user-select: none; 
        -ms-user-select: none; 
      }
      .color-btn, .brush-size, .tool-bg, .action-bg {cursor: pointer;}
      .color-btn {stroke: #333; stroke-width: 2;}
      .color-btn:hover {stroke: #777; stroke-width: 3;}
      .color-btn.active {stroke: #000; stroke-width: 3;}
      .brush-size {fill: #ddd; stroke: #999; stroke-width: 1;}
      .brush-size:hover {fill: #ccc; stroke: #777;}
      .brush-size.active {fill: #4CAF50; stroke: #45a049;}
      .brush-size.active:hover {fill: #45a049; stroke: #3d8b40;}
      .tool-button { 
        font-size: 20px; 
        fill: #666; 
        transition: fill 0.2s; 
        user-select: none; 
        -webkit-user-select: none; 
        -moz-user-select: none; 
        -ms-user-select: none; 
      }
      .tool-button:hover {fill: #333;}
      .tool-button.active {fill: #333;}
      .tool-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}
      .tool-bg:hover {fill: #e0e0e0; stroke: #999;}
      .tool-bg.active {fill: #333; stroke: #333;}
      .tool-bg.active:hover {fill: #444; stroke: #444;}
      .tool-group {cursor: pointer;}
      .tool-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}
      .tool-group:hover .tool-bg.active {fill: #444; stroke: #444;}
      .shape-group {cursor: pointer;}
      .shape-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}
      .shape-group:hover .tool-bg.active {fill: #444; stroke: #444;}
      .shape-group .tool-bg.active ~ .shape-icon {stroke: white !important;}
      .action-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}
      .action-bg:hover {fill: #e0e0e0; stroke: #999;}
      .action-bg.clear {fill: #ffebee; stroke: #ffcdd2;}
      .action-bg.clear:hover {fill: #ffcdd2; stroke: #ef9a9a;}
      .action-bg.save {fill: #e8f5e8; stroke: #c8e6c9;}
      .action-bg.save:hover {fill: #c8e6c9; stroke: #a5d6a7;}
      .action-bg.export {fill: #e3f2fd; stroke: #bbdefb;}
      .action-bg.export:hover {fill: #bbdefb; stroke: #90caf9;}
    </style>
    <rect id="canvas-bg" x="10" y="90" width="980" height="900" rx="5"/>
    <clipPath id="canvas-clip">
      <use href="#canvas-bg"/>
    </clipPath>
    <g id="shape-0" class="shape-group">
      <rect data-shape="rect" x="0" y="0" width="30" height="30" class="tool-bg"/>
      <rect x="5" y="7.5" width="20" height="15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
    </g>
    <g id="shape-1" class="shape-group">
      <rect data-shape="ellipse" x="0" y="0" width="30" height="30" class="tool-bg"/>
      <ellipse cx="15" cy="15" rx="8" ry="8" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
    </g>
    <g id="shape-2" class="shape-group">
      <rect data-shape="line" x="0" y="0" width="30" height="30" class="tool-bg"/>
      <line x1="5" y1="10" x2="25" y2="20" stroke="#333" stroke-width="2" class="shape-icon"/>
    </g>
    <g id="shape-3" class="shape-group">
      <rect data-shape="polyline" x="0" y="0" width="30" height="30" class="tool-bg"/>
      <polyline points="5,15 12.5,10 17.5,20 25,15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
    </g>
    <g id="polygon-3" class="shape-group">
      <rect data-shape="polygon-3" x="0" y="0" width="30" height="30" class="tool-bg"/>
      <polygon points="15,7 25,23 5,23" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
    </g>
    <g id="polygon-5" class="shape-group">
      <rect data-shape="polygon-5" x="0" y="0" width="30" height="30" class="tool-bg"/>
      <polygon points="15,5 25,12 20,22.5 10,22.5 5,12" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
    </g>
    <g id="polygon-6" class="shape-group">
      <rect data-shape="polygon-6" x="0" y="0" width="30" height="30" class="tool-bg"/>
      <polygon points="10,6 20,6 25,15 20,24 10,24 5,15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
    </g>
  </defs>
  
  <!-- Background -->
  <rect width="1000" height="1000" fill="#e8e8e8"/>

  <!-- Canvas -->
  <use href="#canvas-bg" class="canvas"/>
  
  <!-- Toolbar -->
  <rect x="10" y="10" width="980" height="70" class="toolbar" rx="5"/>

  <!-- Brush size controls -->
  <circle cx="320" cy="35" r="5" class="brush-size active" data-size="8"/>
  <circle cx="338" cy="35" r="8" class="brush-size" data-size="15"/>
  <circle cx="363" cy="35" r="12" class="brush-size" data-size="25"/>
  <circle cx="398" cy="35" r="18" class="brush-size" data-size="40"/>
  
  <!-- Color palette -->
  <circle cx="50" cy="35" r="15" class="color-btn active" fill="#000000"/><circle cx="90" cy="35" r="15" class="color-btn" fill="#19c10f"/><circle cx="130" cy="35" r="15" class="color-btn" fill="#8cb291"/><circle cx="170" cy="35" r="15" class="color-btn" fill="#baa878"/><circle cx="210" cy="35" r="15" class="color-btn" fill="#e6cf35"/><circle cx="250" cy="35" r="15" class="color-btn" fill="#75af15"/><use href="#shape-2" x="445" y="20" class="shape-btn"/><use href="#shape-1" x="485" y="20" class="shape-btn"/><use href="#polygon-5" x="525" y="20" class="shape-btn"/><g id="drawing-area" clip-path="url(#canvas-clip)"><path stroke-linecap="round" stroke-linejoin="round" stroke="#000000" stroke-width="15" d="M489 362 L538 384 L531 383 L484 355 L530 325 L559 350 L547 380 L561 331 L571 321 L537 283 L567 241 L520 272 L566 276 L581 250 L538 296 L516 304 L545 310 L552 323 L515 309 L553 348 L601 323 L602 304 L583 255 L584 249 L575 207 L560 202 L580 200 L588 184 L636 173 L652 168 L632 172 L617 210 L600 210 L551 233 L532 283 L560 318 L583 340 L599 295 L633 245 L593 242 L613 272 L658 233 L620 263 L638 254 L672 209 L626 214 L668 240 L662 202 L640 208 L685 169 L718 201 L712 219 L715 210 L729 223 L698 207 L678 190 L647 185 L604 229 L616 260 L607 278 L638 322 L595 333 L567 358 L569 319 L606 303 L579 295 L621 283 L588 324 L593 294 L560 257 L610 267 L602 284 L600 249 L565 238 L601 243 L577 286 L589 245 L598 287 L612 336 L651 308 L619 310 L602 281 L613 263 L570 273 L569 318 L562 322 L577 320 L537 319 L556 348 L530 334 L483 342 L533 337 L537 303 L496 289 L465 299 L458 287 L501 291 L515 277 L511 319 L558 353 L575 371 L617 326 L643 323 L668 286 L687 290 L661 328 L673 302 L658 261 L658 277 L618 315 L641 365 L660 385 L687 360 L664 395 L646 439 L631 486 L610 507 L579 461 L551 428 L542 387 L495 375 L532 344 L498 353 L534 315 L511 333 L541 361 L555 351 L515 318 L563 345 L606 388 L630 351 L656 361 L699 366 L686 322 L660 281 L656 291 L629 263 L633 298 L677 280 L688 272 L729 257 L712 278 L669 307 L658 314 L677 297 L635 334 L622 349 L572 394 L612 443 L662 476 L642 463 L639 486 L667 524 L620 539 L578 573 L601 597 L581 609 L538 619 L544 591 L587 637 L627 598 L584 557 L601 528 L642 564 L626 593 L627 605 L646 587 L684 565 L651 532 L652 517 L686 566 L678 542 L630 586 L661 553 L646 516 L674 566 L631 605 L619 593 L637 618 L615 593 L610 550 L607 525 L601 493 L560 443 L604 476 L617 514 L590 486 L607 440 L574 459 L595 502 L564 552 L611 597 L605 646 L605 626 L588 621 L545 636 L585 658 L550 629 L579 624 L605 609 L612 585 L574 542 L614 520 L611 483 L562 505 L608 496 L623 458 L620 508 L570 473 L603 460 L636 486 L597 462 L617 451 L664 419 L617 388 L647 344 L649 372 L670 386 L711 419 L747 463 L729 434 L768 433 L735 457 L711 421 L689 391 L682 363 L718 324 L668 359 L642 342 L690 298 L699 325 L681 329 L694 357 L711 389 L727 374 L726 327 L682 374 L667 404 L695 355 L691 310 L702 320 L738 319 L764 319 L801 340 L753 354 L707 321 L696 291 L662 241 L622 229 L621 266 L611 303 L609 348 L609 341 L560 361 L566 330 L577 283 L536 289 L498 306 L458 285 L453 242 L488 251 L467 246 L441 206 L481 240 L477 190 L507 220 L513 255 L474 270 L438 275 L445 304 L469 292 L485 281 L478 280 L444 308 L477 298 L476 249 L524 252 L543 211 L516 243 L517 276 L506 264 L524 242 L541 214 L500 227 L490 252 L513 227 L494 217 L476 170 L494 164 L474 177 L444 166 L405 209 L455 206 L482 237 L507 207 L510 244 L519 282 L476 270 L463 310 L441 317 L394 280 L403 289 L396 292 L402 310 L437 266 L487 255 L443 216 L472 216 L519 219 L556 231 L600 246 L575 196 L586 193 L537 199 L499 155 L530 129 L575 179 L573 226 L527 209 L483 180 L439 222 L405 183 L423 226 L404 218 L393 189 L379 195 L363 196 L318 176 L320 199 L337 217 L372 169 L336 218 L320 237 L316 239 L285 228 L252 270 L222 250 L199 253 L216 245 L242 270 L265 309 L224 302 L200 328 L198 340 L163 324 L180 363 L143 328 L160 321 L148 343 L143 345 L135 392 L95 410 L78 447 L115 481 L165 520 L146 543 L112 518 L103 544 L64 551 L29 508 L11 503 L1 533 L46 502 L36 479 L73 478 L70 468 L29 461 L53 507 L50 495 L96 522 L78 554 L33 528 L77 571 L120 582 L101 565 L61 577 L104 623 L121 584 L86 586 L136 579 L103 609 L84 629 L133 600 L167 587 L170 625 L199 635 L227 654 L196 693 L207 726 L175 684 L184 636 L141 636 L188 604 L237 570 L191 558 L195 579 L155 578 L194 628 L211 636 L191 678 L187 647 L202 607 L174 612 L221 600 L267 555 L307 561 L333 576 L286 531 L251 509 L267 486 L309 489 L259 449 L232 441 L279 438 L310 426 L326 376 L337 397 L357 352 L318 306 L346 272 L360 274 L339 239 L386 196 L427 155 L474 169 L477 133 L478 83 L480 73 L471 47 L459 88 L470 48 L443 16 L406 1 L441 36 L423 63 L389 49 L437 86 L422 62 L458 28 L422 42 L419 12 L391 1 L437 14 L399 1 L420 1 L437 1 L399 1 L429 1 L474 24 L495 7 L472 1 L453 7 L441 9 L467 1 L450 18 L491 54 L456 73 L452 56 L441 62 L442 41 L452 90 L474 131 L500 112 L523 122 L483 121 L506 156 L506 175 L477 193 L485 211 L480 165 L473 163 L480 213 L478 239 L486 239 L464 216 L501 205 L535 171 L489 176 L537 204 L530 208 L516 246 L527 218 L481 237 L485 280 L443 329 L450 290 L487 254 L494 300 L539 263 L527 219 L540 212 L552 189 L590 234 L558 198 L525 150 L484 196 L475 146 L519 191 L527 234 L573 265 L587 262 L600 247 L614 221 L571 214 L540 248 L533 202 L543 172 L515 126 L525 129 L484 169 L534 182 L503 200 L467 162 L485 143 L530 126 L486 91 L505 47 L536 67 L523 35 L500 29 L461 27 L497 63 L449 21 L454 46 L423 95 L376 145 L414 153 L449 129 L448 137 L447 128 L474 141 L441 169 L445 179 L487 164 L449 132 L483 96 L504 64 L511 108 L525 100 L493 77 L453 73 L457 47 L429 57 L404 11 L369 58 L339 8 L345 45 L361 73 L391 44 L397 55 L443 95 L479 87 L508 47 L539 51 L532 14 L519 57 L485 60 L521 77 L526 111 L501 91 L480 49 L431 10 L427 1 L474 9 L523 17 L509 1 L475 1 L521 1 L544 1 L520 1 L502 2 L452 1 L488 1 L439 43 L461 1 L510 9 L488 6 L479 1 L457 17 L448 20 L486 12 L445 1 L412 1 L406 10 L429 52 L390 59 L407 36 L442 67 L404 44 L433 70 L482 93 L514 65 L492 75 L450 78 L436 92 L429 88 L421 76 L422 51 L428 17 L431 1 L450 45 L498 55 L514 87 L545 92 L590 69 L605 103 L598 97 L626 92 L637 55 L685 102 L635 127 L666 107 L680 72 L680 113 L659 91 L709 131 L680 150 L680 194 L717 232 L687 253 L708 263 L675 250 L706 212 L693 245 L702 256 L693 256 L726 242 L736 276 L733 251 L774 229 L730 267 L762 272 L718 255 L685 283 L652 271 L630 308 L670 310 L678 264 L702 271 L665 234 L666 184 L700 168 L743 151 L777 107 L768 81 L798 122 L779 83 L747 97 L794 128 L801 84 L833 68 L800 37 L799 49 L780 99 L817 90 L779 42 L788 14 L750 2 L785 43 L825 26 L833 2 L790 29 L810 1 L842 1 L811 18 L856 33 L878 41 L842 87 L801 97 L798 89 L759 124 L744 148 L760 114 L717 103 L710 64 L671 81 L702 47 L680 85 L680 76 L722 41 L768 1 L728 6 L686 1 L699 51"/><path stroke-linecap="round" stroke-linejoin="round" stroke="#ffffff" stroke-width="15" d="M700 464 L659 505 L632 517 L587 474 L548 449 L509 451 L469 420 L472 386 L516 410 L472 376 L491 390 L492 419 L470 469 L444 471 L464 487 L486 504 L498 459 L506 440 L521 439 L476 444 L433 441 L437 393 L432 400 L429 444 L424 422 L451 454 L407 408 L358 400 L326 429 L296 446 L329 413 L281 444 L314 420 L362 455 L332 481 L309 486 L291 514 L246 501 L237 480 L275 491 L232 481 L226 442 L235 427 L228 468 L275 454 L265 433 L299 483 L332 444 L309 454 L331 499 L307 454 L346 437 L347 436 L319 425 L298 414 L294 381 L255 400 L206 433 L242 474 L259 492 L255 492 L263 461 L271 412 L292 393 L289 441 L258 450 L273 492 L270 451 L261 426 L270 405 L232 413 L184 425 L151 426 L139 447 L127 447 L142 449 L159 472 L196 522 L156 565 L205 554 L249 540 L281 579 L326 560 L329 540 L352 516 L359 566 L395 583 L394 589 L432 625 L462 595 L428 618 L477 616 L438 630 L422 639 L454 684 L451 688 L495 736 L474 706 L428 718 L425 693 L451 739 L455 741 L444 788 L436 770 L484 804 L466 763 L427 745 L468 714 L457 672 L496 665 L529 664 L484 702 L454 716 L426 670 L443 697 L410 696 L379 717 L391 719 L368 727 L371 746 L386 725 L423 727 L407 758 L401 734 L364 729 L358 739 L363 777 L399 732 L395 771 L434 750 L391 767 L415 720 L402 741 L372 765 L399 750 L378 733 L374 730 L377 707 L412 660 L417 636 L446 600 L432 636 L442 641 L470 610 L464 619 L453 630 L445 629 L409 662 L421 666 L428 622 L384 608 L343 579 L341 601 L359 615 L324 610 L330 566 L356 525 L337 488 L317 495 L339 530 L344 489 L337 497 L387 463 L387 433 L406 483 L401 499 L381 488 L383 466 L337 432 L331 463 L336 494 L304 448 L281 485 L241 479 L284 524 L247 537 L256 524 L257 481 L217 469 L260 429 L213 413 L220 410 L252 409 L282 380 L272 346 L307 357 L265 373 L273 362 L230 400 L210 374 L185 401 L199 433 L154 446 L140 447 L120 417 L94 379 L55 338 L27 388 L25 371 L7 406 L1 397 L41 398 L49 370 L85 398 L43 434 L69 430 L20 449 L1 422 L5 402 L38 385 L77 401 L27 363 L1 317 L1 287 L1 287 L18 246 L1 245 L32 195 L1 192 L31 203 L53 215 L74 253 L105 276 L72 237 L62 260 L107 265 L74 271 L104 314 L89 359 L69 377 L91 351 L54 380 L103 377 L121 404 L159 437 L193 436 L167 445 L149 402 L140 428 L152 476 L126 427 L144 471 L137 452 L109 422 L121 418 L116 373 L166 412 L141 397 L110 369 L132 362 L137 358 L116 360 L127 327 L135 330 L169 339 L198 341 L217 310 L213 278 L247 302 L208 343 L238 316 L209 342 L248 299 L253 310 L286 271 L277 240 L247 252 L274 292 L274 321 L302 278 L299 306 L250 345 L233 358 L214 366 L201 328 L187 295 L140 251 L136 299 L100 346 L112 296 L141 318 L159 338 L157 308 L178 353 L193 339 L161 307 L165 270 L177 276 L186 269 L188 231 L232 245 L227 290 L274 288 L230 298 L230 255 L268 266 L226 235 L205 258 L232 294 L244 267 L269 219 L255 175 L269 140 L255 126 L292 156 L281 106 L314 148 L335 153 L291 191 L336 235 L369 204 L340 254 L372 274 L396 263 L422 267 L430 228 L455 199 L424 226 L474 187 L519 229 L552 275 L528 310 L529 305 L577 295 L601 257 L606 253 L575 275 L570 302 L577 335 L618 384 L664 342 L671 380 L662 411 L702 384 L652 359 L670 371 L634 385 L618 409 L597 388 L558 382 L606 377 L569 338 L568 351 L610 360 L635 320 L647 354 L695 400 L656 422 L615 434 L575 414 L573 402 L547 399 L584 383 L599 334 L631 374 L594 353 L604 328 L616 348 L581 376 L623 360 L624 379 L663 417 L700 398 L657 350 L691 354 L730 392 L754 347 L746 374 L715 378 L739 356 L750 318 L775 356 L805 366 L784 399 L735 379 L687 379 L706 334 L692 369 L722 397 L684 394 L692 427 L654 380 L664 342 L621 378 L666 411 L667 362 L630 363 L627 359 L651 321 L655 368 L629 369 L677 367 L646 398 L691 375 L708 330 L750 336 L749 328 L746 342 L771 382 L808 332 L851 282 L868 278 L863 247 L831 295 L872 247 L885 259 L912 280 L958 291 L980 332 L980 292 L952 316 L938 329 L968 290 L980 272 L947 275 L910 265 L867 256 L860 297 L832 310 L850 304 L813 271 L834 255 L812 261 L822 281 L855 267 L893 296 L924 329 L942 364 L966 321 L945 277 L969 263 L980 282 L980 260 L980 297 L971 275 L969 318 L980 276 L980 226 L980 197 L959 167 L973 214 L970 186 L953 179 L980 191 L948 219 L980 239 L973 249 L980 264 L980 232 L980 245 L980 245 L980 197 L973 189 L980 217 L934 261 L963 230 L966 205 L980 170 L962 142 L957 145 L963 127 L980 136 L980 100 L932 76 L924 61 L952 105 L939 141 L892 179 L886 131 L925 113 L905 111 L855 159 L812 203 L852 222 L852 195 L823 162 L776 135 L761 156 L723 150 L743 198 L698 244 L658 282 L630 273 L618 249 L574 210 L540 174 L500 211 L461 216 L481 233 L457 210 L500 255 L540 221 L568 271 L589 287 L628 261 L642 310 L643 355 L625 390 L652 435 L646 415 L601 430 L555 456 L555 410 L554 373 L509 354 L505 372 L509 344 L461 295 L470 281 L457 283 L440 323 L390 285 L423 319 L379 342 L413 367 L380 405 L425 444 L454 411 L477 422 L517 403 L520 366 L507 394 L548 388 L593 404 L550 429 L512 408 L465 401 L443 396 L409 358 L425 318 L453 301 L435 287 L428 290 L430 329 L462 348 L414 301 L382 339 L397 352 L421 382 L464 368 L498 331 L451 307 L458 295 L463 278 L501 293 L461 244 L465 257 L461 259 L511 212 L558 239 L546 288 L507 293 L489 260 L441 251 L472 222 L468 208 L497 242 L536 222 L578 268 L600 293 L559 282 L596 246 L619 226 L598 207 L629 215 L631 195 L635 232 L651 188 L701 162 L655 170 L660 192 L697 213 L675 193 L670 233 L718 196 L671 178 L648 180 L645 208 L627 244 L579 267 L579 268 L572 262 L566 268 L519 305 L485 298 L534 248 L491 229 L509 226 L559 232 L577 203 L531 154 L503 183 L465 211 L506 194 L457 204 L469 163 L436 159 L386 194 L357 207 L351 194 L328 160 L298 145 L288 163 L319 152 L272 185 L312 175 L342 223 L306 269 L261 246 L258 201 L245 168 L294 142 L343 165 L317 169 L331 203 L349 231 L374 188 L381 180 L359 227 L360 205 L312 236 L273 285 L318 246 L322 227 L324 236 L352 218 L342 206 L342 194 L373 195 L375 226 L351 209 L391 213 L368 186 L386 200 L345 182 L309 224 L322 184 L366 190 L347 204 L330 225 L319 273 L269 234 L290 190 L298 182 L325 209 L342 200 L359 238 L335 264 L299 289 L299 321 L325 343 L342 356 L357 334 L402 311 L439 348 L393 324 L372 340 L335 341 L357 353 L402 345 L356 384 L405 366 L436 369 L476 344 L468 297 L499 283 L501 293 L551 298 L501 327 L544 299 L526 258 L509 247 L533 297 L548 329 L591 319 L603 272 L565 295 L604 320 L565 356 L589 309 L631 271 L605 314 L628 267 L660 223 L701 185 L738 157 L749 173 L759 131 L751 124 L725 92 L765 47 L804 74 L809 61 L844 43 L858 14 L812 1 L800 1 L842 34 L822 73 L788 114 L833 81 L876 105 L849 103 L894 151 L851 160 L870 142 L855 142 L814 119 L774 103 L740 132 L707 126 L660 117 L656 134 L655 87 L689 40 L708 48 L660 33 L674 1 L665 1 L650 1 L655 1 L681 1 L706 18 L659 63 L623 68 L621 62 L623 12 L642 49 L676 10 L635 55 L663 102 L664 80 L653 44 L635 26 L588 1 L582 3 L543 1 L526 10 L556 1 L517 1 L480 11 L448 16 L438 45 L435 61 L436 104 L468 70 L481 88 L517 66 L488 110 L483 152 L458 150 L423 127 L386 143 L398 156 L413 140 L437 116 L454 126 L450 97 L446 56 L423 64 L462 80 L428 69 L463 36 L494 69 L487 41 L484 9 L482 14 L462 1 L445 1 L403 1 L447 2 L431 43 L400 6 L444 37 L475 85 L494 88 L497 114 L518 100 L509 113 L518 118 L541 146 L557 184 L569 223 L617 261 L610 295 L586 319 L549 335 L500 291 L479 297 L508 262 L458 262 L471 255 L495 296 L489 313 L466 308 L428 358 L453 370 L454 410 L408 365 L400 318 L369 360 L327 345 L318 382 L276 426 L231 398 L239 403 L202 395 L240 388 L240 342 L271 368 L241 321 L209 289 L240 276 L200 229 L213 181 L191 229 L167 200 L196 150 L168 135 L139 171 L146 199 L174 209 L180 208 L206 214 L207 231 L190 197 L147 187 L146 229 L124 187 L74 150 L59 127 L77 128 L77 163 L38 154 L65 135 L26 119 L39 69 L51 54 L86 104 L53 69 L55 73 L30 85 L18 50 L1 100 L1 56 L1 41 L1 17 L1 22 L1 1 L1 1 L1 22 L1 1 L1 1 L1 1 L1 1 L15 32 L21 72 L1 47 L1 60 L1 63 L42 30 L85 1 L35 43 L35 85 L1 124 L1 151 L1 162 L17 197 L40 215 L76 247 L60 283"/></g>  <!-- Tool buttons -->
  <g class="tool-group">
    <rect x="650" y="20" width="30" height="30" class="tool-bg active"/>
    <text x="665" y="40" text-anchor="middle" class="tool-button">🖌️</text>
  </g>
  
  <g class="tool-group">
    <rect x="690" y="20" width="30" height="30" class="tool-bg"/>
    <text x="705" y="40" text-anchor="middle" class="tool-button">🧽</text>
  </g>
  
  <g class="tool-group">
    <rect x="730" y="20" width="30" height="30" class="tool-bg"/>
    <text x="745" y="40" text-anchor="middle" class="tool-button">🪣</text>
  </g>
  
  <!-- Action buttons -->
  <g class="action-group">
    <rect x="800" y="20" width="40" height="30" class="action-bg clear"/>
    <text x="820" y="40" text-anchor="middle" class="button-text">💣</text>
    <text x="820" y="65" text-anchor="middle" class="toolbar-text">Clear</text>
  </g>
  
  <g class="action-group">
    <rect x="860" y="20" width="40" height="30" class="action-bg save"/>
    <text x="880" y="40" text-anchor="middle" class="button-text">💾</text>
    <text x="880" y="65" text-anchor="middle" class="toolbar-text">Save</text>
  </g>
  
  <g class="action-group">
    <rect x="920" y="20" width="40" height="30" class="action-bg export"/>
    <text x="940" y="40" text-anchor="middle" class="button-text">📁</text>
    <text x="940" y="65" text-anchor="middle" class="toolbar-text">Export</text>
  </g>
  
  <!-- Labels -->
  <text x="150" y="65" text-anchor="middle" class="toolbar-text">Colors</text>
  <text x="350" y="65" text-anchor="middle" class="toolbar-text">Brush Size</text>
  <text x="500" y="65" text-anchor="middle" class="toolbar-text">Shapes</text>
  <text x="700" y="65" text-anchor="middle" class="toolbar-text">Tools</text>

  <script type="text/javascript">
    <![CDATA[
      // Canvas constants
      const CANVAS_X = 10;
      const CANVAS_Y = 90;
      const CANVAS_WIDTH = 980;
      const CANVAS_HEIGHT = 900;
      // Cached DOM elements for better performance
      const drawingArea = document.getElementById('drawing-area');
      const canvas = document.querySelector('.canvas');
      const svg = document.querySelector('svg');
      // Painting app functionality
      let isDrawing = false;
      let currentColor = '#000000';
      let currentBrushSize = 8;
      let currentTool = 'brush'; // 'brush', 'eraser', 'bucket', 'shape'
      let currentShape = 'rect'; // 'rect', 'ellipse', 'polygon', 'line', 'polyline'
      let paths = [];
      let currentPath = null;
      let startPos = null;
      let currentShapeElement = null;
      let polylinePoints = [];
      let polygonPoints = [];
      let polylinePreview = null;
      // Cached SVG namespace for better performance
      const SVG_NS = 'http://www.w3.org/2000/svg';
      const XHTML_NS = 'http://www.w3.org/1999/xhtml';
      // Cached coordinate conversion factors
      let svgRect = null;
      let svgWidth = 1000;
      let svgHeight = 1000;
      let displayWidth = 1000;
      let displayHeight = 1000;
      // Update coordinate conversion factors
      function updateCoordinateFactors() {
        svgRect = svg.getBoundingClientRect();
        svgWidth = svg.viewBox.baseVal.width;
        svgHeight = svg.viewBox.baseVal.height;
        displayWidth = svgRect.width;
        displayHeight = svgRect.height;
      }
      // Optimized position calculation function
      function calculatePosition(clientX, clientY) {
        if (!svgRect) updateCoordinateFactors();
        const x = clientX - svgRect.left;
        const y = clientY - svgRect.top;
        const rawX = (x * svgWidth) / displayWidth;
        const rawY = (y * svgHeight) / displayHeight;
        return {
          x: Math.round(rawX * 10) / 10,
          y: Math.round(rawY * 10) / 10
        };
      }
      // Unified position getter for mouse and touch
      function getMousePos(evt) {
        return calculatePosition(evt.clientX, evt.clientY);
      }
      function getTouchPos(evt) {
        const touch = evt.touches[0];
        return calculatePosition(touch.clientX, touch.clientY);
      }
      // Optimized element creation with batch attribute setting
      function createSVGElement(tagName, attributes = {}) {
        const element = document.createElementNS(SVG_NS, tagName);
        Object.entries(attributes).forEach(([key, value]) => {
          element.setAttribute(key, value);
        });
        return element;
      }
      // Optimized class manipulation
      function setActiveElement(selector, activeElement) {
        document.querySelectorAll(selector).forEach(el => el.classList.remove('active'));
        if (activeElement) activeElement.classList.add('active');
      }
      // Optimized shape creation with predefined attributes
      const shapeConfigs = {
        rect: (pos) => ({
          fill: currentColor, x: pos.x, y: pos.y, width: 1, height: 1
        }),
        ellipse: (pos) => ({
          fill: currentColor, cx: pos.x, cy: pos.y, rx: 1, ry: 1
        }),
        line: (pos) => ({
          stroke: currentColor, 'stroke-width': currentBrushSize, 
          x1: pos.x, y1: pos.y, x2: pos.x, y2: pos.y
        }),
        'polygon-3': (pos) => ({
          fill: currentColor,
          points: `${pos.x},${pos.y} ${pos.x + 1},${pos.y + 1} ${pos.x - 1},${pos.y + 1}`
        }),
        'polygon-5': (pos) => ({
          fill: currentColor,
          points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.3} ${pos.x + 0.3},${pos.y + 0.5} ${pos.x - 0.3},${pos.y + 0.5} ${pos.x - 0.5},${pos.y - 0.3}`
        }),
        'polygon-6': (pos) => ({
          fill: currentColor,
          points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.25} ${pos.x + 0.5},${pos.y + 0.25} ${pos.x},${pos.y + 0.5} ${pos.x - 0.5},${pos.y + 0.25} ${pos.x - 0.5},${pos.y - 0.25}`
        })
      };
      // Optimized polygon point generation
      function generatePolygonPoints(centerX, centerY, width, height, sides, offset = 0) {
        const points = [];
        for (let i = 0; i < sides; i++) {
          const angle = (i * 2 * Math.PI) / sides - Math.PI / 2 + offset;
          const x = Math.round((centerX + (width / 2) * Math.cos(angle)) * 100) / 100;
          const y = Math.round((centerY + (height / 2) * Math.sin(angle)) * 100) / 100;
          points.push(x, y);
        }
        return points.join(',');
      }
      // Optimized boundary checking
      function isWithinCanvas(pos) {
        return pos.x >= CANVAS_X && pos.x <= CANVAS_X + CANVAS_WIDTH && 
               pos.y >= CANVAS_Y && pos.y <= CANVAS_Y + CANVAS_HEIGHT;
      }
      // Color selection with optimized event handling
      document.querySelectorAll('.color-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          if (currentTool === 'shape' && currentShape !== 'polyline') finalizeShape();
          setActiveElement('.color-btn', this);
          currentColor = this.getAttribute('fill');
        });
      });
      // Brush size selection
      document.querySelectorAll('.brush-size').forEach(btn => {
        btn.addEventListener('click', function() {
          if (currentTool === 'shape' && currentShape !== 'polyline') finalizeShape();
          setActiveElement('.brush-size', this);
          currentBrushSize = parseInt(this.getAttribute('data-size'));
        });
      });
      // Tool selection with optimized class management
      document.querySelectorAll('.tool-group').forEach((group, index) => {
        group.addEventListener('click', function() {
          if (currentTool === 'shape') finalizeShape();
          
          setActiveElement('.tool-bg', this.querySelector('.tool-bg'));
          setActiveElement('.shape-group .tool-bg', null);
          
          const tools = ['brush', 'eraser', 'bucket'];
          currentTool = tools[index] || 'brush';
        });
      });
      // Shape selection
      document.querySelectorAll('.shape-group').forEach((group) => {
        group.addEventListener('click', function() {
          if (currentTool === 'shape' && currentShape !== 'polyline') finalizeShape();
          
          setActiveElement('.tool-group .tool-bg', null);
          setActiveElement('.shape-group .tool-bg', this.querySelector('.tool-bg'));
          
          const shapeType = this.querySelector('.tool-bg').getAttribute('data-shape');
          currentTool = 'shape';
          currentShape = shapeType;
        });
      });
      // Optimized save function with reduced DOM queries
      function saveDrawing() {
        const drawingElements = Array.from(drawingArea.children).map(element => {
          const data = { elementType: element.tagName.toLowerCase() };
          Array.from(element.attributes).forEach(attr => {
            data[attr.name] = attr.value;
          });
          return data;
        });
        localStorage.setItem('paintAppData', JSON.stringify(drawingElements));
      }
      // Optimized load function with element creation mapping
      const elementCreators = {
        path: () => document.createElementNS(SVG_NS, 'path'),
        rect: () => document.createElementNS(SVG_NS, 'rect'),
        ellipse: () => document.createElementNS(SVG_NS, 'ellipse'),
        polygon: () => document.createElementNS(SVG_NS, 'polygon'),
        line: () => document.createElementNS(SVG_NS, 'line'),
        polyline: () => document.createElementNS(SVG_NS, 'polyline')
      };
      function loadDrawing() {
        const savedData = localStorage.getItem('paintAppData');
        if (savedData) {
          const drawingElements = JSON.parse(savedData);
          drawingArea.innerHTML = '';
          paths = [];
          drawingElements.forEach(data => {
            const creator = elementCreators[data.elementType];
            if (creator) {
              const element = creator();
              Object.entries(data).forEach(([key, value]) => {
                if (key !== 'elementType') {
                  element.setAttribute(key, value);
                }
              });
              drawingArea.appendChild(element);
              paths.push(element);
            }
          });
        }
      }
      // Optimized export function with reduced string operations
      function exportDrawing() {
        const clonedElements = Array.from(drawingArea.children).map(element => {
          const clone = element.cloneNode(true);
          if (clone.tagName === 'path') {
            const d = clone.getAttribute('d');
            const adjustedD = d.replace(/[ML]\s*([\d.]+)\s+([\d.]+)/g, (match, x, y) => {
              return match.charAt(0) + ' ' + (parseFloat(x) - CANVAS_X) + ' ' + (parseFloat(y) - CANVAS_Y);
            });
            clone.setAttribute('d', adjustedD);
          } else if (clone.tagName === 'rect') {
            const x = parseFloat(clone.getAttribute('x')) - CANVAS_X;
            const y = parseFloat(clone.getAttribute('y')) - CANVAS_Y;
            clone.setAttribute('x', x);
            clone.setAttribute('y', y);
          }
          return clone.outerHTML;
        }).join('');
        const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" viewBox="0 0 ${CANVAS_WIDTH} ${CANVAS_HEIGHT}">
  <rect width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" fill="white" />
  ${clonedElements}
</svg>`;
        const dataUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgContent);
        const link = document.createElementNS(XHTML_NS, 'a');
        link.href = dataUrl;
        link.download = 'painting.svg';
        link.click();
      }
      // Action buttons with optimized event handling
      document.querySelectorAll('.action-group').forEach((group, index) => {
        group.addEventListener('click', function() {
          const actions = [
            () => { // Clear
              drawingArea.innerHTML = '';
              paths = [];
              sendMessageToParent('CLEAR_REQUEST');
            },
            () => { // Save
              sendMessageToParent('SAVE_REQUEST');
              saveDrawing();
            },
            () => exportDrawing() // Export
          ];
          if (actions[index]) actions[index]();
        });
      });
      // Optimized drawing functions
      function startDrawing(pos) {
        if (!isWithinCanvas(pos)) return;
        if (currentTool === 'bucket') {
          drawingArea.innerHTML = '';
          paths = [];
          const fillRect = createSVGElement('rect', {
            x: CANVAS_X, y: CANVAS_Y, width: CANVAS_WIDTH, height: CANVAS_HEIGHT, fill: currentColor
          });
          drawingArea.appendChild(fillRect);
          paths.push(fillRect);
          return;
        }
        if (currentTool === 'shape') {
          if (currentShape === 'polyline') {
            addPolylinePoint(pos);
            return;
          } else {
            startPos = pos;
            createShapeStart(pos);
            return;
          }
        }
        isDrawing = true;
        currentPath = createSVGElement('path', {
          stroke: currentTool === 'eraser' ? 'white' : currentColor,
          'stroke-width': currentBrushSize,
          fill: 'none',
          'stroke-linecap': 'round',
          'stroke-linejoin': 'round',
          d: `M ${pos.x} ${pos.y} L ${pos.x} ${pos.y}`
        });
        drawingArea.appendChild(currentPath);
        paths.push(currentPath);
      }
      function createShapeStart(pos) {
        isDrawing = true;
        const config = shapeConfigs[currentShape];
        if (config) {
          const shape = createSVGElement(currentShape === 'line' ? 'line' : 
            currentShape.startsWith('polygon') ? 'polygon' : currentShape, config(pos));
          drawingArea.appendChild(shape);
          currentShapeElement = shape;
        }
      }
      function updateShape(pos) {
        if (!currentShapeElement || !startPos) return;
        switch (currentShape) {
          case 'rect':
            const rectX = Math.min(startPos.x, pos.x);
            const rectY = Math.min(startPos.y, pos.y);
            const rectWidth = Math.abs(pos.x - startPos.x);
            const rectHeight = Math.abs(pos.y - startPos.y);
            currentShapeElement.setAttribute('x', rectX);
            currentShapeElement.setAttribute('y', rectY);
            currentShapeElement.setAttribute('width', rectWidth);
            currentShapeElement.setAttribute('height', rectHeight);
            break;
          case 'ellipse':
            const ellipseCenterX = (startPos.x + pos.x) / 2;
            const ellipseCenterY = (startPos.y + pos.y) / 2;
            const radiusX = Math.abs(pos.x - startPos.x) / 2;
            const radiusY = Math.abs(pos.y - startPos.y) / 2;
            currentShapeElement.setAttribute('cx', ellipseCenterX);
            currentShapeElement.setAttribute('cy', ellipseCenterY);
            currentShapeElement.setAttribute('rx', radiusX);
            currentShapeElement.setAttribute('ry', radiusY);
            break;
          case 'line':
            currentShapeElement.setAttribute('x2', pos.x);
            currentShapeElement.setAttribute('y2', pos.y);
            break;
          case 'polygon-3':
          case 'polygon-5':
          case 'polygon-6':
            const sides = parseInt(currentShape.split('-')[1]);
            const polyCenterX = (startPos.x + pos.x) / 2;
            const polyCenterY = (startPos.y + pos.y) / 2;
            const width = Math.abs(pos.x - startPos.x);
            const height = Math.abs(pos.y - startPos.y);
            const offset = pos.y > startPos.y ? Math.PI : 0;
            const points = generatePolygonPoints(polyCenterX, polyCenterY, width, height, sides, offset);
            currentShapeElement.setAttribute('points', points);
            break;
        }
      }
      function addPolylinePoint(pos) {
        polylinePoints.push(pos.x, pos.y);
        if (!currentShapeElement) {
          currentShapeElement = createSVGElement('polyline', {
            points: polylinePoints.join(','),
            fill: 'none',
            stroke: currentColor,
            'stroke-width': currentBrushSize
          });
          drawingArea.appendChild(currentShapeElement);
        } else {
          currentShapeElement.setAttribute('points', polylinePoints.join(','));
        }
      }
      function finalizeShape() {
        if (currentShapeElement) {
          paths.push(currentShapeElement);
        }
        if (polylinePreview) {
          polylinePreview.remove();
          polylinePreview = null;
        }
        // Only reset polylinePoints if we're not in polyline mode
        if (currentTool !== 'shape' || currentShape !== 'polyline') {
          polylinePoints = [];
        }
        polygonPoints = [];
      }
      function draw(pos) {
        if (!isDrawing) return;
        if (currentTool === 'shape' && currentShapeElement && startPos) {
          updateShape(pos);
          return;
        }
        if (!currentPath || !isWithinCanvas(pos)) return;
        const currentD = currentPath.getAttribute('d');
        currentPath.setAttribute('d', currentD + ` L ${pos.x} ${pos.y}`);
      }
      function stopDrawing() {
        if (currentTool === 'shape' && currentShapeElement && startPos) {
          finalizeShape();
        }
        isDrawing = false;
        currentPath = null;
        startPos = null;
        // Don't reset currentShapeElement for polyline - we want to keep adding to it
        if (currentTool !== 'shape' || currentShape !== 'polyline') {
          currentShapeElement = null;
        }
      }
      // Optimized event handlers with throttling for mousemove
      let mouseMoveThrottle = null;
      canvas.addEventListener('mousedown', function(evt) {
        startDrawing(getMousePos(evt));
      });
      document.addEventListener('mousemove', function(evt) {
        if (isDrawing) {
          if (mouseMoveThrottle) return;
          mouseMoveThrottle = requestAnimationFrame(() => {
            draw(getMousePos(evt));
            mouseMoveThrottle = null;
          });
        }
        if (currentTool === 'shape' && currentShape === 'polyline' && polylinePoints.length > 0) {
          if (!polylinePreview) {
            polylinePreview = createSVGElement('line', {
              stroke: currentColor,
              'stroke-width': currentBrushSize,
              'stroke-dasharray': [currentBrushSize*2, currentBrushSize]
            });
            drawingArea.appendChild(polylinePreview);
          }
          const lastX = polylinePoints[polylinePoints.length - 2];
          const lastY = polylinePoints[polylinePoints.length - 1];
          const pos = getMousePos(evt);
          polylinePreview.setAttribute('x1', lastX);
          polylinePreview.setAttribute('y1', lastY);
          polylinePreview.setAttribute('x2', pos.x);
          polylinePreview.setAttribute('y2', pos.y);
          if (!isWithinCanvas(pos)) {
            polylinePreview.remove();
            polylinePreview = null;
          }
        }
      });
      document.addEventListener('mouseup', stopDrawing);
      // Touch events
      canvas.addEventListener('touchstart', function(evt) {
        evt.preventDefault();
        startDrawing(getTouchPos(evt));
      });
      canvas.addEventListener('touchmove', function(evt) {
        evt.preventDefault();
        draw(getTouchPos(evt));
      });
      canvas.addEventListener('touchend', function(evt) {
        evt.preventDefault();
        stopDrawing();
      });
      // Context menu prevention
      canvas.addEventListener('contextmenu', function(evt) {
        evt.preventDefault();
        if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {
          // Finalize polyline on right-click
          finalizeShape();
          currentShapeElement = null;
          polylinePoints = [];
        }
      });
      
      // Double-click to finish polyline
      canvas.addEventListener('dblclick', function(evt) {
        evt.preventDefault();
        if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {
          finalizeShape();
          currentShapeElement = null;
          polylinePoints = [];
        }
      });
      // Communication with HTML parent
      function sendMessageToParent(type, data = {}) {
        if (window.parent && window.parent !== window) {
          window.parent.postMessage({ type, data }, '*');
        }
      }
      // Message listener
      window.addEventListener('message', function(event) {
        const { type, success, message } = event.data;
        if (type === 'SAVE_RESPONSE') {
          if (success) {
            // Blockchain ready, drawing already saved in action handler
          }
          saveDrawing();
        }
      });
      // Initialize on load
      window.addEventListener('load', function() {
        updateCoordinateFactors();
        loadDrawing();
        
        // THIS CODE SHOULD BE REMOVED FOR PRODUCTION!!!
        // TEMPORARY: Assign random colors to color buttons (except first one)
        // TODO: Remove this function when no longer needed
        function assignRandomColors() {
          const colorButtons = document.querySelectorAll('.color-btn');
          const colors = ['#ff0000', '#0000ff', '#00ff00', '#ffff00', '#ff00ff'];
          
          // Generate 5 random colors
          for (let i = 1; i < colorButtons.length; i++) {
            const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');
            colorButtons[i].setAttribute('fill', randomColor);
          }
        }
        
        // TEMPORARY: Assign random shapes to shape buttons
        // TODO: Remove this function when no longer needed
        function assignRandomShapes() {
          const shapeUseElements = document.querySelectorAll('.shape-btn');
          const shapeIds = ['shape-0', 'shape-1', 'shape-2', 'shape-3']; // Basic shapes
          const polygonIds = ['polygon-3', 'polygon-5', 'polygon-6']; // Polygons
          
          // Shuffle arrays to get random selection
          const shuffledShapes = shapeIds.sort(() => Math.random() - 0.5);
          const shuffledPolygons = polygonIds.sort(() => Math.random() - 0.5);
          
          // Assign 2 random shapes and 1 random polygon
          shapeUseElements[0].setAttribute('href', '#' + shuffledShapes[0]);
          shapeUseElements[1].setAttribute('href', '#' + shuffledShapes[1]);
          shapeUseElements[2].setAttribute('href', '#' + shuffledPolygons[0]);
        }
        
        // Uncomment the lines below to enable random colors and shapes
        assignRandomColors();
        assignRandomShapes();
      });
    ]]>
  </script>
</svg>

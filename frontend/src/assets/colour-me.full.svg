<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewBox="0 0 1000 1000">
  <defs>
    <style>
      .toolbar {fill: #f0f0f0; stroke: #ccc; stroke-width: 1;}
      .canvas {fill: white; stroke: #ccc; stroke-width: 1;}
      #drawing-area {pointer-events: none;}
      text {font-family: Arial, sans-serif; font-size: 14px; fill: #333;}
      .toolbar-text { 
        font-size: 12px; 
        user-select: none; 
        -webkit-user-select: none; 
        -moz-user-select: none; 
        -ms-user-select: none; 
      }
      .button-text { 
        font-size: 20px; 
        fill: white; 
        pointer-events: none; 
        user-select: none; 
        -webkit-user-select: none; 
        -moz-user-select: none; 
        -ms-user-select: none; 
      }
      .color-btn, .brush-size, .tool-bg, .action-bg {cursor: pointer;}
      .color-btn {stroke: #333; stroke-width: 2;}
      .color-btn:hover {stroke: #777; stroke-width: 3;}
      .color-btn.active {stroke: #000; stroke-width: 3;}
      #brush-slider-handle {cursor: grab;}
      #brush-slider-handle:active {cursor: grabbing;}
      #brush-slider-track {cursor: pointer;}
      .tool-button { 
        font-size: 20px; 
        fill: #666; 
        transition: fill 0.2s; 
        user-select: none; 
        -webkit-user-select: none; 
        -moz-user-select: none; 
        -ms-user-select: none; 
      }
      .tool-button:hover {fill: #333;}
      .tool-button.active {fill: #333;}
      .tool-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}
      .tool-bg:hover {fill: #e0e0e0; stroke: #999;}
      .tool-bg.active {fill: #333; stroke: #333;}
      .tool-bg.active:hover {fill: #444; stroke: #444;}
      .tool-group {cursor: pointer;}
      .tool-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}
      .tool-group:hover .tool-bg.active {fill: #444; stroke: #444;}
      .shape-group {cursor: pointer;}
      .shape-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}
      .shape-group:hover .tool-bg.active {fill: #444; stroke: #444;}
      .shape-group .tool-bg.active ~ .shape-icon {stroke: white !important;}
      .shape-btn { cursor: pointer; }
      .action-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}
      .action-bg:hover {fill: #e0e0e0; stroke: #999;}
      .action-bg.clear {fill: #ffebee; stroke: #ffcdd2;}
      .action-bg.clear:hover {fill: #ffcdd2; stroke: #ef9a9a;}
      .action-bg.save {fill: #e8f5e8; stroke: #c8e6c9;}
      .action-bg.save:hover {fill: #c8e6c9; stroke: #a5d6a7;}
      .action-bg.export {fill: #e3f2fd; stroke: #bbdefb;}
      .action-bg.export:hover {fill: #bbdefb; stroke: #90caf9;}
    </style>
    <rect id="canvas-bg" x="10" y="90" width="980" height="900" rx="5"/>
    <clipPath id="canvas-clip">
      <use href="#canvas-bg"/>
    </clipPath>
  </defs>
  
  <!-- Background -->
  <rect width="1000" height="1000" fill="#e8e8e8"/>

  <!-- Canvas -->
  <use href="#canvas-bg" class="canvas"/>
  
  <!-- Toolbar -->
  <rect x="10" y="10" width="980" height="70" class="toolbar" rx="5"/>

  <!-- Brush size controls -->
  <g id="brush-size-controls">
    <rect x="300" y="25" width="120" height="20" fill="#f0f0f0" stroke="#ccc" stroke-width="1" rx="10"/>
    <rect id="brush-slider-track" x="305" y="27.5" width="110" height="15" fill="#ddd" rx="7.5"/>
    <circle id="brush-slider-handle" cx="310" cy="35" r="8" fill="#4CAF50" stroke="#45a049" stroke-width="2" cursor="pointer"/>
  </g>
  
  <!-- Color palette -->
  <circle cx="50" cy="35" r="15" class="color-btn active" fill="#000000"/>
  
  <!-- Dynamic Content Start -->
  <circle cx="90" cy="35" r="15" class="color-btn" fill="#ff0000"/>
  <circle cx="130" cy="35" r="15" class="color-btn" fill="#0000ff"/>
  <circle cx="170" cy="35" r="15" class="color-btn" fill="#00ff00" />
  <circle cx="210" cy="35" r="15" class="color-btn" fill="#ffff00" />
  <circle cx="250" cy="35" r="15" class="color-btn" fill="#ff00ff" />
  <!-- Shapes -->
  <!-- <use href="#shape-0" x="445" y="20" class="shape-btn"/>
  <use href="#shape-1" x="485" y="20" class="shape-btn"/>
  <use href="#polygon-3" x="525" y="20" class="shape-btn"/> -->

  <g class="shape-group" transform="translate(445, 20)">
    <rect data-shape="line" x="0" y="0" width="30" height="30" class="tool-bg"/>
    <line x1="5" y1="10" x2="25" y2="20" stroke="#333" stroke-width="2" class="shape-icon"/>
  </g>
  <g class="shape-group" transform="translate(485, 20)">
    <rect data-shape="polyline" x="0" y="0" width="30" height="30" class="tool-bg"/>
    <polyline points="5,15 12.5,10 17.5,20 25,15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
  </g>
  <g class="shape-group" transform="translate(525, 20)">
    <rect data-shape="polygon-3" x="0" y="0" width="30" height="30" class="tool-bg"/>
    <polygon points="15,7 25,23 5,23" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/>
  </g>

  <!-- Drawing area -->
  <g id="drawing-area" clip-path="url(#canvas-clip)" data-token="0">
  </g>
  <!-- Dynamic Content End -->
  
  <!-- Tool buttons -->
  <g class="tool-group">
    <rect x="575" y="20" width="30" height="30" class="tool-bg active"/>
    <text x="590" y="40" text-anchor="middle" class="tool-button">üñåÔ∏è</text>
  </g>
  
  <g class="tool-group">
    <rect x="615" y="20" width="30" height="30" class="tool-bg"/>
    <text x="630" y="40" text-anchor="middle" class="tool-button">üßΩ</text>
  </g>
  
  <g class="tool-group">
    <rect x="655" y="20" width="30" height="30" class="tool-bg"/>
    <text x="670" y="40" text-anchor="middle" class="tool-button">ü™£</text>
  </g>
  
  <!-- Action buttons -->
  <g class="action-group">
    <rect x="800" y="20" width="40" height="30" class="action-bg clear"/>
    <text x="820" y="40" text-anchor="middle" class="button-text">üí£</text>
    <text x="820" y="65" text-anchor="middle" class="toolbar-text">Clear</text>
  </g>
  
  <g class="action-group">
    <rect x="860" y="20" width="40" height="30" class="action-bg save"/>
    <text x="880" y="40" text-anchor="middle" class="button-text">üíæ</text>
    <text x="880" y="65" text-anchor="middle" class="toolbar-text">Save</text>
  </g>
  
  <g class="action-group">
    <rect x="920" y="20" width="40" height="30" class="action-bg export"/>
    <text x="940" y="40" text-anchor="middle" class="button-text">üìÅ</text>
    <text x="940" y="65" text-anchor="middle" class="toolbar-text">Export</text>
  </g>
  
  <!-- Labels -->
  <text x="150" y="65" text-anchor="middle" class="toolbar-text">Colors</text>
  <text x="350" y="65" text-anchor="middle" class="toolbar-text">Brush Size</text>
  <text x="500" y="65" text-anchor="middle" class="toolbar-text">Shapes</text>
  <text x="630" y="65" text-anchor="middle" class="toolbar-text">Tools</text>

  <script type="text/javascript">
    <![CDATA[
      // Canvas constants
      const CANVAS_X = 10;
      const CANVAS_Y = 90;
      const CANVAS_WIDTH = 980;
      const CANVAS_HEIGHT = 900;
      // Cached DOM elements for better performance
      const drawingArea = document.getElementById('drawing-area');
      const canvas = document.querySelector('.canvas');
      const svg = document.querySelector('svg');
      const localStorageKey = 'colourMeArt.' + (drawingArea.getAttribute('data-token') || '0');
      // Painting app functionality
      let isDrawing = false;
      let currentColor = '#000000';
      let currentBrushSize = 8;
      let currentTool = 'brush'; // 'brush', 'eraser', 'bucket', 'shape'
      let currentShape = 'rect'; // 'rect', 'ellipse', 'polygon', 'line', 'polyline'
      let paths = [];
      let currentPath = null;
      let startPos = null;
      let currentShapeElement = null;
      let polylinePoints = [];
      let polylinePreview = null;
      // Cached SVG namespace for better performance
      const SVG_NS = 'http://www.w3.org/2000/svg';
      const XHTML_NS = 'http://www.w3.org/1999/xhtml';
      // Cached coordinate conversion factors
      let svgRect = null;
      let svgWidth = 1000;
      let svgHeight = 1000;
      let displayWidth = 1000;
      let displayHeight = 1000;
      // Update coordinate conversion factors
      function updateCoordinateFactors() {
        svgRect = svg.getBoundingClientRect();
        svgWidth = svg.viewBox.baseVal.width;
        svgHeight = svg.viewBox.baseVal.height;
        displayWidth = svgRect.width;
        displayHeight = svgRect.height;
      }
      // Optimized position calculation function
      function calculatePosition(clientX, clientY) {
        if (!svgRect) updateCoordinateFactors();
        const x = clientX - svgRect.left;
        const y = clientY - svgRect.top;
        const rawX = (x * svgWidth) / displayWidth;
        const rawY = (y * svgHeight) / displayHeight;
        return {
          x: Math.round(rawX),
          y: Math.round(rawY)
        };
      }
      // Unified position getter for mouse and touch
      function getMousePos(evt) {
        return calculatePosition(evt.clientX, evt.clientY);
      }
      // should test what happens when there are multiple touches, zoom, etc.
      function getTouchPos(evt) {
        const touch = evt.touches[0];
        return calculatePosition(touch.clientX, touch.clientY);
      }
      // Optimized element creation with batch attribute setting
      function createSVGElement(tagName, attributes = {}) {
        const element = document.createElementNS(SVG_NS, tagName);
        Object.entries(attributes).forEach(([key, value]) => {
          element.setAttribute(key, value);
        });
        return element;
      }
      // Optimized class manipulation
      function setActiveElement(selector, activeElement) {
        document.querySelectorAll(selector).forEach(el => el.classList.remove('active'));
        if (activeElement) activeElement.classList.add('active');
      }
      // Optimized shape creation with predefined attributes
      const shapeConfigs = {
        rect: (pos) => ({
          fill: currentColor, x: pos.x, y: pos.y, width: 1, height: 1
        }),
        ellipse: (pos) => ({
          fill: currentColor, cx: pos.x, cy: pos.y, rx: 1, ry: 1
        }),
        line: (pos) => ({
          stroke: currentColor, 'stroke-width': currentBrushSize, 
          x1: pos.x, y1: pos.y, x2: pos.x, y2: pos.y
        }),
        'polygon-3': (pos) => ({
          fill: currentColor,
          points: `${pos.x},${pos.y} ${pos.x + 1},${pos.y + 1} ${pos.x - 1},${pos.y + 1}`
        }),
        'polygon-5': (pos) => ({
          fill: currentColor,
          points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.3} ${pos.x + 0.3},${pos.y + 0.5} ${pos.x - 0.3},${pos.y + 0.5} ${pos.x - 0.5},${pos.y - 0.3}`
        }),
        'polygon-6': (pos) => ({
          fill: currentColor,
          points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.25} ${pos.x + 0.5},${pos.y + 0.25} ${pos.x},${pos.y + 0.5} ${pos.x - 0.5},${pos.y + 0.25} ${pos.x - 0.5},${pos.y - 0.25}`
        })
      };
      // Optimized polygon point generation
      function generatePolygonPoints(centerX, centerY, width, height, sides, offset = 0) {
        const points = [];
        for (let i = 0; i < sides; i++) {
          const angle = (i * 2 * Math.PI) / sides - Math.PI / 2 + offset;
          const x = Math.round(centerX + (width / 2) * Math.cos(angle));
          const y = Math.round(centerY + (height / 2) * Math.sin(angle));
          points.push(x, y);
        }
        return points.join(',');
      }
      // Optimized boundary checking
      function isWithinCanvas(pos) {
        return pos.x >= CANVAS_X && pos.x <= CANVAS_X + CANVAS_WIDTH && 
               pos.y >= CANVAS_Y && pos.y <= CANVAS_Y + CANVAS_HEIGHT;
      }
      // Color selection with optimized event handling
      document.querySelectorAll('.color-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          setActiveElement('.color-btn', this);
          currentColor = this.getAttribute('fill');
        });
      });
      // Brush size slider functionality
      const brushSlider = document.getElementById('brush-slider-handle');
      const brushSliderTrack = document.getElementById('brush-slider-track');
      let isDraggingSlider = false;
      
      function updateBrushSizeFromSlider(x) {
        const trackRect = brushSliderTrack.getBoundingClientRect();
        const trackLeft = trackRect.left;
        const trackWidth = trackRect.width;
        
        // Calculate position relative to track
        let relativeX = x - trackLeft;
        relativeX = Math.max(0, Math.min(relativeX, trackWidth));
        
        // Convert to brush size (1-40)
        const brushSize = Math.round(1 + (relativeX / trackWidth) * 39);
        
        // Update slider handle position
        const sliderX = 305 + (relativeX / trackWidth) * 110;
        brushSlider.setAttribute('cx', sliderX);
        
        // Update brush size
        currentBrushSize = brushSize;
        
        // Update slider handle size to match brush size (with scaling factor)
        const handleRadius = Math.max(4, Math.min(20, brushSize * 0.5));
        brushSlider.setAttribute('r', handleRadius);
      }
      
      function startSliderDrag(evt) {
        finalizeShape();
        isDraggingSlider = true;
        updateBrushSizeFromSlider(evt.clientX);
      }
      
      function updateSliderDrag(evt) {
        if (isDraggingSlider) {
          updateBrushSizeFromSlider(evt.clientX);
        }
      }
      
      function stopSliderDrag() {
        isDraggingSlider = false;
      }
      
      // Slider event listeners
      brushSlider.addEventListener('mousedown', startSliderDrag);
      brushSliderTrack.addEventListener('mousedown', startSliderDrag);
      document.addEventListener('mousemove', updateSliderDrag);
      document.addEventListener('mouseup', stopSliderDrag);
      
      // Touch events for slider
      brushSlider.addEventListener('touchstart', function(evt) {
        evt.preventDefault();
        finalizeShape();
        isDraggingSlider = true;
        updateBrushSizeFromSlider(evt.touches[0].clientX);
      }, {passive: false});
      
      brushSliderTrack.addEventListener('touchstart', function(evt) {
        evt.preventDefault();
        finalizeShape();
        isDraggingSlider = true;
        updateBrushSizeFromSlider(evt.touches[0].clientX);
      }, {passive: false});
      
      document.addEventListener('touchmove', function(evt) {
        if (isDraggingSlider) {
          evt.preventDefault();
          updateBrushSizeFromSlider(evt.touches[0].clientX);
        }
      });
      
      document.addEventListener('touchend', stopSliderDrag);
      // Tool selection with optimized class management
      document.querySelectorAll('.tool-group').forEach((group, index) => {
        group.addEventListener('click', function() {
          setActiveElement('.tool-bg', this.querySelector('.tool-bg'));
          setActiveElement('.shape-group .tool-bg', null);
          
          const tools = ['brush', 'eraser', 'bucket'];
          currentTool = tools[index] || 'brush';
        });
      });
      // Shape selection
      document.querySelectorAll('.shape-group').forEach((group) => {
        group.addEventListener('click', function() {
          setActiveElement('.shape-group .tool-bg', this.querySelector('.tool-bg'));
          setActiveElement('.tool-group .tool-bg', null);
          
          const shapeType = this.querySelector('.tool-bg').getAttribute('data-shape');
          currentTool = 'shape';
          currentShape = shapeType;

          if (currentShape === 'polyline') {
            polylinePoints = [];
          }
        });
      });

      // Replace the existing saveDrawing function
      function saveDrawing(storageKey = localStorageKey) {
        const drawingElements = Array.from(drawingArea.children).map(element => {
          // Transform SVG element to contract Object format
          const stroke = element.getAttribute('stroke') ? hexToBytes3(element.getAttribute('stroke')) : null;
          const fill = element.getAttribute('fill') !== '#none' ? hexToBytes3(element.getAttribute('fill')) : null;
          const color = stroke || fill || '0x000000';
          // console.log('color', color);
          const object = {
            shape: getElementShape(element),
            color: color,
            stroke: parseInt(element.getAttribute('stroke-width') || '0'),
            points: extractPoints(element)
          };
          return object;
        });

        console.log('saving to localStorage: ', storageKey);
        
        if (drawingElements.length > 0) {
          localStorage.setItem(storageKey, JSON.stringify(drawingElements));
          // console.log('Saved to localStorage:', drawingElements);
        } else {
          localStorage.removeItem(storageKey);
        }
        
        return drawingElements.length > 0 ? drawingElements : null;
      }

      // Add these helper functions after the existing functions
      function getElementShape(element) {
        const tagName = element.tagName.toLowerCase();
        switch (tagName) {
          case 'rect': return 0; // Path.rect
          case 'line': return 1; // Path.line
          case 'ellipse': return 2; // Path.ellipse
          case 'polyline': return 3; // Path.polyline
          case 'polygon': return 4; // Path.polygon
          case 'path': return 5; // Path.path
          default: return 5; // Default to path
        }
      }

      function hexToBytes3(hexColor) {
        // Remove # if present and convert to 0x format
        return hexColor ? hexColor.replace('#', '0x') : null;
      }

      function extractPoints(element) {
        const tagName = element.tagName.toLowerCase();
        const points = [];
        
        switch (tagName) {
          case 'rect':
            const x = parseInt(element.getAttribute('x'));
            const y = parseInt(element.getAttribute('y'));
            const width = parseInt(element.getAttribute('width'));
            const height = parseInt(element.getAttribute('height'));
            points.push({ x: x, y: y });
            points.push({ x: width, y: height });
            break;
            
          case 'ellipse':
            const cx = parseInt(element.getAttribute('cx'));
            const cy = parseInt(element.getAttribute('cy'));
            const rx = parseInt(element.getAttribute('rx'));
            const ry = parseInt(element.getAttribute('ry'));
            points.push({ x: cx, y: cy });
            points.push({ x: rx, y: ry });
            break;
            
          case 'line':
            points.push({ 
              x: parseInt(element.getAttribute('x1')), 
              y: parseInt(element.getAttribute('y1')) 
            });
            points.push({ 
              x: parseInt(element.getAttribute('x2')), 
              y: parseInt(element.getAttribute('y2')) 
            });
            break;
            
          case 'polyline':
            const polylinePoints = extractPolylinePoints(element);
            points.push(...polylinePoints);
            break;
            
          case 'polygon':
            const polygonPoints = extractPolygonPoints(element);
            points.push(...polygonPoints);
            break;
            
          case 'path':
            const pathPoints = extractPathPoints(element);
            points.push(...pathPoints);
            break;
        }
        
        return points;
      }

      function extractPolylinePoints(element) {
        const points = [];
        const pointsAttr = element.getAttribute('points');
        const coords = pointsAttr.split(/[,\s]+/);
        for (let i = 0; i < coords.length; i += 2) {
          points.push({ 
            x: parseInt(coords[i]), 
            y: parseInt(coords[i + 1]) 
          });
        }
        return points;
      }

      function extractPolygonPoints(element) {
        const points = [];
        const pointsAttr = element.getAttribute('points');
        const coords = pointsAttr.split(/[,\s]+/);
        for (let i = 0; i < coords.length; i += 2) {
          points.push({ 
            x: parseInt(coords[i]), 
            y: parseInt(coords[i + 1]) 
          });
        }
        return points;
      }

      function extractPathPoints(element) {
        const points = [];
        const d = element.getAttribute('d');
        const commands = d.match(/[ML][\d.-]+\s+[\d.-]+/g) || [];
        
        commands.forEach(cmd => {
          const parts = cmd.trim().split(/\s+/);
          if (parts.length >= 2) {
            const command = parts[0].charAt(0);
            const x = parseInt(parts[0].substring(1));
            const y = parseInt(parts[1]);
            points.push({
              x: x,
              y: y
            });
          }
        });
        
        return points;
      }

      // Replace the existing loadDrawing function
      function loadDrawing() {
        const savedData = localStorage.getItem(localStorageKey);
        const tokenData = saveDrawing('tokenArt');

        if (tokenData) {
          sendMessageToParent('LOAD_DATA', { artData: tokenData });
          console.log('loadedData: tokenArt', tokenData);
        }

        if (savedData) {
          const savedObjects = JSON.parse(savedData);
          // console.log('Loading from localStorage:', savedObjects);
          drawingArea.innerHTML = '';
          paths = [];
          
          savedObjects.forEach(obj => {
            const element = createElementFromContract(obj);
            if (element) {
              drawingArea.appendChild(element);
              paths.push(element);
            }
          });

          sendMessageToParent('LOAD_DATA', { artData: savedObjects });
          console.log('loadedData: savedObjects', savedObjects);

        }
        
      }

      function createElementFromContract(obj) {
        const element = document.createElementNS(SVG_NS, getElementTag(obj.shape));
        // console.log('obj.color', obj.color);
        
        // Set attributes based on shape type
        switch (obj.shape) {
          case 0: // rect
            const [pos, size] = obj.points;
            element.setAttribute('x', pos.x);
            element.setAttribute('y', pos.y);
            element.setAttribute('width', size.x);
            element.setAttribute('height', size.y);
            element.setAttribute('fill', bytes3ToHex(obj.color));
            break;
            
          case 1: // line
            const [start, end] = obj.points;
            element.setAttribute('x1', start.x);
            element.setAttribute('y1', start.y);
            element.setAttribute('x2', end.x);
            element.setAttribute('y2', end.y);
            element.setAttribute('stroke', bytes3ToHex(obj.color));
            element.setAttribute('stroke-width', obj.stroke);
            break;
            
          case 2: // ellipse
            const [center, radius] = obj.points;
            element.setAttribute('cx', center.x);
            element.setAttribute('cy', center.y);
            element.setAttribute('rx', radius.x);
            element.setAttribute('ry', radius.y);
            element.setAttribute('fill', bytes3ToHex(obj.color));
            break;
            
          case 3: // polyline
            const polylinePointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');
            element.setAttribute('points', polylinePointsStr);
            element.setAttribute('fill', 'none');
            element.setAttribute('stroke', bytes3ToHex(obj.color));
            element.setAttribute('stroke-width', obj.stroke);
            break;
            
          case 4: // polygon
            const polygonPointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');
            element.setAttribute('points', polygonPointsStr);
            element.setAttribute('fill', bytes3ToHex(obj.color));
            break;
            
          case 5: // path
            const pathData = obj.points.map((p, i) => 
              `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`
            ).join('');
            element.setAttribute('d', pathData);
            element.setAttribute('fill', 'none');
            element.setAttribute('stroke', bytes3ToHex(obj.color));
            element.setAttribute('stroke-width', obj.stroke);
            element.setAttribute('stroke-linecap', 'round');
            element.setAttribute('stroke-linejoin', 'round');
            break;
        }
        
        return element;
      }

      function getElementTag(shape) {
        const tags = ['rect', 'line', 'ellipse', 'polyline', 'polygon', 'path'];
        return tags[shape] || 'path';
      }

      function bytes3ToHex(bytes3) {
        // Convert 0x format back to # format for SVG
        const cleanHex = bytes3.replace('0x', '');
        return '#' + cleanHex;
      }
      // Optimized export function with reduced string operations
      function exportDrawing() {
        const contractObjects = saveDrawing();
        if (!contractObjects) return;
        
        // Convert to SVG format for export
        const svgElements = contractObjects.map(obj => {
          const element = createElementFromContract(obj);
          return element.outerHTML;
        }).join('');
        
        const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" viewBox="0 0 ${CANVAS_WIDTH} ${CANVAS_HEIGHT}">
  <rect width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" fill="white" />
  ${svgElements}
</svg>`;
        
        const dataUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgContent);
        const link = document.createElementNS(XHTML_NS, 'a');
        link.href = dataUrl;
        link.download = 'painting.svg';
        link.click();
      }
      // Action buttons with optimized event handling
      document.querySelectorAll('.action-group').forEach((group, index) => {
        group.addEventListener('click', function() {
          const actions = [
            () => { // Clear
              drawingArea.innerHTML = '';
              paths = [];
              saveDrawing();
              sendMessageToParent('CLEAR_REQUEST');
              console.log('cleared');
            },
            () => { // Save
              const tokenArtString = localStorage.getItem('tokenArt');
              const saveData = saveDrawing();

              if (saveData) {
                const saveArtString = JSON.stringify(saveData);
                
                if (tokenArtString !== saveArtString) {
                  if (tokenArtString && saveArtString.startsWith(tokenArtString.slice(0, -1))) {
                    const tokenElements = JSON.parse(tokenArtString);
                    const appendElements = saveData.slice(tokenElements.length);
                    sendMessageToParent('SAVE_REQUEST', { artData: appendElements, saveType: 'append' });
                    console.log('saveRequest: append', appendElements);
                  } else {
                    sendMessageToParent('SAVE_REQUEST', { artData: saveData, saveType: 'set' });
                    console.log('saveRequest: set', saveData);
                  }
                }
              }
            },
            () => exportDrawing() // Export
          ];
          if (actions[index]) actions[index]();
        });
      });
      // Optimized drawing functions
      function startDrawing(pos) {
        if (!isWithinCanvas(pos)) return;
        if (currentTool === 'bucket') {
          drawingArea.innerHTML = '';
          paths = [];
          const fillRect = createSVGElement('rect', {
            x: CANVAS_X, y: CANVAS_Y, width: CANVAS_WIDTH, height: CANVAS_HEIGHT, fill: currentColor
          });
          drawingArea.appendChild(fillRect);
          paths.push(fillRect);
          
          return;
        }
        if (currentTool === 'shape') {
          if (currentShape === 'polyline') {
            addPolylinePoint(pos);
            return;
          } else {
            startPos = pos;
            createShapeStart(pos);
            return;
          }
        }
        isDrawing = true;
        currentPath = createSVGElement('path', {
          stroke: currentTool === 'eraser' ? 'white' : currentColor,
          'stroke-width': currentBrushSize,
          fill: 'none',
          'stroke-linecap': 'round',
          'stroke-linejoin': 'round',
          d: `M${pos.x} ${pos.y} L${pos.x} ${pos.y}`
        });
        drawingArea.appendChild(currentPath);
        paths.push(currentPath);
        
      }
      function createShapeStart(pos) {
        isDrawing = true;
        const config = shapeConfigs[currentShape];
        if (config) {
          const shape = createSVGElement(currentShape === 'line' ? 'line' : 
            currentShape.startsWith('polygon') ? 'polygon' : currentShape, config(pos));
          drawingArea.appendChild(shape);
          currentShapeElement = shape;
          
        }
      }
      function updateShape(pos) {
        if (!currentShapeElement || !startPos) return;
        switch (currentShape) {
          case 'rect':
            const rectX = Math.min(startPos.x, pos.x);
            const rectY = Math.min(startPos.y, pos.y);
            const rectWidth = Math.abs(pos.x - startPos.x);
            const rectHeight = Math.abs(pos.y - startPos.y);
            currentShapeElement.setAttribute('x', rectX);
            currentShapeElement.setAttribute('y', rectY);
            currentShapeElement.setAttribute('width', rectWidth);
            currentShapeElement.setAttribute('height', rectHeight);
            break;
          case 'ellipse':
            const ellipseCenterX = (startPos.x + pos.x) / 2;
            const ellipseCenterY = (startPos.y + pos.y) / 2;
            const radiusX = Math.abs(pos.x - startPos.x) / 2;
            const radiusY = Math.abs(pos.y - startPos.y) / 2;
            currentShapeElement.setAttribute('cx', ellipseCenterX);
            currentShapeElement.setAttribute('cy', ellipseCenterY);
            currentShapeElement.setAttribute('rx', radiusX);
            currentShapeElement.setAttribute('ry', radiusY);
            break;
          case 'line':
            currentShapeElement.setAttribute('x2', pos.x);
            currentShapeElement.setAttribute('y2', pos.y);
            break;
          case 'polygon-3':
          case 'polygon-5':
          case 'polygon-6':
            // For polygon shapes, we need to regenerate the points based on the new size
            const sides = parseInt(currentShape.split('-')[1]);
            const centerX = (startPos.x + pos.x) / 2;
            const centerY = (startPos.y + pos.y) / 2;
            const width = Math.abs(pos.x - startPos.x);
            const height = Math.abs(pos.y - startPos.y);
            const offset = pos.y > startPos.y ? Math.PI : 0;
            
            const points = generatePolygonPoints(centerX, centerY, width, height, sides, offset);
            currentShapeElement.setAttribute('points', points);
            break;
        }
      }
      function addPolylinePoint(pos) {
        polylinePoints.push(pos.x, pos.y);
        
        // Check if polyline has too many points (limit to 500)
        if (polylinePoints.length >= 1000) { // 1000 because each point is x,y (so 500 coordinate pairs)
          // Finalize current polyline and start a new one
          // we need to get the last point of the polyline and add it to the points array
          const lastX = polylinePoints[polylinePoints.length - 4];
          const lastY = polylinePoints[polylinePoints.length - 3];
          finalizeShape();
          polylinePoints = [lastX, lastY, pos.x, pos.y];
          currentShapeElement = createSVGElement('polyline', {
            points: polylinePoints.join(','),
            fill: 'none',
            stroke: currentColor,
            'stroke-width': currentBrushSize
          });
          drawingArea.appendChild(currentShapeElement);
          
        } else {
          if (!currentShapeElement) {
            currentShapeElement = createSVGElement('polyline', {
              points: polylinePoints.join(','),
              fill: 'none',
              stroke: currentColor,
              'stroke-width': currentBrushSize
            });
            drawingArea.appendChild(currentShapeElement);
            
          } else {
            currentShapeElement.setAttribute('points', polylinePoints.join(','));
          }
        }
      }
      function finalizeShape() {
        if (currentShapeElement) {
          paths.push(currentShapeElement);
        }
        if (polylinePreview) {
          polylinePreview.remove();
          polylinePreview = null;
        }
        // Reset polyline state when finalizing
        if (currentShapeElement && currentShapeElement.tagName === 'polyline') {
          polylinePoints = [];
          currentShapeElement = null;
        }
      }
      function draw(pos) {
        if (!isDrawing) return;
        if (currentTool === 'shape' && currentShapeElement && startPos) {
          updateShape(pos);
          return;
        }
        if (!currentPath || !isWithinCanvas(pos)) return;
        
        // Check if current path has too many points (limit to 500)
        const currentD = currentPath.getAttribute('d');
        const pathPoints = currentD.match(/[ML]\s*[\d.-]+\s+[\d.-]+/g) || [];
        const pointCount = pathPoints.length;
        
        if (pointCount >= 500) {
        
          // Finalize current path and start a new one
          const lastX = pathPoints[pathPoints.length - 1].split(' ')[0].slice(1); // remove the L/M
          const lastY = pathPoints[pathPoints.length - 1].split(' ')[1];
          currentPath = createSVGElement('path', {
            stroke: currentTool === 'eraser' ? 'white' : currentColor,
            'stroke-width': currentBrushSize,
            fill: 'none',
            'stroke-linecap': 'round',
            'stroke-linejoin': 'round',
            d: `M${lastX} ${lastY} L${pos.x} ${pos.y}`
          });
          drawingArea.appendChild(currentPath);
          paths.push(currentPath);
          
        } else {
          // Continue with existing path
          currentPath.setAttribute('d', currentD + `L${pos.x} ${pos.y}`);
        }
      }
      function stopDrawing() {
        if (currentTool === 'shape' && currentShapeElement && startPos) {
          finalizeShape();
        }
        isDrawing = false;
        currentPath = null;
        startPos = null;
        // Don't reset currentShapeElement for polyline - we want to keep adding to it
        if (currentTool !== 'shape' || currentShape !== 'polyline') {
          currentShapeElement = null;
        }
      }
      // Optimized event handlers with throttling for mousemove
      let mouseMoveThrottle = null;
      canvas.addEventListener('mousedown', function(evt) {
        startDrawing(getMousePos(evt));
      });
      document.addEventListener('mousemove', function(evt) {
        if (isDrawing) {
          if (mouseMoveThrottle) return;
          mouseMoveThrottle = requestAnimationFrame(() => {
            draw(getMousePos(evt));
            mouseMoveThrottle = null;
          });
        }
        if (currentTool === 'shape' && currentShape === 'polyline' && polylinePoints.length > 0) {
          if (!polylinePreview) {
            polylinePreview = createSVGElement('line', {
              stroke: currentColor,
              'stroke-width': currentBrushSize,
              'stroke-dasharray': [currentBrushSize*2, currentBrushSize]
            });
            drawingArea.appendChild(polylinePreview);
          }
          const lastX = polylinePoints[polylinePoints.length - 2];
          const lastY = polylinePoints[polylinePoints.length - 1];
          const pos = getMousePos(evt);
          polylinePreview.setAttribute('x1', lastX);
          polylinePreview.setAttribute('y1', lastY);
          polylinePreview.setAttribute('x2', pos.x);
          polylinePreview.setAttribute('y2', pos.y);
          if (!isWithinCanvas(pos)) {
            polylinePreview.remove();
            polylinePreview = null;
          }
        }
      });
      document.addEventListener('mouseup', stopDrawing);
      // Touch events
      canvas.addEventListener('touchstart', function(evt) {
        evt.preventDefault();
        startDrawing(getTouchPos(evt));
      }, { passive: false });
      canvas.addEventListener('touchmove', function(evt) {
        evt.preventDefault();
        draw(getTouchPos(evt));
      }, { passive: false });
      canvas.addEventListener('touchend', function(evt) {
        evt.preventDefault();
        stopDrawing();
      }, { passive: false });
      
      // Click/touch out of canvas to finalize polyline
      document.addEventListener('click', function(evt) {
        if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {
          const canvasRect = canvas.getBoundingClientRect();
          const clickX = evt.clientX;
          const clickY = evt.clientY;
          
          // Check if click is outside the canvas area
          if (clickX < canvasRect.left || clickX > canvasRect.right || 
              clickY < canvasRect.top || clickY > canvasRect.bottom) {
            finalizeShape();
            currentShapeElement = null;
            polylinePoints = [];
          }
        }
      });
      
      // Touch out of canvas to finalize polyline
      document.addEventListener('touchend', function(evt) {
        if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {
          const canvasRect = canvas.getBoundingClientRect();
          const touch = evt.changedTouches[0];
          const touchX = touch.clientX;
          const touchY = touch.clientY;
          
          // Check if touch is outside the canvas area
          if (touchX < canvasRect.left || touchX > canvasRect.right || 
              touchY < canvasRect.top || touchY > canvasRect.bottom) {
            finalizeShape();
            currentShapeElement = null;
            polylinePoints = [];
          }
        }
      });
      // Context menu prevention
      canvas.addEventListener('contextmenu', function(evt) {
        evt.preventDefault();
        if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {
          // Finalize polyline on right-click
          finalizeShape();
          currentShapeElement = null;
          polylinePoints = [];
        }
      });
      
      // Double-click to finish polyline
      canvas.addEventListener('dblclick', function(evt) {
        evt.preventDefault();
        if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {
          finalizeShape();
          currentShapeElement = null;
          polylinePoints = [];
        }
      });
      // Communication with HTML parent
      function sendMessageToParent(type, data = {}) {
        if (window.parent && window.parent !== window) {
          window.parent.postMessage({ type, data }, '*');
        }
      }
      // Message listener
      window.addEventListener('message', function(event) {
        const { type, success, message } = event.data;
        if (type === 'SAVE_RESPONSE') {
          if (success) {
            // Blockchain ready, drawing already saved in action handler
          }
          saveDrawing();
        }
      });
      // Initialize on load
      window.addEventListener('load', function() {
        updateCoordinateFactors();
        loadDrawing();

        // console.log('has window.ethereum?', !!window.ethereum);
        
        // Initialize brush slider position based on current brush size
        const initialBrushSize = currentBrushSize;
        const sliderX = 305 + ((initialBrushSize - 1) / 39) * 110;
        brushSlider.setAttribute('cx', sliderX);
        
        // Initialize slider handle size
        const initialHandleRadius = Math.max(4, Math.min(20, initialBrushSize * 0.5));
        brushSlider.setAttribute('r', initialHandleRadius);
      });
    ]]>
  </script>
</svg>

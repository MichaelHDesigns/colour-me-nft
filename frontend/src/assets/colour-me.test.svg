<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewBox="0 0 1000 1000"><defs><style>.toolbar {fill: #f0f0f0; stroke: #ccc; stroke-width: 1;}.canvas {fill: white; stroke: #ccc; stroke-width: 1;}#drawing-area {pointer-events: none;}text {font-family: Arial, sans-serif; font-size: 14px; fill: #333;}.toolbar-text {font-size: 12px;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.button-text {font-size: 20px;fill: white;pointer-events: none;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.color-btn, .brush-size, .tool-bg, .action-bg {cursor: pointer;}.color-btn {stroke: #333; stroke-width: 2;}.color-btn:hover {stroke: #777; stroke-width: 3;}.color-btn.active {stroke: #000; stroke-width: 3;}#brush-slider-handle {cursor: grab;}#brush-slider-handle:active {cursor: grabbing;}#brush-slider-track {cursor: pointer;}.tool-button {font-size: 20px;fill: #666;transition: fill 0.2s;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.tool-button:hover {fill: #333;}.tool-button.active {fill: #333;}.tool-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.tool-bg:hover {fill: #e0e0e0; stroke: #999;}.tool-bg.active {fill: #333; stroke: #333;}.tool-bg.active:hover {fill: #444; stroke: #444;}.tool-group {cursor: pointer;}.tool-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.tool-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group {cursor: pointer;}.shape-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.shape-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group .tool-bg.active ~ .shape-icon {stroke: white !important;}.shape-btn { cursor: pointer; }.action-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.action-bg:hover {fill: #e0e0e0; stroke: #999;}.action-bg.clear {fill: #ffebee; stroke: #ffcdd2;}.action-bg.clear:hover {fill: #ffcdd2; stroke: #ef9a9a;}.action-bg.save {fill: #e8f5e8; stroke: #c8e6c9;}.action-bg.save:hover {fill: #c8e6c9; stroke: #a5d6a7;}.action-bg.export {fill: #e3f2fd; stroke: #bbdefb;}.action-bg.export:hover {fill: #bbdefb; stroke: #90caf9;}</style><rect id="canvas-bg" x="10" y="90" width="980" height="900" rx="5"/><clipPath id="canvas-clip"><use href="#canvas-bg"/></clipPath></defs><rect width="1000" height="1000" fill="#e8e8e8"/><use href="#canvas-bg" class="canvas"/><rect x="10" y="10" width="980" height="70" class="toolbar" rx="5"/><g id="brush-size-controls"><rect x="300" y="25" width="120" height="20" fill="#f0f0f0" stroke="#ccc" stroke-width="1" rx="10"/><rect id="brush-slider-track" x="305" y="27.5" width="110" height="15" fill="#ddd" rx="7.5"/><circle id="brush-slider-handle" cx="310" cy="35" r="8" fill="#4CAF50" stroke="#45a049" stroke-width="2" cursor="pointer"/></g><circle cx="50" cy="35" r="15" class="color-btn active" fill="#000000"/><circle cx="90" cy="35" r="15" class="color-btn" fill="#197128"/><circle cx="130" cy="35" r="15" class="color-btn" fill="#bf1509"/><circle cx="170" cy="35" r="15" class="color-btn" fill="#412ce3"/><circle cx="210" cy="35" r="15" class="color-btn" fill="#be8a2d"/><circle cx="250" cy="35" r="15" class="color-btn" fill="#77e94e"/><g class="shape-group" transform="translate(445, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="rect"/><rect x="5" y="7.5" width="20" height="15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(485, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="polyline"/><polyline points="5,15 12.5,10 17.5,20 25,15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(525, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="polygon-3"/><polygon points="15,7 25,23 5,23" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g id="drawing-area" clip-path="url(#canvas-clip)"><path stroke-linecap="round" stroke-linejoin="round" stroke="#000000" stroke-width="15" d="M167 731 L162 711 L140 701 L107 688 L151 678 L151 655 L135 704 L99 751 L135 775 L94 740 L64 712 L79 730 L52 704 L90 735 L84 735 L126 689 L158 643 L163 615 L169 658 L120 620 L103 654 L152 702 L183 715 L229 692 L207 670 L207 700 L208 656 L242 679 L240 692 L213 732 L262 688 L219 652 L268 690 L256 699 L305 748 L330 751 L369 729 L341 715 L356 728 L315 769 L338 738 L378 784 L419 734 L390 766 L386 782 L405 815 L410 783 L401 814 L386 769 L346 786 L298 798 L258 826 L216 791 L169 803 L181 793 L135 781 L115 738 L135 777 L159 744 L162 713 L196 719 L241 673 L265 718 L287 764 L252 764 L292 777 L275 758 L246 781 L227 777 L268 785 L246 814 L246 780 L244 817 L252 826 L260 841 L217 866 L200 848 L248 830 L296 806 L279 819 L322 773 L298 773 L322 820 L337 795 L321 757 L342 777 L339 766 L382 749 L428 773 L441 810 L427 814 L454 809 L469 777 L468 777 L476 776 L525 780 L516 761 L473 773 L472 775 L444 796 L402 778 L397 791 L441 775 L394 777 L369 777 L390 799 L408 804 L444 849 L429 840 L451 852 L462 873 L469 828 L514 851 L491 900 L485 861 L502 868 L495 828 L527 783 L522 779 L513 826 L485 826 L435 792 L388 790 L388 825 L369 776 L334 753 L331 793 L321 842 L272 849 L289 853 L290 828 L246 836 L273 861 L251 892 L204 903 L241 853 L272 843 L280 812 L310 814 L283 825 L259 828 L261 794 L249 817 L299 804 L254 847 L215 855 L260 899 L275 924 L237 954 L220 946 L186 965 L234 997 L231 1000 L182 1000 L222 986 L217 943 L204 948 L249 956 L288 987 L322 968 L317 951 L315 993 L331 989 L346 968 L366 972 L352 999 L349 954 L388 964 L368 959 L348 956 L324 918 L352 968 L338 1000 L367 979 L367 1000 L371 999 L328 988 L348 967 L382 938 L400 952 L448 1000 L404 1000 L371 1000 L372 1000 L360 954 L343 985 L311 1000 L263 950 L219 918 L209 884 L242 904 L235 886 L228 868 L181 855 L139 825 L124 792 L139 841 L146 794 L183 833 L219 807 L246 789 L196 813 L217 769 L178 788 L217 798 L254 759 L204 712 L217 676 L229 663 L195 639 L232 660 L184 649 L197 623 L182 594 L171 548 L202 514 L163 529 L208 579 L180 548 L209 552 L255 511 L267 480 L295 489 L311 441 L355 478 L333 431 L358 427 L333 452 L322 420 L310 448 L307 404 L327 389 L301 376 L262 397 L247 364 L288 387 L294 409 L285 383 L265 379 L216 336 L211 361 L185 337 L230 366 L237 366 L260 347 L241 394 L238 395 L250 355 L254 398 L216 354 L244 370 L226 380 L274 367 L275 370 L244 366 L244 401 L278 427 L236 475 L188 516 L228 558 L246 567 L270 560 L254 587 L292 605 L257 633 L270 583 L292 577 L339 549 L358 556 L406 597 L362 621 L398 632 L385 681 L376 658 L341 630 L327 671 L356 707 L335 690 L335 664 L295 626 L295 604 L341 578 L378 598 L391 641 L384 661 L351 623 L396 670 L389 665 L435 672 L427 640 L446 657 L425 608 L467 596 L418 580 L456 570 L419 560 L389 597 L378 581 L401 615 L374 626 L407 628 L410 668 L433 635 L440 659 L415 668 L402 707 L422 703 L466 733 L482 780 L514 777 L560 814 L539 834 L558 793 L526 843 L514 831 L551 856 L538 905 L503 872 L552 849 L564 850 L598 894 L621 929 L573 887 L616 844 L650 820 L631 852 L653 866 L649 856 L599 844 L620 850 L646 821 L605 794 L620 784 L646 827 L601 841 L599 855 L568 843 L569 806 L619 808 L666 819 L714 862 L691 857 L727 819 L741 833 L759 834 L728 841 L705 869 L714 870 L754 888 L796 865 L826 894 L795 937 L819 945 L829 919 L847 964 L799 976 L824 939 L863 955 L837 945 L825 916 L816 900 L855 915 L837 887 L841 908 L864 875 L864 867 L868 864 L831 840 L781 832 L737 841 L764 826 L766 789 L802 749 L790 793 L754 797 L795 828 L763 861 L715 861 L744 885 L766 921 L745 920 L698 938 L695 945 L677 953 L635 995 L647 1000 L638 1000 L684 981 L674 1000 L649 995 L690 1000 L671 1000 L632 1000 L614 993 L636 946 L631 968 L608 979 L636 962 L660 925 L632 925 L676 957 L706 987 L682 1000 L652 1000 L691 962 L648 987 L644 982 L658 989 L608 978 L646 952 L660 935 L651 945 L671 920 L659 896 L708 879 L726 913 L703 957 L685 980 L660 1000 L706 961 L678 936 L692 903 L645 864 L638 840 L684 799 L725 765 L677 777 L713 771 L728 757 L697 741 L712 717 L746 702 L782 747 L739 717 L765 684 L721 672 L757 626 L764 598 L792 554 L834 557 L851 531 L805 499 L852 539 L877 529 L921 535 L888 573 L911 600 L926 580 L882 594 L928 549 L916 542 L867 589 L850 563 L810 518 L815 545"/><path stroke-linecap="round" stroke-linejoin="round" stroke="#ffffff" stroke-width="15" d="M21 406 L1 413 L1 462 L1 440 L1 400 L20 350 L35 360 L47 353 L83 355 L109 400 L107 422 L71 394 L42 425 L7 406 L15 449 L41 483 L79 526 L71 576 L60 540 L68 583 L47 630 L95 664 L113 699 L121 653 L143 619 L182 658 L159 618 L127 665 L99 696 L149 731 L165 681 L154 722 L116 741 L67 709 L117 717 L101 702 L138 665 L135 668 L97 621 L87 610 L63 630 L93 662 L95 680 L68 651 L47 651 L21 635 L19 605 L1 631 L1 677 L1 716 L1 686 L42 716 L69 700 L98 731 L81 777 L120 827 L104 811 L118 771 L145 765 L169 777 L145 761 L111 737 L139 763 L187 751 L142 794 L104 788 L150 818 L108 854 L146 874 L119 885 L153 863 L190 825 L147 855 L128 840 L92 805 L107 773 L100 804 L63 778 L86 776 L63 730 L57 759 L8 788 L48 741 L16 725 L1 703 L32 706 L3 682 L20 680 L49 638 L18 612 L65 607 L34 640 L49 664 L36 700 L33 691 L34 737 L27 748 L70 774 L50 746 L85 722 L114 735 L162 687 L169 732 L160 774 L192 813 L206 857 L228 826 L181 808 L161 811 L202 845 L152 834 L150 856 L157 814 L136 858 L95 832 L45 791 L3 775 L1 778 L1 791 L1 791 L1 809 L49 800 L12 795 L4 835 L24 793 L44 777 L41 791 L31 799 L33 793 L79 770 L122 806 L134 781 L137 802 L184 781 L150 795 L125 780 L134 766 L163 740 L117 702 L166 680 L210 702 L185 674 L232 706 L204 679 L252 720 L238 697"/><path stroke-linecap="round" stroke-linejoin="round" stroke="#000000" stroke-width="15" d="M458 662 L418 623 L401 588 L420 632 L422 678 L428 633 L468 612 L487 572 L466 584 L459 565 L470 583 L492 621 L523 599 L504 571 L457 531 L485 523 L452 536 L486 568 L471 590 L508 580 L543 562 L575 592 L577 552 L591 576 L599 579 L640 536 L606 509 L621 523 L631 536 L615 575 L610 573 L635 564 L605 593 L571 579 L586 576 L556 527 L511 489 L555 445 L513 471 L538 490 L508 513 L473 504 L495 483 L532 441 L525 449 L531 468 L561 418 L527 388 L527 437 L503 401 L467 443 L424 432 L388 469 L340 519 L361 488 L311 485 L328 531 L369 511 L379 476 L357 479 L342 508 L345 555 L304 588 L344 612 L309 606 L342 599 L355 613 L379 644 L365 693 L383 735 L364 760 L398 803 L448 798 L430 799 L406 833 L434 870 L442 869 L399 874 L386 853 L434 816 L440 866 L417 817 L380 783 L423 828 L469 877 L438 915 L459 913 L506 926 L531 890 L534 848 L523 879 L482 923 L447 884 L435 857 L475 839 L462 859 L437 898 L474 849 L458 845 L412 864 L395 821 L408 858 L376 899 L391 858 L378 845 L381 863 L343 861 L305 889 L309 888 L284 920 L322 932 L336 886 L363 872 L341 884 L365 887 L379 936 L389 901 L407 893 L401 863 L375 842 L416 828 L406 865 L419 891 L422 888 L432 906 L454 868 L498 818 L461 784 L511 773 L468 763 L429 743 L449 761 L453 794 L413 795 L460 796 L468 785 L454 833 L416 880 L428 900 L416 895 L441 916 L411 931 L428 935 L412 964 L385 931 L411 918 L414 911 L393 909 L380 907 L390 882 L388 895 L375 880 L359 925 L388 968 L355 960 L389 920 L376 923 L369 878 L390 911 L362 893 L397 864 L443 900 L406 922 L360 970 L369 957 L406 945 L377 986 L407 941 L450 956 L495 973 L482 1000 L515 960 L512 924 L505 898 L553 887 L588 863 L583 868 L583 850 L548 883 L525 892 L504 922 L548 912 L571 875 L579 881 L534 879 L534 830 L579 872 L597 863 L580 835 L592 854 L606 841 L590 833 L630 811 L633 858 L613 890 L578 847 L625 865 L612 830 L595 809 L558 769 L606 730 L598 740 L595 736 L611 768 L655 787 L622 804 L626 761 L630 768 L585 777 L591 824 L553 860 L603 904 L641 862 L631 881 L642 913 L603 878 L563 910 L559 932 L539 981 L574 939 L594 912 L635 940 L596 971 L558 952 L521 963 L514 920 L533 904 L524 917 L573 886 L623 863 L620 872 L589 907 L570 955 L609 927 L585 935 L613 928 L637 961 L594 911 L576 924 L551 941 L596 905 L637 898 L685 898 L669 942 L650 908 L609 873 L642 834 L676 867 L683 820 L698 770 L715 761 L710 723 L733 706 L739 684 L761 640 L769 666 L775 623 L729 604 L707 569 L757 603 L768 563 L760 582 L742 541 L724 584 L691 566 L737 605 L741 569 L697 585 L682 547 L712 545 L685 531 L669 549 L717 504 L686 484 L665 529 L619 486 L569 526 L548 572 L538 568 L583 604 L621 651 L590 678 L612 655 L575 696 L535 676 L543 685 L507 638 L498 595 L535 596 L561 568 L585 547 L581 560 L619 531 L660 527 L637 529 L684 520 L711 549 L742 593 L729 605 L762 560 L794 533 L749 488 L776 489 L795 478 L839 499 L846 483 L894 506 L847 525 L808 522 L839 552 L884 591 L914 634 L882 668 L861 692 L812 691 L767 664 L763 685 L741 664 L790 695 L773 690 L752 683 L724 670 L725 633 L706 665 L746 642 L771 635 L794 606 L831 571 L803 544 L810 543 L844 551 L854 502 L899 528 L918 557 L932 565 L904 555 L884 565 L842 565 L823 546 L773 553 L809 536 L808 511 L845 546 L811 581 L837 615 L838 651 L841 670 L803 684 L753 672 L777 624 L744 583 L785 588 L812 615 L817 587 L768 591 L803 639 L753 685 L753 665 L714 631 L750 616 L739 648 L769 645 L728 645 L738 624 L768 589 L732 614 L682 592 L714 564 L754 548 L784 511 L792 518 L755 529 L780 520 L792 529 L771 567 L766 543 L754 518 L710 490 L740 477 L709 463 L669 426 L642 452 L642 448 L639 447 L672 416 L719 464 L746 438 L775 418 L802 373 L820 378 L841 424 L859 455 L853 444 L869 494 L899 498 L941 509 L976 546 L982 513 L1000 483 L961 480 L993 470 L975 421 L936 373 L903 422 L880 438 L894 450 L890 471 L884 478 L884 487 L916 440 L942 393 L899 440 L949 477 L943 449 L972 446 L985 486 L957 489 L921 525 L927 521 L904 489 L909 536 L918 568 L890 524 L845 552 L888 506 L894 484 L869 507 L884 543 L929 576 L880 526 L881 576 L891 604 L846 562 L844 565 L892 603 L864 599 L842 603 L847 613 L803 596 L778 639 L739 684 L726 680 L757 722 L798 709 L820 756 L870 727 L866 764 L829 785 L812 762 L773 812 L762 807 L716 785 L746 743 L730 782 L774 770 L769 817 L804 810 L818 828 L797 870 L821 887 L813 880 L802 872 L836 901 L832 922 L845 956 L873 928 L904 964 L922 935 L904 934 L854 922 L880 893 L920 879 L910 903 L957 865 L986 870 L1000 889 L1000 907 L1000 875 L1000 852 L950 887 L957 924 L945 875 L940 831 L913 828 L864 795 L851 764 L889 782 L839 801 L835 786 L861 792 L842 771 L836 785 L788 737 L819 761 L831 807 L823 838 L847 873 L829 841 L831 881 L876 854 L868 837 L918 811 L966 853 L944 872 L963 910 L970 955 L1000 955 L982 1000 L956 1000 L948 975 L997 964 L1000 965 L978 956 L935 989 L910 942 L959 949 L1000 965 L1000 998 L972 1000 L955 998 L968 996 L919 1000 L960 1000 L976 972 L976 961 L970 1000 L939 992 L987 1000 L939 1000 L931 1000 L941 983 L940 957 L939 918 L902 948 L921 907 L904 885 L915 929 L880 903 L882 927 L857 877 L877 856 L889 812 L875 855 L909 859 L907 899 L926 944 L877 973 L908 1000 L913 1000 L927 963 L888 965 L922 922 L888 909 L894 921 L882 897 L841 900 L855 926 L902 906 L860 908 L892 898 L899 851 L942 864 L947 838 L936 877 L892 848 L851 891 L876 885 L923 887 L899 918 L903 946 L885 903 L904 892 L865 872 L915 882 L887 900 L877 950 L901 969 L878 931 L873 978 L923 960 L896 998 L900 975 L877 1000 L855 978 L879 953 L837 955 L849 947 L818 964 L852 962 L880 990 L863 956 L846 941 L802 932 L806 923 L791 940 L785 984 L793 1000 L831 965 L847 1000 L871 989 L887 996 L908 994 L943 985 L942 969 L961 924 L1000 953 L1000 936 L951 930 L976 919 L1000 888 L954 897 L976 859 L954 832 L960 859 L948 894 L995 853 L1000 897 L1000 873 L1000 912 L1000 937 L1000 894 L1000 868 L990 860 L1000 864 L1000 879 L1000 868 L1000 827 L1000 786 L1000 836 L972 796 L934 794 L911 762 L868 804 L914 850 L939 897 L926 920 L887 934 L892 926 L877 882 L894 911 L917 870 L962 890 L994 911 L957 953 L918 971 L877 1000 L904 1000 L896 991 L894 966 L911 997 L921 977 L928 952 L953 966 L950 948 L997 912 L988 919 L963 929 L983 929 L988 891 L1000 929 L957 927 L1000 958 L1000 988 L970 949 L942 992 L928 992 L975 994 L996 1000 L974 1000 L932 968 L976 987 L929 962 L942 1000 L931 982 L965 956 L955 944 L973 963 L933 963 L895 982 L847 970 L874 972 L830 953 L796 921 L805 906 L795 875 L807 881 L803 843 L792 843 L777 870 L809 875 L806 836 L768 874 L737 883 L759 839 L775 866 L725 824 L697 850 L711 836 L665 854 L711 824 L689 833 L732 836 L763 812 L804 853 L846 857 L870 818 L877 804 L871 767 L833 797 L858 806 L845 849 L806 823 L841 871 L823 848 L845 874 L828 884 L806 864 L842 871 L846 887 L818 924 L799 911 L772 905 L725 936 L679 895 L645 897 L630 945 L644 942 L686 978 L677 996 L663 966 L684 1000 L638 1000 L667 1000 L622 1000 L670 1000 L685 996 L642 1000 L674 973 L715 1000 L677 987 L724 1000 L738 1000 L750 1000 L789 960 L786 981 L757 937 L721 905 L770 912 L752 904 L764 921 L780 970 L739 925 L691 954 L705 907 L701 905 L711 907 L672 863 L692 814 L679 766 L675 776 L682 740 L723 707 L733 669 L757 711 L804 720 L769 707 L789 671 L776 663 L744 648 L732 601 L754 612 L707 626 L746 674 L748 691 L762 661 L714 680 L756 728 L742 737 L712 721 L686 759 L690 805 L708 851 L700 826 L675 866 L665 842 L682 887 L693 853 L647 822 L651 838 L629 884 L606 846 L601 804 L583 830 L624 804 L588 830 L634 873 L647 849 L629 887 L591 915 L621 939 L582 955 L562 993 L594 949 L576 937 L539 896 L566 900 L550 922 L516 935 L524 949 L574 908 L605 901 L612 861 L637 835 L661 854 L639 807 L600 785 L607 795 L563 765 L552 718 L592 695 L620 684 L623 716 L671 761 L707 800 L735 765 L698 787 L725 747 L763 768 L754 725 L779 697 L809 668 L777 704 L802 747 L820 789 L851 788 L891 803 L854 790 L807 831 L829 807 L779 791 L762 764 L744 753 L723 798 L719 777 L748 826 L703 797 L729 766 L700 764 L720 741 L697 744 L677 753 L654 774 L696 750 L647 703 L693 702 L646 654 L658 697 L610 747 L604 771 L564 721 L612 714 L654 711 L631 701 L665 698 L700 727 L670 750 L660 751 L617 799 L596 759 L611 799 L579 787 L581 820 L629 785 L606 779 L574 735 L586 743 L588 761 L614 772 L609 779 L566 783 L574 736 L602 691 L651 716 L614 667 L584 670 L617 620 L626 659 L632 671 L677 659 L697 674 L666 651 L708 632 L712 660 L736 690 L746 694 L773 664 L755 703 L743 715 L733 765 L738 730 L759 709 L767 704 L746 748 L711 707 L700 709 L734 718 L715 673 L684 686 L722 637 L768 659 L746 659 L705 643 L674 661 L654 612 L673 658 L721 694 L675 737 L681 694 L682 732 L650 756 L660 728 L635 738 L637 702 L599 653 L557 674 L515 661 L526 617 L484 587 L515 593 L482 620 L444 591 L492 565 L464 567 L479 580 L484 608 L455 614 L408 565 L372 562 L381 543 L389 527 L385 536 L341 541 L338 491 L318 445 L327 437 L355 405 L386 367 L415 377 L443 355"/><path stroke-linecap="round" stroke-linejoin="round" stroke="#ffffff" stroke-width="15" d="M766 866 L777 903 L745 912 L788 874 L833 859 L878 835 L923 840 L911 799 L921 822 L967 796 L973 776 L1000 819 L1000 806 L972 815 L934 811 L933 795 L978 775 L1000 728 L981 693 L935 711 L959 670 L969 671 L921 690 L955 718 L1000 726 L994 737 L965 740 L976 761 L1000 752 L1000 722 L968 686 L1000 674 L972 709 L972 666 L989 699 L1000 662 L975 712 L1000 684 L964 664 L922 629 L891 654 L937 629 L962 604 L1000 629 L988 605 L971 643 L970 620 L985 626 L1000 665 L1000 708 L994 723 L1000 732 L972 740 L1000 737 L958 731 L957 758 L942 796 L972 759 L971 709 L1000 692 L1000 673 L952 636 L987 606 L973 637 L954 628 L923 597 L944 574 L928 558 L971 543 L1000 536 L975 495 L978 529 L992 490 L1000 519 L1000 513 L973 558 L963 567 L994 522 L1000 571 L1000 578 L1000 601 L1000 643 L1000 632 L1000 593 L966 572 L921 605 L918 607 L870 603 L905 632 L898 633 L864 653 L823 651 L817 607 L767 594 L745 636 L732 642 L760 662 L740 667 L712 686 L725 714 L696 720 L675 751 L703 772 L663 752 L662 768 L634 752 L594 748 L566 797 L561 824 L563 784 L538 768 L530 725 L504 702 L544 747 L494 747 L486 706 L450 689 L412 658 L394 634 L421 626 L408 671 L454 687 L441 659 L471 657 L487 691 L478 663 L474 661 L487 630 L518 652 L470 669 L497 664 L487 669 L524 706 L567 743 L520 698 L492 683 L473 652 L485 634 L504 678 L520 711 L559 759 L599 749 L590 772 L549 737 L578 737 L619 694 L653 738 L701 779 L686 730 L648 717 L622 676 L669 709 L715 676 L756 644 L729 653 L774 640 L778 628 L828 670 L861 651 L881 660 L919 650 L968 602 L921 610 L894 560 L928 589 L893 634 L856 648 L808 691 L801 727 L756 756 L797 730 L756 694 L758 703 L729 666 L685 649 L654 672 L607 640 L563 682 L590 640 L600 628 L571 598 L534 623"/></g><g class="tool-group"><rect x="575" y="20" width="30" height="30" class="tool-bg active"/><text x="590" y="40" text-anchor="middle" class="tool-button">🖌️</text></g><g class="tool-group"><rect x="615" y="20" width="30" height="30" class="tool-bg"/><text x="630" y="40" text-anchor="middle" class="tool-button">🧽</text></g><g class="tool-group"><rect x="655" y="20" width="30" height="30" class="tool-bg"/><text x="670" y="40" text-anchor="middle" class="tool-button">🪣</text></g><g class="action-group"><rect x="800" y="20" width="40" height="30" class="action-bg clear"/><text x="820" y="40" text-anchor="middle" class="button-text">💣</text><text x="820" y="65" text-anchor="middle" class="toolbar-text">Clear</text></g><g class="action-group"><rect x="860" y="20" width="40" height="30" class="action-bg save"/><text x="880" y="40" text-anchor="middle" class="button-text">💾</text><text x="880" y="65" text-anchor="middle" class="toolbar-text">Save</text></g><g class="action-group"><rect x="920" y="20" width="40" height="30" class="action-bg export"/><text x="940" y="40" text-anchor="middle" class="button-text">📁</text><text x="940" y="65" text-anchor="middle" class="toolbar-text">Export</text></g><text x="150" y="65" text-anchor="middle" class="toolbar-text">Colors</text><text x="350" y="65" text-anchor="middle" class="toolbar-text">Brush Size</text><text x="500" y="65" text-anchor="middle" class="toolbar-text">Shapes</text><text x="630" y="65" text-anchor="middle" class="toolbar-text">Tools</text><script type="text/javascript"><![CDATA[const CANVAS_X = 10;const CANVAS_Y = 90;const CANVAS_WIDTH = 980;const CANVAS_HEIGHT = 900;const drawingArea = document.getElementById('drawing-area');const canvas = document.querySelector('.canvas');const svg = document.querySelector('svg');let isDrawing = false;let currentColor = '#000000';let currentBrushSize = 8;let currentTool = 'brush';let currentShape = 'rect';let paths = [];let currentPath = null;let startPos = null;let currentShapeElement = null;let polylinePoints = [];let polylinePreview = null;const SVG_NS = 'http://www.w3.org/2000/svg';const XHTML_NS = 'http://www.w3.org/1999/xhtml';let svgRect = null;let svgWidth = 1000;let svgHeight = 1000;let displayWidth = 1000;let displayHeight = 1000;function updateCoordinateFactors() {svgRect = svg.getBoundingClientRect();svgWidth = svg.viewBox.baseVal.width;svgHeight = svg.viewBox.baseVal.height;displayWidth = svgRect.width;displayHeight = svgRect.height;}function calculatePosition(clientX, clientY) {if (!svgRect) updateCoordinateFactors();const x = clientX - svgRect.left;const y = clientY - svgRect.top;const rawX = (x * svgWidth) / displayWidth;const rawY = (y * svgHeight) / displayHeight;return {x: Math.round(rawX),y: Math.round(rawY)};}function getMousePos(evt) {return calculatePosition(evt.clientX, evt.clientY);}function getTouchPos(evt) {const touch = evt.touches[0];return calculatePosition(touch.clientX, touch.clientY);}function createSVGElement(tagName, attributes = {}) {const element = document.createElementNS(SVG_NS, tagName);Object.entries(attributes).forEach(([key, value]) => {element.setAttribute(key, value);});return element;}function setActiveElement(selector, activeElement) {document.querySelectorAll(selector).forEach(el => el.classList.remove('active'));if (activeElement) activeElement.classList.add('active');}const shapeConfigs = {rect: (pos) => ({fill: currentColor, x: pos.x, y: pos.y, width: 1, height: 1}),ellipse: (pos) => ({fill: currentColor, cx: pos.x, cy: pos.y, rx: 1, ry: 1}),line: (pos) => ({stroke: currentColor, 'stroke-width': currentBrushSize,x1: pos.x, y1: pos.y, x2: pos.x, y2: pos.y}),'polygon-3': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y} ${pos.x + 1},${pos.y + 1} ${pos.x - 1},${pos.y + 1}`}),'polygon-5': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.3} ${pos.x + 0.3},${pos.y + 0.5} ${pos.x - 0.3},${pos.y + 0.5} ${pos.x - 0.5},${pos.y - 0.3}`}),'polygon-6': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.25} ${pos.x + 0.5},${pos.y + 0.25} ${pos.x},${pos.y + 0.5} ${pos.x - 0.5},${pos.y + 0.25} ${pos.x - 0.5},${pos.y - 0.25}`})};function generatePolygonPoints(centerX, centerY, width, height, sides, offset = 0) {const points = [];for (let i = 0; i < sides; i++) {const angle = (i * 2 * Math.PI) / sides - Math.PI / 2 + offset;const x = Math.round(centerX + (width / 2) * Math.cos(angle));const y = Math.round(centerY + (height / 2) * Math.sin(angle));points.push(x, y);}return points.join(',');}function isWithinCanvas(pos) {return pos.x >= CANVAS_X && pos.x <= CANVAS_X + CANVAS_WIDTH &&pos.y >= CANVAS_Y && pos.y <= CANVAS_Y + CANVAS_HEIGHT;}document.querySelectorAll('.color-btn').forEach(btn => {btn.addEventListener('click', function() {finalizeShape();setActiveElement('.color-btn', this);currentColor = this.getAttribute('fill');});});const brushSlider = document.getElementById('brush-slider-handle');const brushSliderTrack = document.getElementById('brush-slider-track');let isDraggingSlider = false;function updateBrushSizeFromSlider(x) {const trackRect = brushSliderTrack.getBoundingClientRect();const trackLeft = trackRect.left;const trackWidth = trackRect.width;let relativeX = x - trackLeft;relativeX = Math.max(0, Math.min(relativeX, trackWidth));const brushSize = Math.round(1 + (relativeX / trackWidth) * 39);const sliderX = 305 + (relativeX / trackWidth) * 110;brushSlider.setAttribute('cx', sliderX);currentBrushSize = brushSize;const handleRadius = Math.max(4, Math.min(20, brushSize * 0.5));brushSlider.setAttribute('r', handleRadius);}function startSliderDrag(evt) {finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.clientX);}function updateSliderDrag(evt) {if (isDraggingSlider) {updateBrushSizeFromSlider(evt.clientX);}}function stopSliderDrag() {isDraggingSlider = false;}brushSlider.addEventListener('mousedown', startSliderDrag);brushSliderTrack.addEventListener('mousedown', startSliderDrag);document.addEventListener('mousemove', updateSliderDrag);document.addEventListener('mouseup', stopSliderDrag);brushSlider.addEventListener('touchstart', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape !== 'polyline') finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});brushSliderTrack.addEventListener('touchstart', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape !== 'polyline') finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});document.addEventListener('touchmove', function(evt) {if (isDraggingSlider) {evt.preventDefault();updateBrushSizeFromSlider(evt.touches[0].clientX);}});document.addEventListener('touchend', stopSliderDrag);document.querySelectorAll('.tool-group').forEach((group, index) => {group.addEventListener('click', function() {finalizeShape();setActiveElement('.tool-bg', this.querySelector('.tool-bg'));setActiveElement('.shape-group .tool-bg', null);const tools = ['brush', 'eraser', 'bucket'];currentTool = tools[index] || 'brush';});});document.querySelectorAll('.shape-group').forEach((group) => {group.addEventListener('click', function() {finalizeShape();setActiveElement('.shape-group .tool-bg', this.querySelector('.tool-bg'));setActiveElement('.tool-group .tool-bg', null);const shapeType = this.querySelector('.tool-bg').getAttribute('data-shape');currentTool = 'shape';currentShape = shapeType;});});function saveDrawing(storageKey = "colourMeArt") {const drawingElements = Array.from(drawingArea.children).map(element => {const fill = element.getAttribute('fill') === '#none' ? null : hexToBytes3(element.getAttribute('fill'));const object = {shape: getElementShape(element),color: hexToBytes3(element.getAttribute('stroke')) || fill || '0x000000',stroke: parseInt(element.getAttribute('stroke-width') || '0'),points: extractPoints(element)};return object;});if (drawingElements.length > 0) {localStorage.setItem(storageKey, JSON.stringify(drawingElements));} else {localStorage.removeItem(storageKey);}return drawingElements.length > 0 ? drawingElements : null;}function getElementShape(element) {const tagName = element.tagName.toLowerCase();switch (tagName) {case 'rect': return 0;case 'line': return 1;case 'ellipse': return 2;case 'polyline': return 3;case 'polygon': return 4;case 'path': return 5;default: return 5;}}function hexToBytes3(hexColor) {const cleanHex = hexColor.replace('#', '');return '0x' + cleanHex;}function extractPoints(element) {const tagName = element.tagName.toLowerCase();const points = [];switch (tagName) {case 'rect':const x = parseInt(element.getAttribute('x'));const y = parseInt(element.getAttribute('y'));const width = parseInt(element.getAttribute('width'));const height = parseInt(element.getAttribute('height'));points.push({ x: x, y: y });points.push({ x: width, y: height });break;case 'ellipse':const cx = parseInt(element.getAttribute('cx'));const cy = parseInt(element.getAttribute('cy'));const rx = parseInt(element.getAttribute('rx'));const ry = parseInt(element.getAttribute('ry'));points.push({ x: cx, y: cy });points.push({ x: rx, y: ry });break;case 'line':points.push({x: parseInt(element.getAttribute('x1')),y: parseInt(element.getAttribute('y1'))});points.push({x: parseInt(element.getAttribute('x2')),y: parseInt(element.getAttribute('y2'))});break;case 'polyline':const polylinePoints = extractPolylinePoints(element);points.push(...polylinePoints);break;case 'polygon':const polygonPoints = extractPolygonPoints(element);points.push(...polygonPoints);break;case 'path':const pathPoints = extractPathPoints(element);points.push(...pathPoints);break;}return points;}function extractPolylinePoints(element) {const points = [];const pointsAttr = element.getAttribute('points');const coords = pointsAttr.split(/[,\s]+/);for (let i = 0; i < coords.length; i += 2) {points.push({x: parseInt(coords[i]),y: parseInt(coords[i + 1])});}return points;}function extractPolygonPoints(element) {const points = [];const pointsAttr = element.getAttribute('points');const coords = pointsAttr.split(/[,\s]+/);for (let i = 0; i < coords.length; i += 2) {points.push({x: parseInt(coords[i]),y: parseInt(coords[i + 1])});}return points;}function extractPathPoints(element) {const points = [];const d = element.getAttribute('d');const commands = d.match(/[ML]\s*([\d.-]+)\s+([\d.-]+)/g) || [];commands.forEach(cmd => {const parts = cmd.trim().split(/\s+/);if (parts.length >= 3) {points.push({x: parseInt(parts[1]),y: parseInt(parts[2])});}});return points;}function loadDrawing() {const savedData = localStorage.getItem('colourMeArt');const tokenData = saveDrawing('tokenArt');if (savedData) {const contractObjects = JSON.parse(savedData);drawingArea.innerHTML = '';paths = [];contractObjects.forEach(obj => {const element = createElementFromContract(obj);if (element) {drawingArea.appendChild(element);paths.push(element);}});sendMessageToParent('LOAD_DATA', { artData: contractObjects });}}function createElementFromContract(obj) {const element = document.createElementNS(SVG_NS, getElementTag(obj.shape));switch (obj.shape) {case 0:const [pos, size] = obj.points;element.setAttribute('x', pos.x);element.setAttribute('y', pos.y);element.setAttribute('width', size.x);element.setAttribute('height', size.y);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 1:const [start, end] = obj.points;element.setAttribute('x1', start.x);element.setAttribute('y1', start.y);element.setAttribute('x2', end.x);element.setAttribute('y2', end.y);element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);break;case 2:const [center, radius] = obj.points;element.setAttribute('cx', center.x);element.setAttribute('cy', center.y);element.setAttribute('rx', radius.x);element.setAttribute('ry', radius.y);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 3:const polylinePointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');element.setAttribute('points', polylinePointsStr);element.setAttribute('fill', 'none');element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);break;case 4:const polygonPointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');element.setAttribute('points', polygonPointsStr);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 5:const pathData = obj.points.map((p, i) =>`${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ');element.setAttribute('d', pathData);element.setAttribute('fill', 'none');element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);element.setAttribute('stroke-linecap', 'round');element.setAttribute('stroke-linejoin', 'round');break;}return element;}function getElementTag(shape) {const tags = ['rect', 'line', 'ellipse', 'polyline', 'polygon', 'path'];return tags[shape] || 'path';}function bytes3ToHex(bytes3) {const cleanHex = bytes3.replace('0x', '');return '#' + cleanHex;}function exportDrawing() {const contractObjects = saveDrawing();if (!contractObjects) return;const svgElements = contractObjects.map(obj => {const element = createElementFromContract(obj);return element.outerHTML;}).join('');const svgContent = `<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" viewBox="0 0 ${CANVAS_WIDTH} ${CANVAS_HEIGHT}"><rect width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" fill="white" />${svgElements}</svg>`;const dataUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgContent);const link = document.createElementNS(XHTML_NS, 'a');link.href = dataUrl;link.download = 'painting.svg';link.click();}document.querySelectorAll('.action-group').forEach((group, index) => {group.addEventListener('click', function() {const actions = [() => {drawingArea.innerHTML = '';paths = [];saveDrawing();sendMessageToParent('CLEAR_REQUEST');},() => {const tokenArtString = localStorage.getItem('tokenArt');const saveData = saveDrawing();if (saveData) {const saveArtString = JSON.stringify(saveData);if (tokenArtString !== saveArtString) {if (tokenArtString && saveArtString.startsWith(tokenArtString.slice(0, -1))) {const tokenElements = JSON.parse(tokenArtString);const appendElements = saveData.slice(tokenElements.length);sendMessageToParent('SAVE_REQUEST', { artData: appendElements, saveType: 'append' });} else {sendMessageToParent('SAVE_REQUEST', { artData: saveData, saveType: 'set' });}}}},() => exportDrawing()];if (actions[index]) actions[index]();});});function startDrawing(pos) {if (!isWithinCanvas(pos)) return;if (currentTool === 'bucket') {drawingArea.innerHTML = '';paths = [];const fillRect = createSVGElement('rect', {x: CANVAS_X, y: CANVAS_Y, width: CANVAS_WIDTH, height: CANVAS_HEIGHT, fill: currentColor});drawingArea.appendChild(fillRect);paths.push(fillRect);return;}if (currentTool === 'shape') {if (currentShape === 'polyline') {addPolylinePoint(pos);return;} else {startPos = pos;createShapeStart(pos);return;}}isDrawing = true;currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? 'white' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M ${pos.x} ${pos.y} L ${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);}function createShapeStart(pos) {isDrawing = true;const config = shapeConfigs[currentShape];if (config) {const shape = createSVGElement(currentShape === 'line' ? 'line' :currentShape.startsWith('polygon') ? 'polygon' : currentShape, config(pos));drawingArea.appendChild(shape);currentShapeElement = shape;}}function updateShape(pos) {if (!currentShapeElement || !startPos) return;switch (currentShape) {case 'rect':const rectX = Math.min(startPos.x, pos.x);const rectY = Math.min(startPos.y, pos.y);const rectWidth = Math.abs(pos.x - startPos.x);const rectHeight = Math.abs(pos.y - startPos.y);currentShapeElement.setAttribute('x', rectX);currentShapeElement.setAttribute('y', rectY);currentShapeElement.setAttribute('width', rectWidth);currentShapeElement.setAttribute('height', rectHeight);break;case 'ellipse':const ellipseCenterX = (startPos.x + pos.x) / 2;const ellipseCenterY = (startPos.y + pos.y) / 2;const radiusX = Math.abs(pos.x - startPos.x) / 2;const radiusY = Math.abs(pos.y - startPos.y) / 2;currentShapeElement.setAttribute('cx', ellipseCenterX);currentShapeElement.setAttribute('cy', ellipseCenterY);currentShapeElement.setAttribute('rx', radiusX);currentShapeElement.setAttribute('ry', radiusY);break;case 'line':currentShapeElement.setAttribute('x2', pos.x);currentShapeElement.setAttribute('y2', pos.y);break;}}function addPolylinePoint(pos) {polylinePoints.push(pos.x, pos.y);if (polylinePoints.length >= 1000) {const lastX = polylinePoints[polylinePoints.length - 4];const lastY = polylinePoints[polylinePoints.length - 3];finalizeShape();polylinePoints = [lastX, lastY, pos.x, pos.y];currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {if (!currentShapeElement) {currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {currentShapeElement.setAttribute('points', polylinePoints.join(','));}}}function finalizeShape() {if (currentShapeElement) {paths.push(currentShapeElement);}if (polylinePreview) {polylinePreview.remove();polylinePreview = null;}if (currentTool !== 'shape' || currentShape !== 'polyline') {polylinePoints = [];}}function draw(pos) {if (!isDrawing) return;if (currentTool === 'shape' && currentShapeElement && startPos) {updateShape(pos);return;}if (!currentPath || !isWithinCanvas(pos)) return;const currentD = currentPath.getAttribute('d');const pathPoints = currentD.match(/[ML]\s*[\d.-]+\s+[\d.-]+/g) || [];const pointCount = pathPoints.length;if (pointCount >= 500) {const lastX = pathPoints[pathPoints.length - 1].split(' ')[1];const lastY = pathPoints[pathPoints.length - 1].split(' ')[2];currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? 'white' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M ${lastX} ${lastY} L ${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);} else {currentPath.setAttribute('d', currentD + ` L ${pos.x} ${pos.y}`);}}function stopDrawing() {if (currentTool === 'shape' && currentShapeElement && startPos) {finalizeShape();}isDrawing = false;currentPath = null;startPos = null;if (currentTool !== 'shape' || currentShape !== 'polyline') {currentShapeElement = null;}}let mouseMoveThrottle = null;canvas.addEventListener('mousedown', function(evt) {startDrawing(getMousePos(evt));});document.addEventListener('mousemove', function(evt) {if (isDrawing) {if (mouseMoveThrottle) return;mouseMoveThrottle = requestAnimationFrame(() => {draw(getMousePos(evt));mouseMoveThrottle = null;});}if (currentTool === 'shape' && currentShape === 'polyline' && polylinePoints.length > 0) {if (!polylinePreview) {polylinePreview = createSVGElement('line', {stroke: currentColor,'stroke-width': currentBrushSize,'stroke-dasharray': [currentBrushSize*2, currentBrushSize]});drawingArea.appendChild(polylinePreview);}const lastX = polylinePoints[polylinePoints.length - 2];const lastY = polylinePoints[polylinePoints.length - 1];const pos = getMousePos(evt);polylinePreview.setAttribute('x1', lastX);polylinePreview.setAttribute('y1', lastY);polylinePreview.setAttribute('x2', pos.x);polylinePreview.setAttribute('y2', pos.y);if (!isWithinCanvas(pos)) {polylinePreview.remove();polylinePreview = null;}}});document.addEventListener('mouseup', stopDrawing);canvas.addEventListener('touchstart', function(evt) {evt.preventDefault();startDrawing(getTouchPos(evt));}, { passive: false });canvas.addEventListener('touchmove', function(evt) {evt.preventDefault();draw(getTouchPos(evt));}, { passive: false });canvas.addEventListener('touchend', function(evt) {evt.preventDefault();stopDrawing();}, { passive: false });canvas.addEventListener('contextmenu', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {finalizeShape();currentShapeElement = null;polylinePoints = [];}});canvas.addEventListener('dblclick', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {finalizeShape();currentShapeElement = null;polylinePoints = [];}});function sendMessageToParent(type, data = {}) {if (window.parent && window.parent !== window) {window.parent.postMessage({ type, data }, '*');}}window.addEventListener('message', function(event) {const { type, success, message } = event.data;if (type === 'SAVE_RESPONSE') {if (success) {}saveDrawing();}});window.addEventListener('load', function() {updateCoordinateFactors();loadDrawing();const initialBrushSize = currentBrushSize;const sliderX = 305 + ((initialBrushSize - 1) / 39) * 110;brushSlider.setAttribute('cx', sliderX);const initialHandleRadius = Math.max(4, Math.min(20, initialBrushSize * 0.5));brushSlider.setAttribute('r', initialHandleRadius);});]]></script></svg>
<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewBox="0 0 1000 1000"><defs><style>.toolbar {fill: #f0f0f0; stroke: #ccc; stroke-width: 1;}.canvas {fill: white; stroke: #ccc; stroke-width: 1;}#drawing-area {pointer-events: none;}text {font-family: Arial, sans-serif; font-size: 14px; fill: #333;}.toolbar-text {font-size: 12px;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.button-text {font-size: 20px;fill: white;pointer-events: none;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.color-btn, .brush-size, .tool-bg, .action-bg {cursor: pointer;}.color-btn {stroke: #333; stroke-width: 2;}.color-btn:hover {stroke: #777; stroke-width: 3;}.color-btn.active {stroke: #000; stroke-width: 3;}#brush-slider-handle {cursor: grab;}#brush-slider-handle:active {cursor: grabbing;}#brush-slider-track {cursor: pointer;}.tool-button {font-size: 20px;fill: #666;transition: fill 0.2s;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.tool-button:hover {fill: #333;}.tool-button.active {fill: #333;}.tool-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.tool-bg:hover {fill: #e0e0e0; stroke: #999;}.tool-bg.active {fill: #333; stroke: #333;}.tool-bg.active:hover {fill: #444; stroke: #444;}.tool-group {cursor: pointer;}.tool-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.tool-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group {cursor: pointer;}.shape-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.shape-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group .tool-bg.active ~ .shape-icon {stroke: white !important;}.shape-btn { cursor: pointer; }.action-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.action-bg:hover {fill: #e0e0e0; stroke: #999;}.action-bg.clear {fill: #ffebee; stroke: #ffcdd2;}.action-bg.clear:hover {fill: #ffcdd2; stroke: #ef9a9a;}.action-bg.save {fill: #e8f5e8; stroke: #c8e6c9;}.action-bg.save:hover {fill: #c8e6c9; stroke: #a5d6a7;}.action-bg.export {fill: #e3f2fd; stroke: #bbdefb;}.action-bg.export:hover {fill: #bbdefb; stroke: #90caf9;}</style><rect id="canvas-bg" x="10" y="90" width="980" height="900" rx="5"/><clipPath id="canvas-clip"><use href="#canvas-bg"/></clipPath></defs><rect width="1000" height="1000" fill="#e8e8e8"/><use href="#canvas-bg" class="canvas"/><rect x="10" y="10" width="980" height="70" class="toolbar" rx="5"/><g id="brush-size-controls"><rect x="300" y="25" width="120" height="20" fill="#f0f0f0" stroke="#ccc" stroke-width="1" rx="10"/><rect id="brush-slider-track" x="305" y="27.5" width="110" height="15" fill="#ddd" rx="7.5"/><circle id="brush-slider-handle" cx="310" cy="35" r="8" fill="#4CAF50" stroke="#45a049" stroke-width="2" cursor="pointer"/></g><circle cx="50" cy="35" r="15" class="color-btn active" fill="#000000"/><circle cx="90" cy="35" r="15" class="color-btn" fill="#6a497c"/><circle cx="130" cy="35" r="15" class="color-btn" fill="#7148dc"/><circle cx="170" cy="35" r="15" class="color-btn" fill="#30cb3d"/><circle cx="210" cy="35" r="15" class="color-btn" fill="#d47262"/><circle cx="250" cy="35" r="15" class="color-btn" fill="#e66377"/><g class="shape-group" transform="translate(445, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="rect"/><rect x="5" y="7.5" width="20" height="15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(485, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="line"/><line x1="5" y1="10" x2="25" y2="20" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(525, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="polygon-5"/><polygon points="15,5 25,12 20,22.5 10,22.5 5,12" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g id="drawing-area" clip-path="url(#canvas-clip)" data-token="1"><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#000000" stroke-width="15" d="M492 537 L519 552 L560 518 L598 555 L633 526 L679 476 L703 506 L721 543 L734 509 L726 464 L741 509 L749 494 L797 456 L809 420 L840 406 L832 360 L831 357 L786 366 L820 391 L799 350 L787 375 L805 378 L848 409 L870 428 L869 417 L884 423 L836 418 L842 419 L819 420 L802 379 L837 346 L793 362 L786 326 L744 372 L719 378 L761 407 L808 399 L814 431 L855 461 L894 441 L853 439 L893 461 L899 439 L887 392 L888 439 L860 428 L867 397 L879 394 L917 412 L948 363 L900 392 L901 440 L932 430 L922 471 L942 476 L950 488 L911 510 L867 541 L825 564 L809 549 L810 554 L782 576 L758 598 L750 607 L730 603 L731 594 L749 601 L780 610 L799 643 L794 684 L843 645 L893 689 L927 639 L945 669 L970 666 L937 633 L972 677 L1000 700 L1000 701 L974 731 L1000 701 L1000 742 L973 776 L942 729 L987 722 L1000 688 L953 681 L960 731 L979 689 L991 737 L959 778 L981 797 L957 792 L971 829 L1000 781 L1000 757 L1000 780 L1000 730 L1000 755 L963 745 L935 723 L917 733 L904 742 L929 776 L921 777 L964 818 L963 817 L966 848 L983 817 L986 772 L956 810 L968 832 L993 808 L982 788 L932 787 L940 810 L951 792 L974 818 L1000 855 L950 889 L985 859 L1000 835 L992 813 L999 831 L998 847 L1000 888 L987 884 L1000 900 L1000 933 L1000 937 L987 969 L993 997 L945 1000 L937 998 L890 1000 L901 950 L936 919 L901 961 L922 956 L934 991 L945 982 L908 1000 L943 1000 L912 986 L954 1000 L964 1000 L1000 1000 L1000 960 L1000 1000 L956 977 L961 957 L958 908 L935 892 L926 903 L961 854 L977 805 L961 820 L988 791 L1000 792 L1000 778 L1000 752 L1000 794 L1000 816 L1000 810 L1000 834 L977 865 L1000 837 L1000 799 L1000 831 L1000 871 L1000 832 L1000 875 L1000 913 L951 886 L964 900 L974 853 L930 900 L907 928 L888 972 L855 939 L850 947 L851 909 L852 866 L896 913 L883 903 L875 893 L924 903 L960 890 L1000 861 L980 839 L948 807 L905 799 L864 781 L845 759 L895 789 L939 795 L969 751 L955 709 L990 737 L971 775 L970 779 L970 771 L924 750 L887 775 L925 753 L967 748 L952 740 L1000 691 L999 689 L1000 700 L1000 700 L971 725 L960 745 L944 773 L983 810 L989 833 L995 839 L969 846 L986 832 L1000 859 L960 892 L963 873 L928 922 L902 925 L919 950 L949 953 L960 951 L950 995 L909 991 L890 966 L880 1000 L891 1000 L911 1000 L913 955 L880 922 L833 940 L829 919 L876 910 L846 936 L836 959 L819 943 L797 959 L825 946 L788 995 L752 967 L774 988 L767 979 L775 931 L737 897 L701 929 L676 974 L722 996 L745 961 L698 914 L714 934 L676 910 L662 939 L705 934 L686 940 L680 939 L685 935 L671 966 L711 1000 L747 1000 L755 1000 L716 1000 L744 1000 L785 1000 L782 955 L811 961 L822 930 L872 912 L915 865 L914 915 L936 935 L972 954 L961 920 L931 941 L958 986 L925 1000 L895 1000 L869 1000 L863 1000 L836 1000 L815 964 L848 920 L863 886 L821 838 L793 874 L755 901 L757 865 L745 835 L725 864 L753 818 L771 837 L737 851 L768 814 L737 838 L690 865 L727 914 L734 885 L708 842 L744 815 L702 836 L726 863 L753 884 L792 917 L765 951 L751 936 L787 952 L786 965 L738 993 L704 1000 L659 971 L645 945 L664 974 L623 1000 L633 1000 L588 958 L634 971 L631 1000 L584 981 L557 939 L575 937 L588 894 L613 915 L630 940 L596 925 L568 962 L548 913 L557 920 L508 931 L465 958 L416 916 L414 925 L366 884 L402 903 L431 917 L452 882 L472 920 L477 877 L456 899 L449 868 L494 827 L526 778 L564 754 L613 711 L637 675 L641 710 L608 692 L654 672 L605 630 L624 591 L660 639 L673 648 L668 677 L675 699 L627 726 L657 676 L626 664 L641 650 L610 647 L620 627 L669 613 L682 649 L669 636 L636 619 L653 610 L691 595 L739 609 L706 566 L725 569 L760 561 L735 526 L707 564 L661 556 L651 535 L625 569 L661 573 L677 614 L646 600 L681 587 L677 614 L703 635 L742 662 L710 693 L682 648 L656 666 L627 670 L623 669 L574 675 L614 643 L588 632 L581 678 L547 651 L529 605 L550 608 L512 626 L514 632 L496 652 L467 642 L434 673 L453 681 L413 643 L427 675 L449 679 L433 656 L401 688 L425 684 L454 668 L442 642 L403 634 L368 662 L343 642 L303 641 L298 674 L280 671 L261 672 L237 650 L259 690 L232 713 L193 759 L149 797 L141 776 L148 784 L125 736 L158 720 L155 740 L156 716 L159 683 L198 725 L162 725 L140 705 L161 692 L121 683 L74 647 L83 658 L131 706 L162 738 L155 735 L171 692 L208 722 L244 684 L263 635 L270 655 L241 627 L242 663 L227 655 L268 680 L225 680 L189 647 L187 679 L222 678 L269 641 L288 683 L279 713 L260 726 L220 713 L218 723 L231 696 L195 739 L160 754 L176 775 L163 758 L163 795 L150 809 L180 824 L225 802 L238 848 L287 898 L309 888 L265 930 L255 882 L218 877 L235 899 L202 878 L245 880 L211 919 L214 921 L220 938 L207 931 L159 973 L197 972 L180 926 L194 906 L243 926 L224 899 L255 871 L263 874 L232 856 L224 859 L268 812 L306 816 L273 784 L306 747 L289 728 L244 692 L227 685 L264 703 L271 724 L255 751 L237 747 L209 763 L237 738 L278 749 L277 743 L286 758 L322 798 L355 848 L394 811 L387 814 L352 812 L341 844 L292 805 L311 755 L320 736 L332 770 L286 779 L332 730 L288 688 L337 706 L348 665 L309 667 L353 621 L370 614 L326 631 L363 627 L314 655 L331 700 L375 650 L355 700 L375 652 L357 701 L404 701 L360 670 L336 706 L303 670 L351 686 L321 695 L317 660 L345 614 L387 601 L368 589 L338 544 L303 593 L293 631 L271 589 L237 610 L219 652 L258 643 L253 619 L283 636 L321 608 L345 570 L301 532 L253 529 L297 535 L339 582 L369 561 L325 527 L356 547 L361 538 L347 539 L337 554 L333 602 L380 566 L351 609 L346 607 L356 589 L403 587 L404 633 L382 674 L411 653 L373 667 L367 623 L357 580 L323 554 L355 591 L369 549 L403 541 L440 502 L441 500 L491 457 L445 416 L425 383 L413 428 L369 462 L390 457 L370 410 L409 431 L448 448 L439 431 L480 474 L490 457 L533 503 L565 534 L592 550 L552 547 L569 569 L542 612 L555 611 L572 571 L594 574 L621 574 L638 573 L658 538 L625 521 L631 560 L669 601 L697 573 L725 535 L741 499 L692 544 L685 513 L686 478 L725 461 L697 475 L647 480 L662 479 L694 475 L664 459 L666 482 L657 507 L638 507 L624 542 L619 527 L606 542 L596 538 L636 539 L586 547 L576 504 L556 502 L597 530 L641 574 L645 582 L657 562 L632 597 L644 617 L671 622 L667 656 L656 659 L678 620 L722 628 L691 665 L683 619 L718 600 L765 614 L741 647 L722 606 L757 592 L796 641 L810 604 L827 564 L862 584 L830 563 L834 611 L865 628 L846 579 L847 589 L864 631 L834 637 L853 608 L880 572 L888 589 L936 594 L970 569 L1000 566 L1000 534 L1000 557 L956 592 L961 631 L912 641 L933 599 L981 642 L1000 608 L1000 605 L958 595 L974 633 L965 670 L930 631 L916 620 L955 624 L957 603 L935 589 L971 572 L934 557 L908 583 L923 618 L932 601 L978 646 L1000 661 L978 701 L963 682 L994 694 L1000 646 L981 614 L958 597 L984 615 L969 574 L973 556 L971 516 L957 517 L937 491 L897 509 L873 511 L871 528 L902 491 L897 510 L927 514 L977 504 L952 454 L928 477 L897 512 L885 538 L888 498 L881 526 L881 489 L929 501 L938 548 L915 596 L953 605 L905 648 L884 679 L906 715 L892 746 L855 706 L823 664 L844 667 L875 637 L893 653 L901 603 L939 567 L946 588 L945 561 L899 607 L948 636 L929 591 L888 639 L920 615 L930 571 L949 587 L899 606 L913 605 L892 555 L898 519 L927 531 L899 558 L908 526 L900 479 L947 465 L919 459 L876 501 L833 515 L875 507 L854 481 L859 492 L863 455 L829 451 L799 405 L808 432 L817 408 L859 393 L880 437 L888 430 L869 380 L830 337 L841 387 L823 371 L785 345 L779 374 L737 410 L717 374 L669 359 L683 322 L724 341 L774 305 L817 324 L857 312"/><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#ffffff" stroke-width="15" d="M661 668 L623 677 L631 664 L584 670 L558 648 L577 649 L574 655 L614 624 L573 578 L538 592 L571 583 L533 552 L513 527 L544 480 L513 455 L465 423 L458 378 L496 382 L494 427 L528 451 L551 402 L563 363 L586 353 L581 397 L617 416 L579 456 L574 438 L624 464 L610 483 L561 531 L597 484 L612 496 L562 468 L513 428 L490 422 L452 422 L499 442 L485 444 L528 413 L500 411 L489 419 L525 377 L565 372 L539 347 L534 374 L536 334 L579 305 L548 342 L543 368 L515 318 L553 310 L554 338 L577 313 L568 301 L597 327 L638 347 L659 365 L701 406 L658 405 L630 454 L639 491 L642 505 L666 493 L710 454 L680 434 L644 420 L636 455 L678 426 L696 439 L658 435 L663 390 L636 385 L673 418 L669 410 L698 434 L695 384 L740 361 L725 383 L747 430 L746 450 L721 447 L687 487 L737 523 L699 526 L748 560 L703 528 L721 526 L730 576 L700 548 L741 499 L720 537 L708 537 L679 573 L630 535 L581 506 L574 513 L560 538 L550 539 L523 492 L573 520 L564 492 L607 482 L571 510 L540 493 L583 536 L551 506 L518 512 L557 545 L566 588 L568 619 L605 593 L610 553 L610 557 L600 570 L594 600 L545 558 L564 550 L600 563 L584 549 L571 577 L577 567 L586 579 L554 529 L506 563 L489 582 L512 631 L502 640 L547 684 L523 659 L525 706 L475 659 L477 613 L478 623 L474 621 L444 669 L468 691 L496 657 L544 655 L536 702 L544 664 L583 672 L629 657 L622 690 L593 666 L553 645 L598 660 L575 631 L527 640 L510 610 L543 605 L584 610 L545 583 L573 562 L562 542 L532 494 L568 530 L532 568 L574 530 L565 504 L576 527 L584 497 L569 472 L582 470 L568 482 L597 529 L635 485 L611 442 L615 470 L625 499 L599 501 L582 461 L569 488 L607 516 L586 499 L632 464 L622 416 L581 438 L609 454 L640 470 L647 463 L680 485 L702 444 L661 402 L710 450 L686 420 L654 463 L646 470 L685 467 L682 450 L701 433 L711 400 L733 434 L744 453 L717 486 L684 441 L695 437 L646 439 L638 488 L635 521 L618 555 L652 581 L614 534 L611 518 L626 540 L581 497 L624 537 L659 488 L657 478 L635 479 L655 484 L642 509 L670 510 L685 557 L689 507 L733 484 L694 441 L730 396 L778 387 L819 421 L844 377 L886 392 L882 430 L859 424 L887 385 L884 423 L874 386 L849 378 L847 365 L840 370 L828 403 L863 356 L817 365 L814 393 L771 425 L763 423 L766 374 L736 349 L713 343 L732 344 L741 394 L739 363 L726 364 L733 380 L690 359 L681 384 L701 423 L688 409 L678 385 L724 370 L738 395 L745 373 L740 399 L748 436 L729 455 L776 485 L758 441 L787 438 L738 425 L693 382 L705 352 L719 336 L672 291 L691 285 L728 330 L746 311 L745 352 L719 327 L726 324 L709 291 L682 288 L667 257 L700 281 L660 299 L665 271 L708 251 L703 283 L672 302 L636 347 L636 372 L590 396 L596 357 L634 384 L610 414 L573 384 L546 416 L549 386 L575 428 L622 403 L656 392 L624 367 L619 341 L622 350 L662 312 L648 361 L608 358 L634 374 L672 376 L679 358 L668 365 L640 344 L597 308 L592 336 L596 315 L624 302 L644 282 L683 292 L713 319 L680 274 L730 321 L746 351 L711 338 L724 308 L722 259 L718 237 L694 200 L672 188 L696 176 L661 195 L626 192 L603 145 L645 122 L604 106 L628 97 L626 117 L655 150 L667 165 L709 150 L672 110 L683 90 L691 81 L676 39 L677 54 L655 102 L628 148 L631 124 L587 111 L588 135 L546 133 L521 89 L524 78 L551 54 L501 60 L542 10 L586 50 L626 92 L664 105 L619 135 L587 169 L593 198 L572 198 L530 197 L511 206 L490 214 L448 167 L428 201 L470 244 L450 259 L410 234 L430 277 L409 307 L393 282 L397 260 L366 234 L375 236 L396 285 L438 334 L451 330 L444 301 L482 279 L479 234 L500 251 L498 272 L539 301 L571 279 L550 261 L510 249 L463 266 L413 288 L366 336 L379 341 L402 302 L417 350 L452 304 L429 298 L426 311 L470 327 L454 317 L460 341 L457 311 L487 333 L449 381 L408 416 L421 452 L383 500 L344 506 L315 539 L310 544 L317 556 L280 588 L292 538 L335 498 L341 473 L382 511 L344 496 L324 525 L322 484 L362 447 L318 467 L355 426 L371 416 L392 435 L436 478 L450 447 L430 472 L460 426 L414 444 L454 407 L480 399 L471 432 L455 415 L505 409 L545 421 L542 411 L548 457 L522 416 L546 390 L566 352 L572 361 L621 381 L602 373 L634 374 L639 329 L623 366 L623 334 L603 316 L618 274 L631 265 L626 311 L596 286 L584 263 L593 305 L593 297 L626 308 L647 274 L639 244 L678 209 L645 186 L656 203 L687 249 L641 240 L659 253 L686 266 L698 298 L745 252 L770 229 L730 268 L728 309 L749 351 L785 350 L809 316 L810 318 L852 328 L810 301 L837 342 L884 305 L908 310 L954 279 L956 277 L913 239 L952 280 L910 293 L954 264 L976 215 L932 255 L946 273 L981 299 L936 255 L961 275 L968 236 L985 187 L999 173 L1000 222 L965 201 L935 155 L967 121 L962 165 L935 133 L939 125 L889 175 L934 163 L939 144 L976 106 L928 62 L892 17 L887 1 L900 1 L887 1 L909 32 L864 81 L902 36 L939 73 L934 95 L937 120 L970 85 L960 64 L942 19 L949 67 L917 87 L926 89 L904 92 L906 74 L914 89 L908 129 L902 83 L930 108 L949 68 L989 54 L1000 54 L955 41 L1000 51 L983 82 L964 39 L1000 47 L990 1 L948 1 L903 45 L868 1 L897 14 L902 1 L876 1 L906 15 L928 1 L880 1 L861 49 L815 92 L771 48 L770 34 L781 50 L766 35 L788 50 L838 57 L884 68 L918 25 L902 28 L952 44 L944 1 L907 1 L904 42 L868 1 L876 1 L826 47 L812 17 L798 57 L773 60 L822 13 L842 54 L805 65 L840 92 L809 49 L828 1 L877 10 L883 1 L839 21 L793 15 L813 57 L802 76 L778 87 L776 64 L791 103 L766 110 L736 64 L770 22 L759 62 L717 92 L761 67 L776 34 L824 76 L811 58 L766 57 L806 53 L763 47 L753 54 L758 62 L798 94 L824 127 L851 144 L806 114 L841 120 L889 112 L922 124 L967 92 L987 107 L979 100 L953 144 L932 108 L922 65 L922 51 L913 58 L944 43 L920 11 L964 34 L940 66 L976 20 L972 37 L950 7 L918 36 L879 84 L892 110 L887 102 L909 129 L879 83 L866 57 L861 89 L911 89 L882 93 L856 100 L808 107 L796 76 L838 115 L829 143 L785 173 L750 141 L705 160 L677 186 L722 158 L694 159 L718 209 L696 161 L674 194 L659 151 L702 125 L691 115 L641 127 L609 85 L598 72 L571 23 L536 41 L509 5 L480 41 L480 16 L520 4 L483 9 L508 49 L515 45 L491 76 L487 56 L509 105 L463 81 L492 60 L533 100 L488 62 L492 99 L535 112 L529 80 L507 103 L461 145 L438 157 L438 121 L394 93 L412 70 L376 55 L335 103 L366 143 L360 120 L357 143 L393 153 L399 122 L430 108 L400 157 L445 166 L482 129 L494 157 L478 183 L519 194 L525 167 L476 170 L472 122 L521 163 L566 179 L517 200 L504 206 L459 237 L463 281 L499 322 L529 319 L513 291 L523 314 L482 310 L495 352 L490 394 L448 352 L494 332 L497 291 L453 337 L491 317 L450 341 L480 329 L460 374 L478 365 L464 413 L429 421 L415 471 L370 451 L359 473 L380 431 L378 480 L417 505 L418 461 L465 415 L466 451 L479 454 L492 447 L447 397 L468 441 L464 420 L483 440 L497 470 L492 460 L516 487 L535 502 L554 506 L526 456 L496 459 L503 464 L544 447 L520 482 L569 524 L596 568 L644 582 L636 597 L639 578 L676 613 L639 622 L653 657 L623 670 L622 642 L660 668 L694 693 L740 721 L699 700 L739 672 L758 694 L713 727 L726 730 L747 761 L758 808 L782 824 L759 859 L750 825 L768 783 L729 792 L730 820 L693 848 L742 868 L728 856 L738 880 L697 840 L746 821 L769 807 L746 785 L723 750 L680 778 L647 749 L665 792 L677 761 L652 803 L638 814 L608 768 L623 808 L573 850 L562 882 L535 897 L578 861 L532 903 L563 873 L546 825 L591 830 L598 814 L569 844 L614 813 L617 846 L626 882 L611 928 L586 958 L565 949 L602 958 L576 923"/></g><g class="tool-group"><rect x="575" y="20" width="30" height="30" class="tool-bg active"/><text x="590" y="40" text-anchor="middle" class="tool-button">🖌️</text></g><g class="tool-group"><rect x="615" y="20" width="30" height="30" class="tool-bg"/><text x="630" y="40" text-anchor="middle" class="tool-button">🧽</text></g><g class="tool-group"><rect x="655" y="20" width="30" height="30" class="tool-bg"/><text x="670" y="40" text-anchor="middle" class="tool-button">🪣</text></g><g class="action-group"><rect x="800" y="20" width="40" height="30" class="action-bg clear"/><text x="820" y="40" text-anchor="middle" class="button-text">💣</text><text x="820" y="65" text-anchor="middle" class="toolbar-text">Clear</text></g><g class="action-group"><rect x="860" y="20" width="40" height="30" class="action-bg save"/><text x="880" y="40" text-anchor="middle" class="button-text">💾</text><text x="880" y="65" text-anchor="middle" class="toolbar-text">Save</text></g><g class="action-group"><rect x="920" y="20" width="40" height="30" class="action-bg export"/><text x="940" y="40" text-anchor="middle" class="button-text">📁</text><text x="940" y="65" text-anchor="middle" class="toolbar-text">Export</text></g><text x="150" y="65" text-anchor="middle" class="toolbar-text">Colors</text><text x="350" y="65" text-anchor="middle" class="toolbar-text">Brush Size</text><text x="500" y="65" text-anchor="middle" class="toolbar-text">Shapes</text><text x="630" y="65" text-anchor="middle" class="toolbar-text">Tools</text><script type="text/javascript"><![CDATA[const SVG_NS = 'http://www.w3.org/2000/svg';const XHTML_NS = 'http://www.w3.org/1999/xhtml';const drawingArea = document.getElementById('drawing-area');const canvas = document.querySelector('.canvas');const svg = document.querySelector('svg');const brushSlider = document.getElementById('brush-slider-handle');const brushSliderTrack = document.getElementById('brush-slider-track');const localStorageKey = 'colourMeArt.' + (drawingArea.getAttribute('data-token') || '0');let isDrawing = false;let isDraggingSlider = false;let currentColor = '#000000';let currentBrushSize = 8;let currentTool = 'brush';let currentShape = 'rect';let paths = [];let currentPath = null;let startPos = null;let currentShapeElement = null;let polylinePoints = [];let polylinePreview = null;let mouseMoveThrottle = null;let lastDrawPos = null;let svgRect = null;let svgWidth = 1000;let svgHeight = 1000;let displayWidth = 1000;let displayHeight = 1000;function updateCoordinateFactors() {svgRect = svg.getBoundingClientRect();svgWidth = svg.viewBox.baseVal.width;svgHeight = svg.viewBox.baseVal.height;displayWidth = svgRect.width;displayHeight = svgRect.height;}function calculatePosition(clientX, clientY) {if (!svgRect) updateCoordinateFactors();const x = clientX - svgRect.left;const y = clientY - svgRect.top;const rawX = (x * svgWidth) / displayWidth;const rawY = (y * svgHeight) / displayHeight;return {x: Math.round(rawX),y: Math.round(rawY)};}function getMousePos(evt) {return calculatePosition(evt.clientX, evt.clientY);}function getTouchPos(evt) {const touch = evt.touches[0];return calculatePosition(touch.clientX, touch.clientY);}function createSVGElement(tagName, attributes = {}) {const element = document.createElementNS(SVG_NS, tagName);Object.entries(attributes).forEach(([key, value]) => {element.setAttribute(key, value);});return element;}function setActiveElement(selector, activeElement) {document.querySelectorAll(selector).forEach(el => el.classList.remove('active'));if (activeElement) activeElement.classList.add('active');}const shapeConfigs = {rect: (pos) => ({fill: currentColor, x: pos.x, y: pos.y, width: 1, height: 1}),ellipse: (pos) => ({fill: currentColor, cx: pos.x, cy: pos.y, rx: 1, ry: 1}),line: (pos) => ({stroke: currentColor, 'stroke-width': currentBrushSize,x1: pos.x, y1: pos.y, x2: pos.x, y2: pos.y}),'polygon-3': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y} ${pos.x + 1},${pos.y + 1} ${pos.x - 1},${pos.y + 1}`}),'polygon-5': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.3} ${pos.x + 0.3},${pos.y + 0.5} ${pos.x - 0.3},${pos.y + 0.5} ${pos.x - 0.5},${pos.y - 0.3}`}),'polygon-6': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.25} ${pos.x + 0.5},${pos.y + 0.25} ${pos.x},${pos.y + 0.5} ${pos.x - 0.5},${pos.y + 0.25} ${pos.x - 0.5},${pos.y - 0.25}`})};function generatePolygonPoints(centerX, centerY, width, height, sides, offset = 0) {const points = [];for (let i = 0; i < sides; i++) {const angle = (i * 2 * Math.PI) / sides - Math.PI / 2 + offset;const x = Math.round(centerX + (width / 2) * Math.cos(angle));const y = Math.round(centerY + (height / 2) * Math.sin(angle));points.push(x, y);}return points.join(',');}function isWithinCanvas(pos) {return pos.x >= 10 && pos.x <= 10 + 980 &&pos.y >= 90 && pos.y <= 90 + 900;}function isWithinBrushRadius(currentPos, lastPos) {if (!lastPos) return false;const dx = currentPos.x - lastPos.x;const dy = currentPos.y - lastPos.y;const distance = Math.sqrt(dx * dx + dy * dy);return distance < currentBrushSize / 2;}function resetPolylineState() {finalizeShape();currentShapeElement = null;polylinePoints = [];}function updateBrushSizeFromSlider(x) {const trackRect = brushSliderTrack.getBoundingClientRect();const trackLeft = trackRect.left;const trackWidth = trackRect.width;let relativeX = x - trackLeft;relativeX = Math.max(0, Math.min(relativeX, trackWidth));const brushSize = Math.round(8 + (relativeX / trackWidth) * 32);const sliderX = 305 + (relativeX / trackWidth) * 110;const handleRadius = Math.max(4, Math.min(20, brushSize * 0.5));brushSlider.setAttribute('cx', sliderX);brushSlider.setAttribute('r', handleRadius);currentBrushSize = brushSize;}function startSliderDrag(evt) {finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.clientX);}function updateSliderDrag(evt) {if (isDraggingSlider) {updateBrushSizeFromSlider(evt.clientX);}}function stopSliderDrag() {isDraggingSlider = false;}document.querySelectorAll('.color-btn').forEach(btn => {btn.addEventListener('click', function() {setActiveElement('.color-btn', this);currentColor = this.getAttribute('fill');});});brushSlider.addEventListener('mousedown', startSliderDrag);brushSliderTrack.addEventListener('mousedown', startSliderDrag);document.addEventListener('mousemove', updateSliderDrag);document.addEventListener('mouseup', stopSliderDrag);brushSlider.addEventListener('touchstart', function(evt) {evt.preventDefault();finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});brushSliderTrack.addEventListener('touchstart', function(evt) {evt.preventDefault();finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});document.addEventListener('touchmove', function(evt) {if (isDraggingSlider) {evt.preventDefault();updateBrushSizeFromSlider(evt.touches[0].clientX);}});document.addEventListener('touchend', stopSliderDrag);document.querySelectorAll('.tool-group').forEach((group, index) => {group.addEventListener('click', function() {setActiveElement('.tool-bg', this.querySelector('.tool-bg'));setActiveElement('.shape-group .tool-bg', null);const tools = ['brush', 'eraser', 'bucket'];currentTool = tools[index] || 'brush';});});document.querySelectorAll('.shape-group').forEach((group) => {group.addEventListener('click', function() {setActiveElement('.shape-group .tool-bg', this.querySelector('.tool-bg'));setActiveElement('.tool-group .tool-bg', null);const shapeType = this.querySelector('.tool-bg').getAttribute('data-shape');currentTool = 'shape';currentShape = shapeType;if (currentShape === 'polyline') {polylinePoints = [];}});});function saveDrawing(storageKey = localStorageKey) {const drawingElements = Array.from(drawingArea.children).map(element => {const stroke = element.getAttribute('stroke') ? hexToBytes3(element.getAttribute('stroke')) : null;const fill = element.getAttribute('fill') !== '#none' ? hexToBytes3(element.getAttribute('fill')) : null;const color = stroke || fill || '0x000000';return {shape: getElementShape(element),color: color,stroke: parseInt(element.getAttribute('stroke-width') || '0'),points: extractPoints(element)};});if (drawingElements.length > 0) {if (storageKey) localStorage.setItem(storageKey, JSON.stringify(drawingElements));} else {localStorage.removeItem(storageKey);}return drawingElements.length > 0 ? drawingElements : null;}function getElementShape(element) {const tagName = element.tagName.toLowerCase();const shapeMap = {'rect': 0, 'line': 1, 'ellipse': 2, 'polyline': 3, 'polygon': 4, 'path': 5};return shapeMap[tagName] || 5;}function hexToBytes3(hexColor) {return hexColor ? hexColor.replace('#', '0x') : null;}function bytes3ToHex(bytes3) {const cleanHex = bytes3.replace('0x', '');return '#' + cleanHex;}function extractPoints(element) {const tagName = element.tagName.toLowerCase();const points = [];switch (tagName) {case 'rect':const x = parseInt(element.getAttribute('x'));const y = parseInt(element.getAttribute('y'));const width = parseInt(element.getAttribute('width'));const height = parseInt(element.getAttribute('height'));points.push({ x: x, y: y }, { x: width, y: height });break;case 'ellipse':const cx = parseInt(element.getAttribute('cx'));const cy = parseInt(element.getAttribute('cy'));const rx = parseInt(element.getAttribute('rx'));const ry = parseInt(element.getAttribute('ry'));points.push({ x: cx, y: cy }, { x: rx, y: ry });break;case 'line':points.push({ x: parseInt(element.getAttribute('x1')), y: parseInt(element.getAttribute('y1')) },{ x: parseInt(element.getAttribute('x2')), y: parseInt(element.getAttribute('y2')) });break;case 'polyline':case 'polygon':points.push(...extractShapePoints(element));break;case 'path':points.push(...extractPathPoints(element));break;}return points;}function extractShapePoints(element) {const points = [];const pointsAttr = element.getAttribute('points');const coords = pointsAttr.split(/[,\s]+/);for (let i = 0; i < coords.length; i += 2) {points.push({x: parseInt(coords[i]),y: parseInt(coords[i + 1])});}return points;}function extractPathPoints(element) {const points = [];const d = element.getAttribute('d');const commands = d.match(/[ML][\d.-]+\s+[\d.-]+/g) || [];commands.forEach(cmd => {const parts = cmd.trim().split(/\s+/);if (parts.length >= 2) {const x = parseInt(parts[0].substring(1));const y = parseInt(parts[1]);points.push({ x: x, y: y });}});return points;}function loadDrawing() {const savedData = localStorage.getItem(localStorageKey);const tokenData = saveDrawing('tokenArt');if (tokenData) {sendMessageToParent('LOAD_DATA', { loadType: 'token', artData: tokenData });}if (savedData) {const savedObjects = JSON.parse(savedData);drawingArea.innerHTML = '';paths = [];savedObjects.forEach(obj => {const element = createElementFromContract(obj);if (element) {drawingArea.appendChild(element);paths.push(element);}});sendMessageToParent('LOAD_DATA', { loadType: 'local', artData: savedObjects });}}function createElementFromContract(obj) {const element = document.createElementNS(SVG_NS, getElementTag(obj.shape));switch (obj.shape) {case 0:const [pos, size] = obj.points;Object.assign(element, {x: { baseVal: { value: pos.x } },y: { baseVal: { value: pos.y } },width: { baseVal: { value: size.x } },height: { baseVal: { value: size.y } }});element.setAttribute('fill', bytes3ToHex(obj.color));break;case 1:const [start, end] = obj.points;const lineAttrs = {x1: start.x, y1: start.y, x2: end.x, y2: end.y,stroke: bytes3ToHex(obj.color), 'stroke-width': obj.stroke};Object.entries(lineAttrs).forEach(([key, value]) => {element.setAttribute(key, value);});break;case 2:const [center, radius] = obj.points;const ellipseAttrs = {cx: center.x, cy: center.y, rx: radius.x, ry: radius.y,fill: bytes3ToHex(obj.color)};Object.entries(ellipseAttrs).forEach(([key, value]) => {element.setAttribute(key, value);});break;case 3:const polylineAttrs = {points: obj.points.map(p => `${p.x},${p.y}`).join(' '),fill: 'none',stroke: bytes3ToHex(obj.color),'stroke-width': obj.stroke};Object.entries(polylineAttrs).forEach(([key, value]) => {element.setAttribute(key, value);});break;case 4:const polygonAttrs = {points: obj.points.map(p => `${p.x},${p.y}`).join(' '),fill: bytes3ToHex(obj.color)};Object.entries(polygonAttrs).forEach(([key, value]) => {element.setAttribute(key, value);});break;case 5:const pathAttrs = {d: obj.points.map((p, i) => `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`).join(''),fill: 'none',stroke: bytes3ToHex(obj.color),'stroke-width': obj.stroke,'stroke-linecap': 'round','stroke-linejoin': 'round'};Object.entries(pathAttrs).forEach(([key, value]) => {element.setAttribute(key, value);});break;}return element;}function getElementTag(shape) {const tags = ['rect', 'line', 'ellipse', 'polyline', 'polygon', 'path'];return tags[shape] || 'path';}function exportDrawing() {const contractObjects = saveDrawing();if (!contractObjects) return;const svgElements = contractObjects.map(obj => {const element = createElementFromContract(obj);return element.outerHTML;}).join('');const svgContent = `<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="980" height="900" viewBox="0 0 980 900"><rect width="980" height="900" fill="white" />${svgElements}</svg>`;const dataUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgContent);const link = document.createElementNS(XHTML_NS, 'a');link.href = dataUrl;link.download = 'painting.svg';link.click();}function getDiff(baseArt = localStorage.getItem('tokenArt'), currentArt = localStorage.getItem(localStorageKey)) {if (!baseArt) {return { saveType: 'set', diff: currentArt };} else if (baseArt === currentArt) {return { saveType: 'append', diff: "[]" };} else if (currentArt.startsWith(baseArt.slice(0, -2))) {const baseArtJson = baseArt ? JSON.parse(baseArt) : [];const currentArtJson = currentArt ? JSON.parse(currentArt) : [];const diff = currentArtJson.slice(baseArtJson.length);return { saveType: 'append', diff: JSON.stringify(diff) };}return { saveType: 'set', diff: currentArt };}document.querySelectorAll('.action-group').forEach((group, index) => {group.addEventListener('click', function() {const actions = [() => {drawingArea.innerHTML = '';paths = [];saveDrawing();sendMessageToParent('CLEAR_REQUEST');},() => {const tokenArtString = localStorage.getItem('tokenArt');const saveData = saveDrawing();if (saveData) {const { saveType, diff } = getDiff();sendMessageToParent('SAVE_REQUEST', { saveType: saveType, artData: diff });console.log('saveRequest: ', saveType, diff.length);}},() => exportDrawing()];if (actions[index]) actions[index]();});});function startDrawing(pos) {if (!isWithinCanvas(pos)) return;if (currentTool === 'bucket') {drawingArea.innerHTML = '';paths = [];const fillRect = createSVGElement('rect', {x: 10, y: 90, width: 980, height: 900, fill: currentColor});drawingArea.appendChild(fillRect);paths.push(fillRect);sendObjectAddedMessage('bucket');return;}if (currentTool === 'shape') {if (currentShape === 'polyline') {addPolylinePoint(pos);return;} else {startPos = pos;createShapeStart(pos);return;}}isDrawing = true;lastDrawPos = pos;currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? '#ffffff' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M${pos.x} ${pos.y} L${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);}function createShapeStart(pos) {isDrawing = true;const config = shapeConfigs[currentShape];if (config) {const shape = createSVGElement(currentShape === 'line' ? 'line' :currentShape.startsWith('polygon') ? 'polygon' : currentShape, config(pos));drawingArea.appendChild(shape);currentShapeElement = shape;}}function updateShape(pos) {if (!currentShapeElement || !startPos) return;const deltaX = pos.x - startPos.x;const deltaY = pos.y - startPos.y;const absWidth = Math.abs(deltaX);const absHeight = Math.abs(deltaY);const centerX = (startPos.x + pos.x) / 2;const centerY = (startPos.y + pos.y) / 2;switch (currentShape) {case 'rect':const rectAttrs = {x: Math.min(startPos.x, pos.x),y: Math.min(startPos.y, pos.y),width: absWidth,height: absHeight};Object.entries(rectAttrs).forEach(([key, value]) => {currentShapeElement.setAttribute(key, value);});break;case 'ellipse':const ellipseAttrs = {cx: centerX,cy: centerY,rx: absWidth / 2,ry: absHeight / 2};Object.entries(ellipseAttrs).forEach(([key, value]) => {currentShapeElement.setAttribute(key, value);});break;case 'line':currentShapeElement.setAttribute('x2', pos.x);currentShapeElement.setAttribute('y2', pos.y);break;case 'polygon-3':case 'polygon-5':case 'polygon-6':const sides = parseInt(currentShape.split('-')[1]);const offset = pos.y > startPos.y ? Math.PI : 0;const points = generatePolygonPoints(centerX, centerY, absWidth, absHeight, sides, offset);currentShapeElement.setAttribute('points', points);break;}}function addPolylinePoint(pos) {polylinePoints.push(pos.x, pos.y);if (polylinePoints.length >= 1000) {const lastX = polylinePoints[polylinePoints.length - 4];const lastY = polylinePoints[polylinePoints.length - 3];finalizeShape();polylinePoints = [lastX, lastY, pos.x, pos.y];currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {if (!currentShapeElement) {currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {currentShapeElement.setAttribute('points', polylinePoints.join(','));}}}function sendObjectAddedMessage(objectType) {const currentArt = JSON.stringify(saveDrawing(null));const diff = getDiff(localStorage.getItem('tokenArt'), currentArt);sendMessageToParent('OBJECT_ADDED', { objectType: objectType, artData: diff });console.log('object added: ', objectType, diff);}function finalizeShape() {const shape = currentShapeElement;if (shape) {paths.push(shape);sendObjectAddedMessage(currentShape);}if (polylinePreview) {polylinePreview.remove();polylinePreview = null;}if (shape && shape.tagName === 'polyline') {polylinePoints = [];currentShapeElement = null;}}function draw(pos) {if (!isDrawing) return;if (currentTool === 'shape' && currentShapeElement && startPos) {updateShape(pos);return;}if (!currentPath || !isWithinCanvas(pos)) return;const currentD = currentPath.getAttribute('d');const pathPoints = currentD.match(/[ML]\s*[\d.-]+\s+[\d.-]+/g) || [];if (pathPoints.length >= 500) {const lastPoint = pathPoints[pathPoints.length - 1];const coords = lastPoint.split(' ');const lastX = coords[0].slice(1);const lastY = coords[1];currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? '#ffffff' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M${lastX} ${lastY} L${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);sendObjectAddedMessage(currentTool);} else {currentPath.setAttribute('d', currentD + `L${pos.x} ${pos.y}`);}}function stopDrawing() {if (currentTool === 'shape' && currentShapeElement && startPos) {finalizeShape();} else if (isDrawing && currentPath && currentTool !== 'shape') {sendObjectAddedMessage(currentTool);}isDrawing = false;currentPath = null;startPos = null;lastDrawPos = null;if (currentTool !== 'shape' || currentShape !== 'polyline') {currentShapeElement = null;}}canvas.addEventListener('mousedown', function(evt) {startDrawing(getMousePos(evt));});document.addEventListener('mousemove', function(evt) {if (isDrawing) {const currentPos = getMousePos(evt);if (isWithinBrushRadius(currentPos, lastDrawPos)) {return;} else {draw(currentPos);lastDrawPos = currentPos;}}if (currentTool === 'shape' && currentShape === 'polyline' && polylinePoints.length > 0) {if (!polylinePreview) {polylinePreview = createSVGElement('line', {stroke: currentColor,'stroke-width': currentBrushSize,'stroke-dasharray': [currentBrushSize*2, currentBrushSize]});drawingArea.appendChild(polylinePreview);}const lastX = polylinePoints[polylinePoints.length - 2];const lastY = polylinePoints[polylinePoints.length - 1];const pos = getMousePos(evt);const previewAttrs = { x1: lastX, y1: lastY, x2: pos.x, y2: pos.y };Object.entries(previewAttrs).forEach(([key, value]) => {polylinePreview.setAttribute(key, value);});if (!isWithinCanvas(pos)) {polylinePreview.remove();polylinePreview = null;}}});document.addEventListener('mouseup', stopDrawing);canvas.addEventListener('touchstart', function(evt) {evt.preventDefault();startDrawing(getTouchPos(evt));}, { passive: false });canvas.addEventListener('touchmove', function(evt) {evt.preventDefault();const currentPos = getTouchPos(evt);if (isWithinBrushRadius(currentPos, lastDrawPos)) {return;}draw(currentPos);lastDrawPos = currentPos;}, { passive: false });canvas.addEventListener('touchend', function(evt) {evt.preventDefault();stopDrawing();}, { passive: false });document.addEventListener('click', function(evt) {if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {if (!isWithinCanvas(getMousePos(evt))) {resetPolylineState();}}});document.addEventListener('touchend', function(evt) {if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {const touch = evt.changedTouches[0];if (!isWithinCanvas(getTouchPos(evt))) {resetPolylineState();}}});canvas.addEventListener('dblclick', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {resetPolylineState();}});function sendMessageToParent(type, data = {}) {if (window.parent && window.parent !== window) {window.parent.postMessage({ type, data }, '*');}}window.addEventListener('load', function() {updateCoordinateFactors();loadDrawing();const initialBrushSize = currentBrushSize;const sliderX = 305 + ((initialBrushSize - 8) / 32) * 110;const initialHandleRadius = Math.max(4, Math.min(20, initialBrushSize * 0.5));brushSlider.setAttribute('cx', sliderX);brushSlider.setAttribute('r', initialHandleRadius);});]]></script></svg>
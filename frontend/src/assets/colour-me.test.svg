<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewBox="0 0 1000 1000"><defs><style>.toolbar {fill: #f0f0f0; stroke: #ccc; stroke-width: 1;}.canvas {fill: white; stroke: #ccc; stroke-width: 1;}#drawing-area {pointer-events: none;}text {font-family: Arial, sans-serif; font-size: 14px; fill: #333;}.toolbar-text {font-size: 12px;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.button-text {font-size: 20px;fill: white;pointer-events: none;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.color-btn, .brush-size, .tool-bg, .action-bg {cursor: pointer;}.color-btn {stroke: #333; stroke-width: 2;}.color-btn:hover {stroke: #777; stroke-width: 3;}.color-btn.active {stroke: #000; stroke-width: 3;}#brush-slider-handle {cursor: grab;}#brush-slider-handle:active {cursor: grabbing;}#brush-slider-track {cursor: pointer;}.tool-button {font-size: 20px;fill: #666;transition: fill 0.2s;user-select: none;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;}.tool-button:hover {fill: #333;}.tool-button.active {fill: #333;}.tool-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.tool-bg:hover {fill: #e0e0e0; stroke: #999;}.tool-bg.active {fill: #333; stroke: #333;}.tool-bg.active:hover {fill: #444; stroke: #444;}.tool-group {cursor: pointer;}.tool-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.tool-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group {cursor: pointer;}.shape-group:hover .tool-bg {fill: #e0e0e0; stroke: #999;}.shape-group:hover .tool-bg.active {fill: #444; stroke: #444;}.shape-group .tool-bg.active ~ .shape-icon {stroke: white !important;}.shape-btn { cursor: pointer; }.action-bg {fill: #f0f0f0; stroke: #ccc; stroke-width: 1; rx: 5; ry: 5;}.action-bg:hover {fill: #e0e0e0; stroke: #999;}.action-bg.clear {fill: #ffebee; stroke: #ffcdd2;}.action-bg.clear:hover {fill: #ffcdd2; stroke: #ef9a9a;}.action-bg.save {fill: #e8f5e8; stroke: #c8e6c9;}.action-bg.save:hover {fill: #c8e6c9; stroke: #a5d6a7;}.action-bg.export {fill: #e3f2fd; stroke: #bbdefb;}.action-bg.export:hover {fill: #bbdefb; stroke: #90caf9;}</style><rect id="canvas-bg" x="10" y="90" width="980" height="900" rx="5"/><clipPath id="canvas-clip"><use href="#canvas-bg"/></clipPath></defs><rect width="1000" height="1000" fill="#e8e8e8"/><use href="#canvas-bg" class="canvas"/><rect x="10" y="10" width="980" height="70" class="toolbar" rx="5"/><g id="brush-size-controls"><rect x="300" y="25" width="120" height="20" fill="#f0f0f0" stroke="#ccc" stroke-width="1" rx="10"/><rect id="brush-slider-track" x="305" y="27.5" width="110" height="15" fill="#ddd" rx="7.5"/><circle id="brush-slider-handle" cx="310" cy="35" r="8" fill="#4CAF50" stroke="#45a049" stroke-width="2" cursor="pointer"/></g><circle cx="50" cy="35" r="15" class="color-btn active" fill="#000000"/><circle cx="90" cy="35" r="15" class="color-btn" fill="#32a71a"/><circle cx="130" cy="35" r="15" class="color-btn" fill="#631eaf"/><circle cx="170" cy="35" r="15" class="color-btn" fill="#d4257b"/><circle cx="210" cy="35" r="15" class="color-btn" fill="#337ff1"/><circle cx="250" cy="35" r="15" class="color-btn" fill="#b545b8"/><g class="shape-group" transform="translate(445, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="rect"/><rect x="5" y="7.5" width="20" height="15" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(485, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="line"/><line x1="5" y1="10" x2="25" y2="20" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g class="shape-group" transform="translate(525, 20)"><rect x="0" y="0" width="30" height="30" class="tool-bg" data-shape="polygon-5"/><polygon points="15,5 25,12 20,22.5 10,22.5 5,12" fill="none" stroke="#333" stroke-width="2" class="shape-icon"/></g><g id="drawing-area" clip-path="url(#canvas-clip)" data-token="1"><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#000000" stroke-width="15" d="M76 318 L87 353 L104 338 L57 387 L104 408 L79 373 L33 375 L1 342 L1 352 L48 386 L89 384 L124 421 L154 463 L181 496 L171 458 L189 481 L153 498 L122 455 L99 477 L53 489 L37 446 L48 458 L94 430 L121 414 L112 416 L115 394 L69 419 L30 416 L70 453 L68 413 L62 439 L63 402 L71 355 L46 394 L1 366 L27 384 L52 372 L66 372 L92 364 L53 345 L81 377 L118 382 L159 395 L110 345 L158 315 L177 350 L194 306 L159 263 L183 240 L197 288 L221 263 L213 287 L212 264 L229 260 L228 213 L192 220 L232 245 L247 195 L277 191 L236 226 L286 266 L265 300 L250 250 L236 253 L214 258 L213 279 L173 238 L200 256 L221 257 L215 288 L226 292 L221 310 L181 274 L160 286 L209 318 L185 278 L220 311 L252 336 L221 384 L182 376 L216 393 L229 355 L265 384 L256 367 L249 359 L211 393 L244 435 L258 420 L273 452 L231 477 L252 432 L248 422 L222 409 L182 455 L185 457 L150 460 L174 446 L203 457 L243 434 L274 428 L228 422 L214 407 L232 404 L258 414 L254 406 L292 356 L269 319 L286 325 L252 286 L250 270 L241 300 L206 323 L161 328 L144 292 L98 243 L113 248 L90 266 L129 254 L87 214 L61 210 L37 224 L33 217 L28 172 L25 203 L1 190 L40 222 L1 189 L19 155 L43 126 L16 116 L50 109 L15 119 L29 113 L21 110 L1 155 L43 130 L17 109 L1 98 L46 56 L19 50 L46 31 L51 45 L36 35 L1 63 L34 28 L74 74 L45 48 L32 65 L1 40 L1 80 L48 125 L88 139 L77 144 L91 113 L53 145 L85 142 L105 133 L85 106 L84 114 L97 85 L120 114 L115 134 L73 92 L66 87 L17 101 L12 85 L54 111 L57 133 L85 86 L77 86 L110 91 L98 65 L58 19 L50 68 L66 42 L16 16 L1 53 L50 87 L80 101 L75 78 L97 40 L100 80 L55 98 L92 126 L129 164 L125 164 L76 169 L58 184 L38 175 L36 216 L1 180 L18 203 L27 237 L1 235 L27 194 L9 166 L1 141 L10 186 L58 233 L88 219 L77 235 L82 224 L42 227 L1 267 L37 217 L82 206 L78 218 L29 198 L1 244 L30 200 L1 234 L34 238 L76 243 L46 219 L19 260 L1 304 L18 270 L6 265 L1 261 L11 298 L27 277 L50 279 L52 246 L23 263 L68 278 L51 278 L48 273 L52 308 L58 348 L58 376 L8 332 L3 290 L1 323 L1 316 L49 293 L97 318 L126 306 L156 265 L128 300 L154 280 L156 298 L165 315 L166 277 L143 243 L176 239 L180 276 L150 236 L194 206 L221 164 L232 202 L239 187 L214 217 L209 246 L183 289 L225 261 L219 211 L262 215 L246 172 L233 209 L194 191 L207 187 L253 198 L214 155 L200 152 L155 164 L114 175 L90 146 L109 137 L145 113 L160 103 L193 76 L186 117 L204 119 L169 126 L188 108 L230 140 L183 179 L227 184 L252 190 L299 177 L284 193 L286 183 L298 199 L346 179 L347 178 L324 138 L313 92 L294 51 L275 14 L313 61 L323 24 L334 18 L376 46 L417 75 L393 96 L386 113 L354 160 L317 143 L275 172 L249 125 L218 163 L247 163 L200 169 L185 182 L219 172 L197 192 L232 206 L185 253 L164 303 L122 299 L135 277 L174 231 L143 229 L145 186 L154 215 L166 259 L134 234 L168 205 L207 179 L245 173 L269 210 L291 196 L290 201 L311 184 L355 162 L325 128 L369 109 L324 153 L329 110 L326 113 L292 92 L271 141 L302 164 L333 175 L378 201 L340 222 L330 251 L281 263 L310 270 L273 250 L311 225 L305 245 L355 220 L350 261 L338 277 L347 280 L356 267 L331 308 L336 277 L347 264 L339 230 L322 225 L284 189 L273 204 L226 183 L276 206 L301 242 L349 248 L331 279 L356 290 L390 299 L433 297 L477 258 L519 296 L528 248 L569 263 L596 309 L631 306 L611 260 L576 271 L569 237 L539 213 L499 228 L535 186 L582 225 L566 246 L543 247 L576 297 L565 269 L552 228 L570 247 L544 277 L592 291 L545 250 L505 272 L555 257 L571 302 L606 273 L637 305 L667 292 L636 330 L686 303 L733 278 L767 268 L795 233 L836 205 L835 180 L877 152 L902 155 L880 140 L924 120 L907 72 L939 114 L978 73 L984 100 L963 121 L940 102 L962 152 L916 170 L897 196 L932 209 L896 248 L852 223 L882 199 L866 169 L882 155 L885 108 L862 70 L911 22 L934 1 L947 1 L913 1 L875 1 L869 36 L893 46 L943 95 L987 81 L968 128 L981 141 L943 130 L978 142 L957 98 L908 129 L904 128 L872 146 L823 182 L809 198 L837 209 L870 203 L884 237 L878 278 L881 292 L894 327 L878 331 L877 361 L846 408 L863 432 L833 442 L829 427 L861 405 L901 417 L923 394 L892 434 L845 436 L858 459 L828 462 L840 466 L847 442 L816 399 L823 368 L848 328 L851 333 L836 352 L825 401 L780 445 L741 406 L738 357 L735 374 L753 422 L801 415 L755 462 L710 413 L727 388 L757 344 L715 360 L675 347 L685 334 L691 291 L718 303 L743 278 L753 233 L742 241 L703 221 L686 239 L690 216 L665 255 L700 257 L671 295 L623 305 L655 329 L657 340 L635 332 L586 382 L589 379 L625 335 L629 370 L650 338 L660 376 L701 390 L692 343 L724 391 L756 348 L712 355 L681 319 L714 274 L742 239 L769 250 L733 290 L756 264 L796 267 L805 274 L848 305 L805 332 L765 335 L768 337 L813 326 L834 369 L874 403 L864 426 L889 407 L908 417 L942 390 L923 343 L917 373 L888 379 L900 416 L882 382 L841 344 L814 340 L833 376 L842 402 L824 367 L784 318 L810 360 L792 339 L784 332 L759 346 L776 311 L737 261 L758 243 L712 268 L721 308 L688 351 L716 347 L740 360 L694 339 L710 362 L670 321 L656 301 L663 326 L680 334 L706 294 L749 326 L733 374 L751 349 L741 388 L763 388 L789 358 L782 405 L802 359 L808 395 L793 364 L790 317 L780 306 L760 280 L799 265 L754 243 L765 274 L785 249 L760 209 L807 211 L800 230 L806 280 L775 272 L749 304 L788 328 L794 377 L744 331 L774 337 L750 296 L782 328 L776 288 L755 330 L796 336 L772 300 L752 271 L779 221 L790 270 L820 262 L811 306 L789 339 L804 382 L838 348 L792 362 L790 404 L780 442 L755 485 L735 465 L734 465 L689 417 L699 384 L701 345 L692 334 L661 340 L682 383 L706 336 L686 309 L673 299 L650 286 L681 292 L636 255 L617 254 L624 284 L657 286 L703 314 L742 282 L707 240 L751 290 L741 257 L771 223 L760 231 L776 280 L761 306 L745 352 L794 389 L774 354 L758 351 L718 350 L732 300 L782 314 L822 348 L820 317 L835 319 L837 362 L828 362 L853 367 L846 328 L888 363 L916 394 L911 358 L892 360 L918 402 L933 367 L933 320 L926 338 L944 365 L972 398 L927 435 L897 399 L947 442 L910 463 L911 486 L864 442 L864 417 L830 454 L836 447 L849 452 L840 457 L864 477 L843 456 L887 506 L888 552 L866 533 L897 511 L879 471 L913 484 L940 466 L935 490 L985 538 L1000 557 L1000 533 L958 486 L915 506 L963 464 L942 505 L967 467 L942 509 L961 550 L922 590 L947 564 L899 547 L934 503 L923 491 L878 537 L839 497 L875 481 L878 434 L906 410 L883 360 L887 341 L884 346 L887 318 L932 321 L912 340 L907 373 L864 328 L840 340 L885 350 L847 317 L812 297 L841 306 L849 309 L833 279 L843 233 L829 191 L847 235 L813 215 L846 188 L811 213 L852 238 L807 257 L824 212 L866 175 L897 188 L858 154 L859 114 L905 151 L940 194 L937 206 L910 208 L943 256 L930 277 L920 270 L913 251 L924 226 L936 261 L976 264 L996 251 L984 212 L991 251 L995 214 L969 254 L963 289 L962 261 L972 280 L953 323 L943 315 L977 290 L1000 318 L960 344 L943 388 L906 364 L906 343 L897 350 L900 330 L929 370 L947 383 L941 341 L906 303 L892 315 L869 302 L919 313 L951 284 L953 329 L971 357 L926 393 L955 425 L940 458 L990 415 L946 429 L952 458 L933 507 L915 534 L879 495 L879 535 L924 556 L918 585 L919 562 L928 513 L923 526 L880 493 L887 516 L884 470 L855 451 L888 404 L899 377 L938 361 L910 390 L948 363 L898 323 L912 371 L880 414 L912 420 L944 402 L906 357 L904 401 L875 368 L831 357 L821 336 L823 337 L841 331 L890 363 L853 353 L820 323 L824 311 L853 334 L876 376 L923 381 L890 355 L918 404 L936 380 L932 412 L946 410 L897 402 L922 374 L967 368 L1000 370 L963 379 L1000 356 L975 324 L1000 282 L1000 277 L1000 320 L992 369 L1000 343 L980 293 L945 301 L913 321 L910 344 L862 383 L823 362 L811 324 L818 350 L773 375 L780 414 L750 445 L705 489 L746 451 L780 477 L794 456 L793 450 L755 441 L741 419 L733 371 L781 328 L797 309 L760 312 L712 266 L743 305 L768 349 L783 328 L817 364 L794 364 L839 323 L791 280 L803 298 L852 344 L892 336 L858 329 L812 323 L778 297 L802 308 L767 265 L794 239 L778 228 L748 248 L730 253 L694 271 L737 275 L765 236 L809 239 L788 234 L808 234 L830 234 L783 218 L771 222 L750 195 L775 170 L769 179 L749 220 L799 188 L755 214 L705 175 L736 181 L692 231 L712 252 L705 266 L682 221 L656 184 L622 173 L578 133 L593 144 L568 129 L553 111 L523 131 L497 147 L453 196 L434 176 L396 179 L359 209 L344 252 L343 249 L324 220 L326 193 L312 203 L325 248 L275 206 L276 213 L291 205 L243 190 L247 174 L283 160 L316 167 L272 143 L236 131 L193 133 L241 164 L231 178 L268 129 L236 98 L238 148 L254 148 L268 102 L256 76 L296 106 L275 83 L235 103 L204 139 L244 118 L236 155 L221 148 L182 128 L167 138 L197 161 L178 209 L179 189 L180 154 L211 117 L165 118 L143 134 L152 167 L130 198 L118 244 L149 244 L109 228 L141 208 L161 239 L141 220 L101 171 L65 203 L42 212 L9 253 L52 204 L50 254 L12 272 L2 314 L2 274 L1 290 L7 247 L22 281 L1 304 L32 271 L1 268"/><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#ffffff" stroke-width="15" d="M778 80 L731 92 L689 130 L714 138 L727 186 L707 155 L726 147 L732 152 L717 162 L746 160 L742 171 L771 186 L791 166 L754 137 L717 138 L731 151 L685 173 L707 174 L725 182 L750 186 L790 178 L754 181 L754 195 L707 159 L677 147 L707 195 L679 240 L651 249 L613 270 L566 278 L561 305 L611 319 L659 310 L684 353 L707 376 L714 360 L724 325 L761 337 L740 351 L736 335 L710 337 L716 353 L755 322 L804 358 L854 342 L861 368 L827 345 L810 326 L821 329 L830 338 L859 326 L897 309 L937 316 L904 346 L934 331 L983 362 L991 352 L979 401 L987 393 L940 425 L942 376 L941 336 L979 302 L1000 295 L974 290 L967 314 L1000 353 L1000 371 L1000 380 L973 335 L954 300 L939 271 L971 253 L943 250 L896 248 L910 236 L887 255 L914 264 L934 261 L946 301 L920 329 L966 336 L989 348 L965 381 L1000 357 L1000 375 L973 413 L990 420 L996 431 L993 415 L951 462 L941 480 L920 473 L945 439 L947 461 L931 439 L949 487 L945 439 L992 488 L954 456 L959 461 L923 437 L971 412 L995 453 L954 438 L925 450 L972 404 L982 399 L1000 416 L1000 386 L1000 407 L985 360 L1000 402 L1000 353 L1000 395 L1000 445 L1000 482 L1000 468 L976 437 L953 423 L993 412 L965 402 L935 377 L927 371 L926 399 L954 384 L915 374 L923 393 L878 374 L828 423 L804 432 L785 402 L799 385 L763 413 L787 425 L784 435 L789 431 L789 471 L743 508 L725 485 L756 466 L708 435 L724 429 L683 426 L689 457 L675 484 L710 439 L691 449 L650 427 L652 449 L634 438 L682 473 L690 437 L740 441 L710 458 L753 420 L722 391 L694 365 L686 393 L644 366 L676 318 L722 349 L757 368 L732 334 L710 312 L721 344 L758 330 L739 318 L707 360 L735 373 L728 366 L758 354 L721 327 L749 316 L733 356 L698 406 L680 409 L697 457 L738 475 L743 461 L740 420 L697 395 L663 427 L677 378 L712 413 L714 449 L714 444 L713 441 L690 438 L705 436 L672 411 L682 396 L701 413 L717 378 L703 335 L716 381 L721 360 L686 388 L710 398 L734 399 L687 381 L701 339 L707 383 L743 423 L701 450 L708 465 L700 449 L686 453 L678 414 L671 442 L679 437 L681 465 L666 459 L627 507 L599 530 L616 539 L659 510 L704 556 L688 552 L712 528 L674 523 L696 479 L705 509 L750 501 L762 471 L740 423 L776 441 L753 437 L786 429 L736 467 L719 474 L683 496 L661 545 L683 575 L673 542 L689 492 L698 470 L699 490 L654 474 L696 477 L679 493 L649 542 L616 538 L648 517 L680 540 L668 579"/><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#000000" stroke-width="15" d="M499 466 L547 512 L539 469 L531 443 L531 417 L570 434 L552 468 L534 427 L510 436 L515 393 L561 362 L533 320 L542 300 L542 315 L512 269 L526 255 L525 231 L568 265 L587 279 L637 248 L659 255 L631 207 L669 158 L672 183 L646 185 L652 234 L697 203 L712 184 L673 157 L659 207 L656 244 L612 201 L653 244 L691 284 L659 266 L686 254 L728 212 L744 175 L771 178 L735 139 L697 158 L684 122 L690 149 L690 134 L699 137 L734 103 L725 95 L757 83 L745 55 L748 95 L737 115 L738 92 L737 113 L785 141 L823 170 L843 139 L840 144 L845 149 L872 146 L837 180 L848 199 L895 156 L901 126 L951 132 L917 177 L961 157 L994 196"/><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#ffffff" stroke-width="15" d="M135 64 L90 42 L100 26 L95 76 L81 72 L90 22 L77 66 L55 90 L41 110 L15 156 L51 164 L44 171 L1 126 L1 130 L47 168 L44 208 L47 225 L89 213 L64 184 L111 155 L106 193 L112 217 L124 175 L173 158 L143 201 L115 175 L133 205 L149 240 L144 247 L162 218 L164 187 L118 195 L86 177 L48 186 L56 217 L24 232 L1 239 L1 237 L26 203 L3 185 L44 141 L1 134 L20 108 L16 97 L29 130 L1 80 L1 112 L1 97 L10 133 L46 182 L78 194 L104 161 L122 157 L78 146 L125 193 L122 185 L141 139 L174 172 L194 128 L189 90 L193 105 L186 130 L194 106 L198 127 L167 84 L137 71 L177 27 L189 30 L148 47 L171 41 L163 15 L197 1 L192 1 L201 1 L189 13 L219 42 L169 41 L122 79 L102 108 L110 104 L119 127 L89 127 L41 122 L8 103 L1 118 L1 74 L28 24 L50 47 L78 20 L76 33 L46 50 L6 55 L39 82 L12 104 L48 135 L35 151 L75 163 L104 140 L75 134 L71 127 L111 121 L94 116 L95 95 L136 115 L115 93 L110 47 L132 68 L93 88 L67 57 L80 71 L87 51 L130 100 L85 103 L38 131 L54 94 L23 61 L1 76 L28 86 L1 59 L1 94 L1 144 L17 145 L1 123 L1 157 L1 207 L1 163 L1 127 L20 165 L35 187 L17 170 L1 124 L1 125 L51 94 L37 93 L34 68 L2 108 L18 127 L42 99 L44 99 L24 147 L15 182 L1 171 L4 165 L27 171 L9 179 L15 159 L42 124 L68 165 L78 179 L125 206 L144 159 L116 189 L75 211 L119 166 L114 120 L67 142 L108 182 L123 183 L93 219 L127 220 L111 201 L127 165 L91 204 L86 173 L116 138 L139 146 L111 184 L94 189 L80 219 L54 262 L55 264 L45 250 L1 257 L36 295 L21 324 L35 291 L33 301 L4 255 L1 269 L1 246 L1 290 L1 333 L1 340 L2 353 L6 350 L48 316 L60 313 L52 349 L64 390 L39 356 L1 371 L48 415 L44 454 L41 480 L31 460 L55 470 L105 443 L151 396 L155 383 L189 360 L203 350 L220 313 L219 287 L213 277 L240 285 L264 260 L223 309 L238 274 L280 253 L289 302 L271 293 L313 310 L340 323 L339 288 L367 326 L415 298 L417 309 L420 262 L446 221 L486 222 L526 242 L530 272 L544 272 L566 243 L612 258 L616 232 L596 256"/><path stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#000000" stroke-width="15" d="M832 55 L879 43 L892 46 L939 31 L896 1 L938 47 L890 20 L923 24 L956 11 L933 16 L888 1 L906 9 L880 40 L848 3 L838 20 L856 39 L824 23 L782 1 L749 1 L708 9 L748 25 L758 29 L786 28 L774 48 L767 18 L771 1 L791 26 L761 14 L729 55 L700 100 L728 91 L738 137 L703 157 L699 150 L698 138 L710 92 L728 99 L756 58 L745 92 L772 107 L757 149 L742 103 L767 141 L756 186 L707 147 L717 100 L756 103 L706 152 L732 120 L719 100 L678 92 L677 67 L669 96 L669 79 L674 128 L693 161 L705 135 L673 87 L683 105 L661 99 L611 81 L621 95 L631 136 L632 115 L626 104 L638 125 L669 112 L666 99 L624 101 L595 67 L600 61 L625 84 L631 61 L599 42 L641 42 L654 15 L654 17 L703 51 L718 53 L735 87 L764 86 L744 108 L775 141 L811 148 L809 100 L833 127 L880 84 L873 53 L916 43 L965 58 L1000 11 L982 1 L957 1 L953 37 L920 51 L895 39 L943 46 L978 12 L944 1 L936 11 L980 1 L971 42 L1000 77 L981 74 L1000 119 L960 128 L947 157 L941 160 L969 206 L1000 254 L975 282 L958 308 L961 303 L957 335 L948 322 L922 363 L929 401 L890 360 L894 326 L903 361 L909 382 L919 373 L913 372 L868 322 L835 283 L814 279 L793 252 L747 213 L719 169 L760 192 L714 176 L665 169 L616 180 L584 158 L579 127 L586 114 L626 111 L663 68 L713 20 L697 47 L675 97 L695 69 L731 26 L693 11 L718 31 L752 8 L791 21 L756 1 L735 1 L769 1 L734 1 L711 20 L673 1 L694 29 L713 13 L735 9 L700 1 L728 18 L755 47 L774 92 L804 127 L804 146 L842 163 L854 129 L807 147 L837 147 L837 123 L857 90 L866 67 L826 32 L855 74 L877 88 L883 45 L885 33 L904 78 L925 108 L877 120 L893 142 L860 153 L824 164 L808 159 L762 148 L731 118 L759 73 L735 63 L782 59 L806 30 L779 13 L760 4 L743 1 L723 15 L755 55 L711 34 L754 1 L717 22 L701 65 L684 52 L721 67 L694 62 L690 47 L667 81 L701 96 L744 58 L775 10 L819 1 L837 1 L823 1 L860 1 L846 42 L829 32 L839 1 L837 1 L834 50 L833 35 L786 1 L805 1 L823 1 L795 1 L809 1 L821 1 L844 32 L824 59 L824 36 L775 14 L748 1 L755 7 L749 1 L738 5 L732 1 L714 50 L667 92 L635 71 L599 42 L638 6 L652 6 L696 42 L710 35 L667 31 L699 2 L651 1 L605 1 L618 9 L586 1"/></g><g class="tool-group"><rect x="575" y="20" width="30" height="30" class="tool-bg active"/><text x="590" y="40" text-anchor="middle" class="tool-button">🖌️</text></g><g class="tool-group"><rect x="615" y="20" width="30" height="30" class="tool-bg"/><text x="630" y="40" text-anchor="middle" class="tool-button">🧽</text></g><g class="tool-group"><rect x="655" y="20" width="30" height="30" class="tool-bg"/><text x="670" y="40" text-anchor="middle" class="tool-button">🪣</text></g><g class="action-group"><rect x="800" y="20" width="40" height="30" class="action-bg clear"/><text x="820" y="40" text-anchor="middle" class="button-text">💣</text><text x="820" y="65" text-anchor="middle" class="toolbar-text">Clear</text></g><g class="action-group"><rect x="860" y="20" width="40" height="30" class="action-bg save"/><text x="880" y="40" text-anchor="middle" class="button-text">💾</text><text x="880" y="65" text-anchor="middle" class="toolbar-text">Save</text></g><g class="action-group"><rect x="920" y="20" width="40" height="30" class="action-bg export"/><text x="940" y="40" text-anchor="middle" class="button-text">📁</text><text x="940" y="65" text-anchor="middle" class="toolbar-text">Export</text></g><text x="150" y="65" text-anchor="middle" class="toolbar-text">Colors</text><text x="350" y="65" text-anchor="middle" class="toolbar-text">Brush Size</text><text x="500" y="65" text-anchor="middle" class="toolbar-text">Shapes</text><text x="630" y="65" text-anchor="middle" class="toolbar-text">Tools</text><script type="text/javascript"><![CDATA[const CANVAS_X = 10;const CANVAS_Y = 90;const CANVAS_WIDTH = 980;const CANVAS_HEIGHT = 900;const drawingArea = document.getElementById('drawing-area');const canvas = document.querySelector('.canvas');const svg = document.querySelector('svg');const localStorageKey = 'colourMeArt.' + drawingArea.getAttribute('data-token');let isDrawing = false;let currentColor = '#000000';let currentBrushSize = 8;let currentTool = 'brush';let currentShape = 'rect';let paths = [];let currentPath = null;let startPos = null;let currentShapeElement = null;let polylinePoints = [];let polylinePreview = null;const SVG_NS = 'http://www.w3.org/2000/svg';const XHTML_NS = 'http://www.w3.org/1999/xhtml';let svgRect = null;let svgWidth = 1000;let svgHeight = 1000;let displayWidth = 1000;let displayHeight = 1000;function updateCoordinateFactors() {svgRect = svg.getBoundingClientRect();svgWidth = svg.viewBox.baseVal.width;svgHeight = svg.viewBox.baseVal.height;displayWidth = svgRect.width;displayHeight = svgRect.height;}function calculatePosition(clientX, clientY) {if (!svgRect) updateCoordinateFactors();const x = clientX - svgRect.left;const y = clientY - svgRect.top;const rawX = (x * svgWidth) / displayWidth;const rawY = (y * svgHeight) / displayHeight;return {x: Math.round(rawX),y: Math.round(rawY)};}function getMousePos(evt) {return calculatePosition(evt.clientX, evt.clientY);}function getTouchPos(evt) {const touch = evt.touches[0];return calculatePosition(touch.clientX, touch.clientY);}function createSVGElement(tagName, attributes = {}) {const element = document.createElementNS(SVG_NS, tagName);Object.entries(attributes).forEach(([key, value]) => {element.setAttribute(key, value);});return element;}function setActiveElement(selector, activeElement) {document.querySelectorAll(selector).forEach(el => el.classList.remove('active'));if (activeElement) activeElement.classList.add('active');}const shapeConfigs = {rect: (pos) => ({fill: currentColor, x: pos.x, y: pos.y, width: 1, height: 1}),ellipse: (pos) => ({fill: currentColor, cx: pos.x, cy: pos.y, rx: 1, ry: 1}),line: (pos) => ({stroke: currentColor, 'stroke-width': currentBrushSize,x1: pos.x, y1: pos.y, x2: pos.x, y2: pos.y}),'polygon-3': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y} ${pos.x + 1},${pos.y + 1} ${pos.x - 1},${pos.y + 1}`}),'polygon-5': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.3} ${pos.x + 0.3},${pos.y + 0.5} ${pos.x - 0.3},${pos.y + 0.5} ${pos.x - 0.5},${pos.y - 0.3}`}),'polygon-6': (pos) => ({fill: currentColor,points: `${pos.x},${pos.y - 0.5} ${pos.x + 0.5},${pos.y - 0.25} ${pos.x + 0.5},${pos.y + 0.25} ${pos.x},${pos.y + 0.5} ${pos.x - 0.5},${pos.y + 0.25} ${pos.x - 0.5},${pos.y - 0.25}`})};function generatePolygonPoints(centerX, centerY, width, height, sides, offset = 0) {const points = [];for (let i = 0; i < sides; i++) {const angle = (i * 2 * Math.PI) / sides - Math.PI / 2 + offset;const x = Math.round(centerX + (width / 2) * Math.cos(angle));const y = Math.round(centerY + (height / 2) * Math.sin(angle));points.push(x, y);}return points.join(',');}function isWithinCanvas(pos) {return pos.x >= CANVAS_X && pos.x <= CANVAS_X + CANVAS_WIDTH &&pos.y >= CANVAS_Y && pos.y <= CANVAS_Y + CANVAS_HEIGHT;}document.querySelectorAll('.color-btn').forEach(btn => {btn.addEventListener('click', function() {setActiveElement('.color-btn', this);currentColor = this.getAttribute('fill');});});const brushSlider = document.getElementById('brush-slider-handle');const brushSliderTrack = document.getElementById('brush-slider-track');let isDraggingSlider = false;function updateBrushSizeFromSlider(x) {const trackRect = brushSliderTrack.getBoundingClientRect();const trackLeft = trackRect.left;const trackWidth = trackRect.width;let relativeX = x - trackLeft;relativeX = Math.max(0, Math.min(relativeX, trackWidth));const brushSize = Math.round(1 + (relativeX / trackWidth) * 39);const sliderX = 305 + (relativeX / trackWidth) * 110;brushSlider.setAttribute('cx', sliderX);currentBrushSize = brushSize;const handleRadius = Math.max(4, Math.min(20, brushSize * 0.5));brushSlider.setAttribute('r', handleRadius);}function startSliderDrag(evt) {finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.clientX);}function updateSliderDrag(evt) {if (isDraggingSlider) {updateBrushSizeFromSlider(evt.clientX);}}function stopSliderDrag() {isDraggingSlider = false;}brushSlider.addEventListener('mousedown', startSliderDrag);brushSliderTrack.addEventListener('mousedown', startSliderDrag);document.addEventListener('mousemove', updateSliderDrag);document.addEventListener('mouseup', stopSliderDrag);brushSlider.addEventListener('touchstart', function(evt) {evt.preventDefault();finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});brushSliderTrack.addEventListener('touchstart', function(evt) {evt.preventDefault();finalizeShape();isDraggingSlider = true;updateBrushSizeFromSlider(evt.touches[0].clientX);}, {passive: false});document.addEventListener('touchmove', function(evt) {if (isDraggingSlider) {evt.preventDefault();updateBrushSizeFromSlider(evt.touches[0].clientX);}});document.addEventListener('touchend', stopSliderDrag);document.querySelectorAll('.tool-group').forEach((group, index) => {group.addEventListener('click', function() {setActiveElement('.tool-bg', this.querySelector('.tool-bg'));setActiveElement('.shape-group .tool-bg', null);const tools = ['brush', 'eraser', 'bucket'];currentTool = tools[index] || 'brush';});});document.querySelectorAll('.shape-group').forEach((group) => {group.addEventListener('click', function() {setActiveElement('.shape-group .tool-bg', this.querySelector('.tool-bg'));setActiveElement('.tool-group .tool-bg', null);const shapeType = this.querySelector('.tool-bg').getAttribute('data-shape');currentTool = 'shape';currentShape = shapeType;if (currentShape === 'polyline') {polylinePoints = [];}});});function saveDrawing(storageKey = localStorageKey) {const drawingElements = Array.from(drawingArea.children).map(element => {const stroke = element.getAttribute('stroke') ? hexToBytes3(element.getAttribute('stroke')) : null;const fill = element.getAttribute('fill') !== '#none' ? hexToBytes3(element.getAttribute('fill')) : null;const color = stroke || fill || '0x000000';const object = {shape: getElementShape(element),color: color,stroke: parseInt(element.getAttribute('stroke-width') || '0'),points: extractPoints(element)};return object;});console.log('saving to localStorage: ', storageKey);if (drawingElements.length > 0) {localStorage.setItem(storageKey, JSON.stringify(drawingElements));} else {localStorage.removeItem(storageKey);}return drawingElements.length > 0 ? drawingElements : null;}function getElementShape(element) {const tagName = element.tagName.toLowerCase();switch (tagName) {case 'rect': return 0;case 'line': return 1;case 'ellipse': return 2;case 'polyline': return 3;case 'polygon': return 4;case 'path': return 5;default: return 5;}}function hexToBytes3(hexColor) {return hexColor ? hexColor.replace('#', '0x') : null;}function extractPoints(element) {const tagName = element.tagName.toLowerCase();const points = [];switch (tagName) {case 'rect':const x = parseInt(element.getAttribute('x'));const y = parseInt(element.getAttribute('y'));const width = parseInt(element.getAttribute('width'));const height = parseInt(element.getAttribute('height'));points.push({ x: x, y: y });points.push({ x: width, y: height });break;case 'ellipse':const cx = parseInt(element.getAttribute('cx'));const cy = parseInt(element.getAttribute('cy'));const rx = parseInt(element.getAttribute('rx'));const ry = parseInt(element.getAttribute('ry'));points.push({ x: cx, y: cy });points.push({ x: rx, y: ry });break;case 'line':points.push({x: parseInt(element.getAttribute('x1')),y: parseInt(element.getAttribute('y1'))});points.push({x: parseInt(element.getAttribute('x2')),y: parseInt(element.getAttribute('y2'))});break;case 'polyline':const polylinePoints = extractPolylinePoints(element);points.push(...polylinePoints);break;case 'polygon':const polygonPoints = extractPolygonPoints(element);points.push(...polygonPoints);break;case 'path':const pathPoints = extractPathPoints(element);points.push(...pathPoints);break;}return points;}function extractPolylinePoints(element) {const points = [];const pointsAttr = element.getAttribute('points');const coords = pointsAttr.split(/[,\s]+/);for (let i = 0; i < coords.length; i += 2) {points.push({x: parseInt(coords[i]),y: parseInt(coords[i + 1])});}return points;}function extractPolygonPoints(element) {const points = [];const pointsAttr = element.getAttribute('points');const coords = pointsAttr.split(/[,\s]+/);for (let i = 0; i < coords.length; i += 2) {points.push({x: parseInt(coords[i]),y: parseInt(coords[i + 1])});}return points;}function extractPathPoints(element) {const points = [];const d = element.getAttribute('d');const commands = d.match(/[ML][\d.-]+\s+[\d.-]+/g) || [];commands.forEach(cmd => {const parts = cmd.trim().split(/\s+/);if (parts.length >= 2) {const command = parts[0].charAt(0);const x = parseInt(parts[0].substring(1));const y = parseInt(parts[1]);points.push({x: x,y: y});}});return points;}function loadDrawing() {const savedData = localStorage.getItem(localStorageKey);const tokenData = saveDrawing('tokenArt');if (tokenData) {sendMessageToParent('LOAD_DATA', { artData: tokenData });console.log('loadedData: tokenArt', tokenData);}if (savedData) {const savedObjects = JSON.parse(savedData);drawingArea.innerHTML = '';paths = [];savedObjects.forEach(obj => {const element = createElementFromContract(obj);if (element) {drawingArea.appendChild(element);paths.push(element);}});sendMessageToParent('LOAD_DATA', { artData: savedObjects });console.log('loadedData: savedObjects', savedObjects);}}function createElementFromContract(obj) {const element = document.createElementNS(SVG_NS, getElementTag(obj.shape));switch (obj.shape) {case 0:const [pos, size] = obj.points;element.setAttribute('x', pos.x);element.setAttribute('y', pos.y);element.setAttribute('width', size.x);element.setAttribute('height', size.y);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 1:const [start, end] = obj.points;element.setAttribute('x1', start.x);element.setAttribute('y1', start.y);element.setAttribute('x2', end.x);element.setAttribute('y2', end.y);element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);break;case 2:const [center, radius] = obj.points;element.setAttribute('cx', center.x);element.setAttribute('cy', center.y);element.setAttribute('rx', radius.x);element.setAttribute('ry', radius.y);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 3:const polylinePointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');element.setAttribute('points', polylinePointsStr);element.setAttribute('fill', 'none');element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);break;case 4:const polygonPointsStr = obj.points.map(p => `${p.x},${p.y}`).join(' ');element.setAttribute('points', polygonPointsStr);element.setAttribute('fill', bytes3ToHex(obj.color));break;case 5:const pathData = obj.points.map((p, i) =>`${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`).join('');element.setAttribute('d', pathData);element.setAttribute('fill', 'none');element.setAttribute('stroke', bytes3ToHex(obj.color));element.setAttribute('stroke-width', obj.stroke);element.setAttribute('stroke-linecap', 'round');element.setAttribute('stroke-linejoin', 'round');break;}return element;}function getElementTag(shape) {const tags = ['rect', 'line', 'ellipse', 'polyline', 'polygon', 'path'];return tags[shape] || 'path';}function bytes3ToHex(bytes3) {const cleanHex = bytes3.replace('0x', '');return '#' + cleanHex;}function exportDrawing() {const contractObjects = saveDrawing();if (!contractObjects) return;const svgElements = contractObjects.map(obj => {const element = createElementFromContract(obj);return element.outerHTML;}).join('');const svgContent = `<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" viewBox="0 0 ${CANVAS_WIDTH} ${CANVAS_HEIGHT}"><rect width="${CANVAS_WIDTH}" height="${CANVAS_HEIGHT}" fill="white" />${svgElements}</svg>`;const dataUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgContent);const link = document.createElementNS(XHTML_NS, 'a');link.href = dataUrl;link.download = 'painting.svg';link.click();}document.querySelectorAll('.action-group').forEach((group, index) => {group.addEventListener('click', function() {const actions = [() => {drawingArea.innerHTML = '';paths = [];saveDrawing();sendMessageToParent('CLEAR_REQUEST');console.log('cleared');},() => {const tokenArtString = localStorage.getItem('tokenArt');const saveData = saveDrawing();if (saveData) {const saveArtString = JSON.stringify(saveData);if (tokenArtString !== saveArtString) {if (tokenArtString && saveArtString.startsWith(tokenArtString.slice(0, -1))) {const tokenElements = JSON.parse(tokenArtString);const appendElements = saveData.slice(tokenElements.length);sendMessageToParent('SAVE_REQUEST', { artData: appendElements, saveType: 'append' });console.log('saveRequest: append', appendElements);} else {sendMessageToParent('SAVE_REQUEST', { artData: saveData, saveType: 'set' });console.log('saveRequest: set', saveData);}}}},() => exportDrawing()];if (actions[index]) actions[index]();});});function startDrawing(pos) {if (!isWithinCanvas(pos)) return;if (currentTool === 'bucket') {drawingArea.innerHTML = '';paths = [];const fillRect = createSVGElement('rect', {x: CANVAS_X, y: CANVAS_Y, width: CANVAS_WIDTH, height: CANVAS_HEIGHT, fill: currentColor});drawingArea.appendChild(fillRect);paths.push(fillRect);return;}if (currentTool === 'shape') {if (currentShape === 'polyline') {addPolylinePoint(pos);return;} else {startPos = pos;createShapeStart(pos);return;}}isDrawing = true;currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? 'white' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M${pos.x} ${pos.y} L${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);}function createShapeStart(pos) {isDrawing = true;const config = shapeConfigs[currentShape];if (config) {const shape = createSVGElement(currentShape === 'line' ? 'line' :currentShape.startsWith('polygon') ? 'polygon' : currentShape, config(pos));drawingArea.appendChild(shape);currentShapeElement = shape;}}function updateShape(pos) {if (!currentShapeElement || !startPos) return;switch (currentShape) {case 'rect':const rectX = Math.min(startPos.x, pos.x);const rectY = Math.min(startPos.y, pos.y);const rectWidth = Math.abs(pos.x - startPos.x);const rectHeight = Math.abs(pos.y - startPos.y);currentShapeElement.setAttribute('x', rectX);currentShapeElement.setAttribute('y', rectY);currentShapeElement.setAttribute('width', rectWidth);currentShapeElement.setAttribute('height', rectHeight);break;case 'ellipse':const ellipseCenterX = (startPos.x + pos.x) / 2;const ellipseCenterY = (startPos.y + pos.y) / 2;const radiusX = Math.abs(pos.x - startPos.x) / 2;const radiusY = Math.abs(pos.y - startPos.y) / 2;currentShapeElement.setAttribute('cx', ellipseCenterX);currentShapeElement.setAttribute('cy', ellipseCenterY);currentShapeElement.setAttribute('rx', radiusX);currentShapeElement.setAttribute('ry', radiusY);break;case 'line':currentShapeElement.setAttribute('x2', pos.x);currentShapeElement.setAttribute('y2', pos.y);break;case 'polygon-3':case 'polygon-5':case 'polygon-6':const sides = parseInt(currentShape.split('-')[1]);const centerX = (startPos.x + pos.x) / 2;const centerY = (startPos.y + pos.y) / 2;const width = Math.abs(pos.x - startPos.x);const height = Math.abs(pos.y - startPos.y);const offset = pos.y > startPos.y ? Math.PI : 0;const points = generatePolygonPoints(centerX, centerY, width, height, sides, offset);currentShapeElement.setAttribute('points', points);break;}}function addPolylinePoint(pos) {polylinePoints.push(pos.x, pos.y);if (polylinePoints.length >= 1000) {const lastX = polylinePoints[polylinePoints.length - 4];const lastY = polylinePoints[polylinePoints.length - 3];finalizeShape();polylinePoints = [lastX, lastY, pos.x, pos.y];currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {if (!currentShapeElement) {currentShapeElement = createSVGElement('polyline', {points: polylinePoints.join(','),fill: 'none',stroke: currentColor,'stroke-width': currentBrushSize});drawingArea.appendChild(currentShapeElement);} else {currentShapeElement.setAttribute('points', polylinePoints.join(','));}}}function finalizeShape() {if (currentShapeElement) {paths.push(currentShapeElement);}if (polylinePreview) {polylinePreview.remove();polylinePreview = null;}if (currentShapeElement && currentShapeElement.tagName === 'polyline') {polylinePoints = [];currentShapeElement = null;}}function draw(pos) {if (!isDrawing) return;if (currentTool === 'shape' && currentShapeElement && startPos) {updateShape(pos);return;}if (!currentPath || !isWithinCanvas(pos)) return;const currentD = currentPath.getAttribute('d');const pathPoints = currentD.match(/[ML]\s*[\d.-]+\s+[\d.-]+/g) || [];const pointCount = pathPoints.length;if (pointCount >= 500) {const lastX = pathPoints[pathPoints.length - 1].split(' ')[0].slice(1);const lastY = pathPoints[pathPoints.length - 1].split(' ')[1];currentPath = createSVGElement('path', {stroke: currentTool === 'eraser' ? 'white' : currentColor,'stroke-width': currentBrushSize,fill: 'none','stroke-linecap': 'round','stroke-linejoin': 'round',d: `M${lastX} ${lastY} L${pos.x} ${pos.y}`});drawingArea.appendChild(currentPath);paths.push(currentPath);} else {currentPath.setAttribute('d', currentD + `L${pos.x} ${pos.y}`);}}function stopDrawing() {if (currentTool === 'shape' && currentShapeElement && startPos) {finalizeShape();}isDrawing = false;currentPath = null;startPos = null;if (currentTool !== 'shape' || currentShape !== 'polyline') {currentShapeElement = null;}}let mouseMoveThrottle = null;canvas.addEventListener('mousedown', function(evt) {startDrawing(getMousePos(evt));});document.addEventListener('mousemove', function(evt) {if (isDrawing) {if (mouseMoveThrottle) return;mouseMoveThrottle = requestAnimationFrame(() => {draw(getMousePos(evt));mouseMoveThrottle = null;});}if (currentTool === 'shape' && currentShape === 'polyline' && polylinePoints.length > 0) {if (!polylinePreview) {polylinePreview = createSVGElement('line', {stroke: currentColor,'stroke-width': currentBrushSize,'stroke-dasharray': [currentBrushSize*2, currentBrushSize]});drawingArea.appendChild(polylinePreview);}const lastX = polylinePoints[polylinePoints.length - 2];const lastY = polylinePoints[polylinePoints.length - 1];const pos = getMousePos(evt);polylinePreview.setAttribute('x1', lastX);polylinePreview.setAttribute('y1', lastY);polylinePreview.setAttribute('x2', pos.x);polylinePreview.setAttribute('y2', pos.y);if (!isWithinCanvas(pos)) {polylinePreview.remove();polylinePreview = null;}}});document.addEventListener('mouseup', stopDrawing);canvas.addEventListener('touchstart', function(evt) {evt.preventDefault();startDrawing(getTouchPos(evt));}, { passive: false });canvas.addEventListener('touchmove', function(evt) {evt.preventDefault();draw(getTouchPos(evt));}, { passive: false });canvas.addEventListener('touchend', function(evt) {evt.preventDefault();stopDrawing();}, { passive: false });document.addEventListener('click', function(evt) {if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {const canvasRect = canvas.getBoundingClientRect();const clickX = evt.clientX;const clickY = evt.clientY;if (clickX < canvasRect.left || clickX > canvasRect.right ||clickY < canvasRect.top || clickY > canvasRect.bottom) {finalizeShape();currentShapeElement = null;polylinePoints = [];}}});document.addEventListener('touchend', function(evt) {if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {const canvasRect = canvas.getBoundingClientRect();const touch = evt.changedTouches[0];const touchX = touch.clientX;const touchY = touch.clientY;if (touchX < canvasRect.left || touchX > canvasRect.right ||touchY < canvasRect.top || touchY > canvasRect.bottom) {finalizeShape();currentShapeElement = null;polylinePoints = [];}}});canvas.addEventListener('contextmenu', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {finalizeShape();currentShapeElement = null;polylinePoints = [];}});canvas.addEventListener('dblclick', function(evt) {evt.preventDefault();if (currentTool === 'shape' && currentShape === 'polyline' && currentShapeElement) {finalizeShape();currentShapeElement = null;polylinePoints = [];}});function sendMessageToParent(type, data = {}) {if (window.parent && window.parent !== window) {window.parent.postMessage({ type, data }, '*');}}window.addEventListener('message', function(event) {const { type, success, message } = event.data;if (type === 'SAVE_RESPONSE') {if (success) {}saveDrawing();}});window.addEventListener('load', function() {updateCoordinateFactors();loadDrawing();const initialBrushSize = currentBrushSize;const sliderX = 305 + ((initialBrushSize - 1) / 39) * 110;brushSlider.setAttribute('cx', sliderX);const initialHandleRadius = Math.max(4, Math.min(20, initialBrushSize * 0.5));brushSlider.setAttribute('r', initialHandleRadius);});]]></script></svg>
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type TraitStruct = {
  color0: BytesLike;
  color1: BytesLike;
  color2: BytesLike;
  color3: BytesLike;
  color4: BytesLike;
  shape0: BigNumberish;
  shape1: BigNumberish;
  polygon: BigNumberish;
};

export type TraitStructOutput = [
  color0: string,
  color1: string,
  color2: string,
  color3: string,
  color4: string,
  shape0: bigint,
  shape1: bigint,
  polygon: bigint
] & {
  color0: string;
  color1: string;
  color2: string;
  color3: string;
  color4: string;
  shape0: bigint;
  shape1: bigint;
  polygon: bigint;
};

export type PointStruct = { x: BigNumberish; y: BigNumberish };

export type PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type ObjectStruct = {
  shape: BigNumberish;
  color: BytesLike;
  stroke: BigNumberish;
  points: PointStruct[];
};

export type ObjectStructOutput = [
  shape: bigint,
  color: string,
  stroke: bigint,
  points: PointStructOutput[]
] & {
  shape: bigint;
  color: string;
  stroke: bigint;
  points: PointStructOutput[];
};

export interface ColourMeRendererInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAttributes"
      | "getURI"
      | "renderObjects"
      | "renderPath"
      | "renderPolygon"
      | "renderShapeTool"
      | "renderTrait"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAttributes",
    values: [TraitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getURI",
    values: [string, BigNumberish, string, BytesLike, TraitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renderObjects",
    values: [ObjectStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renderPath",
    values: [ObjectStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renderPolygon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renderShapeTool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renderTrait",
    values: [TraitStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renderObjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renderPath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renderPolygon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renderShapeTool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renderTrait",
    data: BytesLike
  ): Result;
}

export interface ColourMeRenderer extends BaseContract {
  connect(runner?: ContractRunner | null): ColourMeRenderer;
  waitForDeployment(): Promise<this>;

  interface: ColourMeRendererInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAttributes: TypedContractMethod<[_trait: TraitStruct], [string], "view">;

  getURI: TypedContractMethod<
    [
      _name: string,
      _tokenId: BigNumberish,
      _baseURL: string,
      _svg: BytesLike,
      _trait: TraitStruct
    ],
    [string],
    "view"
  >;

  renderObjects: TypedContractMethod<
    [_objects: ObjectStruct[]],
    [string],
    "view"
  >;

  renderPath: TypedContractMethod<[_object: ObjectStruct], [string], "view">;

  renderPolygon: TypedContractMethod<
    [_polygon: BigNumberish],
    [string],
    "view"
  >;

  renderShapeTool: TypedContractMethod<
    [_shape: BigNumberish],
    [string],
    "view"
  >;

  renderTrait: TypedContractMethod<[_traits: TraitStruct], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAttributes"
  ): TypedContractMethod<[_trait: TraitStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getURI"
  ): TypedContractMethod<
    [
      _name: string,
      _tokenId: BigNumberish,
      _baseURL: string,
      _svg: BytesLike,
      _trait: TraitStruct
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renderObjects"
  ): TypedContractMethod<[_objects: ObjectStruct[]], [string], "view">;
  getFunction(
    nameOrSignature: "renderPath"
  ): TypedContractMethod<[_object: ObjectStruct], [string], "view">;
  getFunction(
    nameOrSignature: "renderPolygon"
  ): TypedContractMethod<[_polygon: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renderShapeTool"
  ): TypedContractMethod<[_shape: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renderTrait"
  ): TypedContractMethod<[_traits: TraitStruct], [string], "view">;

  filters: {};
}

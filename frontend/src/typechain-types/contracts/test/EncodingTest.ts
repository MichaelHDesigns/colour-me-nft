/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ObjectStruct = { base: BigNumberish; additionalPoints: BytesLike };

export type ObjectStructOutput = [base: bigint, additionalPoints: string] & {
  base: bigint;
  additionalPoints: string;
};

export type BaseObjectStruct = {
  shape: BigNumberish;
  color: BytesLike;
  stroke: BigNumberish;
  pointsLength: BigNumberish;
};

export type BaseObjectStructOutput = [
  shape: bigint,
  color: string,
  stroke: bigint,
  pointsLength: bigint
] & { shape: bigint; color: string; stroke: bigint; pointsLength: bigint };

export type PointStruct = { x: BigNumberish; y: BigNumberish };

export type PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export interface EncodingTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getArt"
      | "storeArt"
      | "testDecodeColor"
      | "testDecodePointsLength"
      | "testDecodeShape"
      | "testDecodeStroke"
      | "unpackArt"
      | "userArt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getArt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeArt",
    values: [BigNumberish, ObjectStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testDecodeColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDecodePointsLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDecodeShape",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDecodeStroke",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackArt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userArt",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getArt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeArt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testDecodeColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDecodePointsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDecodeShape",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDecodeStroke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpackArt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userArt", data: BytesLike): Result;
}

export interface EncodingTest extends BaseContract {
  connect(runner?: ContractRunner | null): EncodingTest;
  waitForDeployment(): Promise<this>;

  interface: EncodingTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getArt: TypedContractMethod<
    [tokenId: BigNumberish],
    [ObjectStructOutput[]],
    "view"
  >;

  storeArt: TypedContractMethod<
    [tokenId: BigNumberish, art: ObjectStruct[]],
    [void],
    "nonpayable"
  >;

  testDecodeColor: TypedContractMethod<
    [object: BigNumberish],
    [string],
    "view"
  >;

  testDecodePointsLength: TypedContractMethod<
    [object: BigNumberish],
    [bigint],
    "view"
  >;

  testDecodeShape: TypedContractMethod<
    [object: BigNumberish],
    [bigint],
    "view"
  >;

  testDecodeStroke: TypedContractMethod<
    [object: BigNumberish],
    [bigint],
    "view"
  >;

  unpackArt: TypedContractMethod<
    [tokenId: BigNumberish],
    [[BaseObjectStructOutput[], PointStructOutput[][]]],
    "view"
  >;

  userArt: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, string] & { base: bigint; additionalPoints: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getArt"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [ObjectStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "storeArt"
  ): TypedContractMethod<
    [tokenId: BigNumberish, art: ObjectStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDecodeColor"
  ): TypedContractMethod<[object: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "testDecodePointsLength"
  ): TypedContractMethod<[object: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "testDecodeShape"
  ): TypedContractMethod<[object: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "testDecodeStroke"
  ): TypedContractMethod<[object: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpackArt"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[BaseObjectStructOutput[], PointStructOutput[][]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "userArt"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, string] & { base: bigint; additionalPoints: string }],
    "view"
  >;

  filters: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDataPointStorage,
  IDataPointStorageInterface,
} from "../../../../../@tw3/esp/contracts/interfaces/IDataPointStorage";

const _abi = [
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "calculateAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "_dataPointAddress",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_dataPointAddress",
        type: "bytes32",
      },
    ],
    name: "dataPointSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_dataPointAddress",
        type: "bytes32",
      },
    ],
    name: "readDataPoint",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "writeDataPoint",
    outputs: [
      {
        internalType: "bytes32",
        name: "_dataPointAddress",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDataPointStorage__factory {
  static readonly abi = _abi;
  static createInterface(): IDataPointStorageInterface {
    return new Interface(_abi) as IDataPointStorageInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDataPointStorage {
    return new Contract(address, _abi, runner) as unknown as IDataPointStorage;
  }
}

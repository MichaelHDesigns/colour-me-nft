"use strict";
/**
 * Ethereum Storage Protocol (ESP) - Main Package Export
 *
 * This package provides TypeScript types, contract interfaces, and deployment
 * information for the Ethereum Storage Protocol.
 *
 * @version 0.2.0
 * @license AGPL-3.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasLocalhostDeployment = exports.listAllDeployments = exports.removeLocalhostDeployment = exports.addLocalhostDeployment = exports.getSupportedChainIds = exports.getDeploymentInfo = exports.getContractAddress = exports.loadContract = exports.espDeployments = exports.IDataPointStorage__factory = exports.IDataPointRegistry__factory = exports.DataPointStorage__factory = exports.DataPointRegistry__factory = void 0;
// Export ESP-specific contract types and factories
var types_1 = require("./types");
Object.defineProperty(exports, "DataPointRegistry__factory", { enumerable: true, get: function () { return types_1.DataPointRegistry__factory; } });
Object.defineProperty(exports, "DataPointStorage__factory", { enumerable: true, get: function () { return types_1.DataPointStorage__factory; } });
Object.defineProperty(exports, "IDataPointRegistry__factory", { enumerable: true, get: function () { return types_1.IDataPointRegistry__factory; } });
Object.defineProperty(exports, "IDataPointStorage__factory", { enumerable: true, get: function () { return types_1.IDataPointStorage__factory; } });
// Export contract interfaces and utilities
__exportStar(require("./contracts"), exports);
// Export deployment information
var deployments_1 = require("./deployments");
Object.defineProperty(exports, "espDeployments", { enumerable: true, get: function () { return deployments_1.espDeployments; } });
Object.defineProperty(exports, "loadContract", { enumerable: true, get: function () { return deployments_1.loadContract; } });
Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return deployments_1.getContractAddress; } });
Object.defineProperty(exports, "getDeploymentInfo", { enumerable: true, get: function () { return deployments_1.getDeploymentInfo; } });
Object.defineProperty(exports, "getSupportedChainIds", { enumerable: true, get: function () { return deployments_1.getSupportedChainIds; } });
Object.defineProperty(exports, "addLocalhostDeployment", { enumerable: true, get: function () { return deployments_1.addLocalhostDeployment; } });
Object.defineProperty(exports, "removeLocalhostDeployment", { enumerable: true, get: function () { return deployments_1.removeLocalhostDeployment; } });
Object.defineProperty(exports, "listAllDeployments", { enumerable: true, get: function () { return deployments_1.listAllDeployments; } });
Object.defineProperty(exports, "hasLocalhostDeployment", { enumerable: true, get: function () { return deployments_1.hasLocalhostDeployment; } });
// Re-export types for convenience
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, Interface, } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataPointAddress",
                type: "bytes32",
            },
        ],
        name: "DataExists",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidData",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "dataPointAddress",
                type: "bytes32",
            },
        ],
        name: "DataPointWritten",
        type: "event",
    },
    {
        inputs: [],
        name: "VERSION",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_data",
                type: "bytes",
            },
        ],
        name: "calculateAddress",
        outputs: [
            {
                internalType: "bytes32",
                name: "_dataPointAddress",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "_dataPointAddress",
                type: "bytes32",
            },
        ],
        name: "dataPointSize",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "_dataPointAddress",
                type: "bytes32",
            },
        ],
        name: "readDataPoint",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_data",
                type: "bytes",
            },
        ],
        name: "writeDataPoint",
        outputs: [
            {
                internalType: "bytes32",
                name: "_dataPointAddress",
                type: "bytes32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60a0604052600260ff1660809060ff16815250348015601d57600080fd5b50608051610a776100406000396000818161030b01526103380152610a776000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632be681f51461005c57806343748b321461008c57806380435b64146100bc578063e8a4c04e146100ec578063ffa1ad741461011c575b600080fd5b610076600480360381019061007191906103d7565b61013a565b604051610083919061041d565b60405180910390f35b6100a660048036038101906100a1919061057e565b610162565b6040516100b391906105d6565b60405180910390f35b6100d660048036038101906100d191906103d7565b61025f565b6040516100e39190610670565b60405180910390f35b6101066004803603810190610101919061057e565b610303565b60405161011391906105d6565b60405180910390f35b610124610336565b60405161013191906106ae565b60405180910390f35b60008060008381526020019081526020016000208054610159906106f8565b90509050919050565b60008082510361019e576040517f5cb045db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101a782610303565b9050600080600083815260200190815260200160002080546101c8906106f8565b9050111561020d57806040517f7d510ac500000000000000000000000000000000000000000000000000000000815260040161020491906105d6565b60405180910390fd5b81600080838152602001908152602001600020908161022c91906108d5565b50807fdd43f6c62c3afab3a2488aea11affa4226ba38e480c135375692d3192564c41a60405160405180910390a2919050565b6060600080838152602001908152602001600020805461027e906106f8565b80601f01602080910402602001604051908101604052809291908181526020018280546102aa906106f8565b80156102f75780601f106102cc576101008083540402835291602001916102f7565b820191906000526020600020905b8154815290600101906020018083116102da57829003601f168201915b50505050509050919050565b600061032f827f000000000000000000000000000000000000000000000000000000000000000061035a565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000828260405160200161036f929190610a19565b60405160208183030381529060405280519060200120905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6103b4816103a1565b81146103bf57600080fd5b50565b6000813590506103d1816103ab565b92915050565b6000602082840312156103ed576103ec610397565b5b60006103fb848285016103c2565b91505092915050565b6000819050919050565b61041781610404565b82525050565b6000602082019050610432600083018461040e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61048b82610442565b810181811067ffffffffffffffff821117156104aa576104a9610453565b5b80604052505050565b60006104bd61038d565b90506104c98282610482565b919050565b600067ffffffffffffffff8211156104e9576104e8610453565b5b6104f282610442565b9050602081019050919050565b82818337600083830152505050565b600061052161051c846104ce565b6104b3565b90508281526020810184848401111561053d5761053c61043d565b5b6105488482856104ff565b509392505050565b600082601f83011261056557610564610438565b5b813561057584826020860161050e565b91505092915050565b60006020828403121561059457610593610397565b5b600082013567ffffffffffffffff8111156105b2576105b161039c565b5b6105be84828501610550565b91505092915050565b6105d0816103a1565b82525050565b60006020820190506105eb60008301846105c7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561062b578082015181840152602081019050610610565b60008484015250505050565b6000610642826105f1565b61064c81856105fc565b935061065c81856020860161060d565b61066581610442565b840191505092915050565b6000602082019050818103600083015261068a8184610637565b905092915050565b600060ff82169050919050565b6106a881610692565b82525050565b60006020820190506106c3600083018461069f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061071057607f821691505b602082108103610723576107226106c9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261078b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261074e565b610795868361074e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006107d26107cd6107c884610404565b6107ad565b610404565b9050919050565b6000819050919050565b6107ec836107b7565b6108006107f8826107d9565b84845461075b565b825550505050565b600090565b610815610808565b6108208184846107e3565b505050565b5b818110156108445761083960008261080d565b600181019050610826565b5050565b601f8211156108895761085a81610729565b6108638461073e565b81016020851015610872578190505b61088661087e8561073e565b830182610825565b50505b505050565b600082821c905092915050565b60006108ac6000198460080261088e565b1980831691505092915050565b60006108c5838361089b565b9150826002028217905092915050565b6108de826105f1565b67ffffffffffffffff8111156108f7576108f6610453565b5b61090182546106f8565b61090c828285610848565b600060209050601f83116001811461093f576000841561092d578287015190505b61093785826108b9565b86555061099f565b601f19841661094d86610729565b60005b8281101561097557848901518255600182019150602085019450602081019050610950565b86831015610992578489015161098e601f89168261089b565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006109bd826105f1565b6109c781856109a7565b93506109d781856020860161060d565b80840191505092915050565b60008160f81b9050919050565b60006109fb826109e3565b9050919050565b610a13610a0e82610692565b6109f0565b82525050565b6000610a2582856109b2565b9150610a318284610a02565b600182019150819050939250505056fea26469706673582212205efc59cd506ada154cab998c1d38c451eb3bb361f1cb5eae3f91c457bfb02b5764736f6c634300081c0033";
const isSuperArgs = (xs) => xs.length > 1;
export class DataPointStorage__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new Interface(_abi);
    }
    static connect(address, runner) {
        return new Contract(address, _abi, runner);
    }
}
DataPointStorage__factory.bytecode = _bytecode;
DataPointStorage__factory.abi = _abi;
//# sourceMappingURL=DataPointStorage__factory.js.map
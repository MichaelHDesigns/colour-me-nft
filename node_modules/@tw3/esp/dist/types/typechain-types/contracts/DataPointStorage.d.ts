import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common";
export interface DataPointStorageInterface extends Interface {
    getFunction(nameOrSignature: "VERSION" | "calculateAddress" | "dataPointSize" | "readDataPoint" | "writeDataPoint"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DataPointWritten"): EventFragment;
    encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "calculateAddress", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "dataPointSize", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "readDataPoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "writeDataPoint", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dataPointSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "readDataPoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "writeDataPoint", data: BytesLike): Result;
}
export declare namespace DataPointWrittenEvent {
    type InputTuple = [dataPointAddress: BytesLike];
    type OutputTuple = [dataPointAddress: string];
    interface OutputObject {
        dataPointAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface DataPointStorage extends BaseContract {
    connect(runner?: ContractRunner | null): DataPointStorage;
    waitForDeployment(): Promise<this>;
    interface: DataPointStorageInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    VERSION: TypedContractMethod<[], [bigint], "view">;
    calculateAddress: TypedContractMethod<[_data: BytesLike], [string], "view">;
    dataPointSize: TypedContractMethod<[
        _dataPointAddress: BytesLike
    ], [
        bigint
    ], "view">;
    readDataPoint: TypedContractMethod<[
        _dataPointAddress: BytesLike
    ], [
        string
    ], "view">;
    writeDataPoint: TypedContractMethod<[
        _data: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "VERSION"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "calculateAddress"): TypedContractMethod<[_data: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "dataPointSize"): TypedContractMethod<[_dataPointAddress: BytesLike], [bigint], "view">;
    getFunction(nameOrSignature: "readDataPoint"): TypedContractMethod<[_dataPointAddress: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "writeDataPoint"): TypedContractMethod<[_data: BytesLike], [string], "nonpayable">;
    getEvent(key: "DataPointWritten"): TypedContractEvent<DataPointWrittenEvent.InputTuple, DataPointWrittenEvent.OutputTuple, DataPointWrittenEvent.OutputObject>;
    filters: {
        "DataPointWritten(bytes32)": TypedContractEvent<DataPointWrittenEvent.InputTuple, DataPointWrittenEvent.OutputTuple, DataPointWrittenEvent.OutputObject>;
        DataPointWritten: TypedContractEvent<DataPointWrittenEvent.InputTuple, DataPointWrittenEvent.OutputTuple, DataPointWrittenEvent.OutputObject>;
    };
}
//# sourceMappingURL=DataPointStorage.d.ts.map
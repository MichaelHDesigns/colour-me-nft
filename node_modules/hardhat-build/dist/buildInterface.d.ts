/**
 * Copyright (C) 2025 TechnicallyWeb3
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
export declare class InterfaceGenerator {
    private content;
    private lines;
    private directives;
    buildPath: string;
    private contractPath;
    private importDirectives;
    replaceDirectives: Map<string, string>;
    removeDirectives: Set<string>;
    private excludeDirectives;
    private includeDirectives;
    private getterDirectives;
    private copyrightNotice;
    isDirectives: string[];
    private moduleDirectives;
    private force;
    constructor(contractPath: string, force?: boolean);
    private parseDirectives;
    private parseDirectiveContent;
    private storeDirective;
    private extractNatspecForLine;
    private parseContract;
    private parseFunctions;
    private parseFunction;
    private parseEvents;
    private parseErrors;
    private parseVariables;
    private shouldIncludeFunction;
    private shouldIncludeEvent;
    private shouldIncludeError;
    private formatNatspec;
    private generateGetterFunctions;
    generateInterface(): string;
    private applyTypeReplacements;
    writeInterface(): 'generated' | 'skipped';
    private processModuleDirective;
    private parseModuleFlags;
    private applyModuleFlags;
}
export declare function findContractsWithBuildDirectives(directory?: string): Promise<string[]>;
export declare function buildAllInterfaces(force?: boolean): Promise<void>;
export declare function buildInterface(contractPath: string, force?: boolean): Promise<void>;
//# sourceMappingURL=buildInterface.d.ts.map